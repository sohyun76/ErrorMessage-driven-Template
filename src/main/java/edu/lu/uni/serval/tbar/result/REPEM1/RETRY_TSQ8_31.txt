RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"listeners\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NeutronListenerV2> listeners;
red_line===
listeners
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"availabilityZones\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronAvailabilityZone> availabilityZones;
red_line===
availabilityZones
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"natpools\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpNatPool> natpools;
red_line===
natpools
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"policyRuleSets\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpPolicyRuleSet> policyRuleSets;
red_line===
policyRuleSets
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.serviceManagement == null ? false : serviceManagement;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"policyTargetGroups\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpPolicyTargetGroup> policyTargetGroups;
red_line===
policyTargetGroups
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.enabled == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"policyRules\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpPolicyRule> policyRules;
red_line===
policyRules
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"externalSegments\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpExternalSegment> externalSegments;
red_line===
externalSegments
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Object> list = new ArrayList<Object>();
red_line===
<Object>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Object> list = new ArrayList<Object>();
red_line===
<Object>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"ipv6RaMode\"
scn.ruleId===
1700
scn.suspCodeStr===
private final String ipv6RaMode;
red_line===
ipv6RaMode
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"ipv6AddressMode\"
scn.ruleId===
1700
scn.suspCodeStr===
private final String ipv6AddressMode;
red_line===
ipv6AddressMode
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove usage of generic wildcard type.
scn.ruleId===
1452
scn.suspCodeStr===
List<? extends Query> getQuery();
red_line===
?
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make token a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Token token;
red_line===
token
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make type a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public ServiceType type;
red_line===
type
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make region a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String region;
red_line===
region
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make perspective a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Facing perspective;
red_line===
perspective
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make access a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Access access;
red_line===
access
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"shareTypeAccessList\"
scn.ruleId===
1700
scn.suspCodeStr===
List<ShareTypeAccess> shareTypeAccessList;
red_line===
shareTypeAccessList
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
void setStart(String String);
red_line===
String
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
T impl = (T) bindings.get(api).newInstance();
red_line===
newInstance
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
sa = action.newInstance();
red_line===
newInstance
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"hypervisors\"
scn.ruleId===
1700
scn.suspCodeStr===
List<ExtHypervisor> hypervisors;
red_line===
hypervisors
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Map<String, ? extends NovaService>> map = new HashMap<String, Map<String, ? extends NovaService>>();
red_line===
<String, Map<String, ? extends NovaService>>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"migrations\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ExtMigration> migrations;
red_line===
migrations
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<NovaHostResource> hostResources = new ArrayList<NovaHostResource>();
red_line===
<NovaHostResource>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"device_name\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public String device_name;
red_line===
device_name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"source_type\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public BDMSourceType source_type = BDMSourceType.VOLUME;
red_line===
source_type
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"destination_type\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public BDMDestType destination_type = BDMDestType.VOLUME;
red_line===
destination_type
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"boot_index\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public Integer boot_index;
red_line===
boot_index
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"volume_size\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public Integer volume_size;
red_line===
volume_size
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"delete_on_termination\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public boolean delete_on_termination = false;
red_line===
delete_on_termination
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make uuid a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String uuid;
red_line===
uuid
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<String> tags = new ArrayList<String>();
red_line===
<String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"flavorAccesses\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NovaFlavorAccess> flavorAccesses;
red_line===
flavorAccesses
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make deleted a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean deleted;
red_line===
deleted
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make hosts a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<String> hosts;
red_line===
hosts
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make id a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String id;
red_line===
id
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make metadata a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Map <String,String>metadata;
red_line===
metadata
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make name a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String name;
red_line===
name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make name a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String name;
red_line===
name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"adminPass\"
scn.ruleId===
1700
scn.suspCodeStr===
private String adminPass;
red_line===
adminPass
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"novaImage\".
scn.ruleId===
1488
scn.suspCodeStr===
NovaImage novaImage = (NovaImage) Apis.getComputeServices().images().get(imageId);
red_line===
(NovaImage) Apis.getComputeServices().images().get(imageId)
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make id a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String id;
red_line===
id
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make name a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String name;
red_line===
name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make addresses a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public NovaAddresses addresses;
red_line===
addresses
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make links a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<GenericLink> links;
red_line===
links
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make image a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Object image;
red_line===
image
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make flavor a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public NovaFlavor flavor;
red_line===
flavor
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make accessIPv4 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String accessIPv4;
red_line===
accessIPv4
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make accessIPv6 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String accessIPv6;
red_line===
accessIPv6
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make status a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Status status;
red_line===
status
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make progress a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Integer progress;
red_line===
progress
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make fault a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public NovaFault fault;
red_line===
fault
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make hostId a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String hostId;
red_line===
hostId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make updated a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Date updated;
red_line===
updated
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make created a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Date created;
red_line===
created
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make metadata a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Map<String, String> metadata;
red_line===
metadata
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"servers\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NovaServer> servers;
red_line===
servers
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make name a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String name;
red_line===
name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"flavors\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NovaFlavor> flavors;
red_line===
flavors
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> policyList = new ArrayList<String>();
red_line===
<String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"serverGroups\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NovaServerGroup> serverGroups;
red_line===
serverGroups
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make service a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String service;
red_line===
service
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make zone a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String zone;
red_line===
zone
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/os-floating-ip-dns/%s/entries/%s\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(DNSEntries.class, uri("/os-floating-ip-dns/%s/entries/%s", domain, name)).execute().getList();
red_line===
"/os-floating-ip-dns/%s/entries/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"domain\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkNotNull(domain, "domain");
red_line===
"domain"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"serverId\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkNotNull(serverId, "serverId");
red_line===
"serverId"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/os-floating-ip-dns/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return delete(ActionResponse.class, uri("/os-floating-ip-dns/%s", domainName)).execute();
red_line===
"/os-floating-ip-dns/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/os-security-groups/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NovaSecGroupExtension.class, uri("/os-security-groups/%s", securityGroupId)).execute();
red_line===
"/os-security-groups/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/os-aggregates/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NovaHostAggregate.class,uri("/os-aggregates/%s",aggregateId)).execute();
red_line===
"/os-aggregates/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/os-aggregates/%s/action\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return post(NovaHostAggregate.class, uri("/os-aggregates/%s/action", hostAggregateId)).entity(new HostAggregateMetadata(metadata)).execute();
red_line===
"/os-aggregates/%s/action"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/os-aggregates\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Invocation<NovaHostAggregates> req = get(NovaHostAggregates.class, uri("/os-aggregates"));
red_line===
"/os-aggregates"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/servers/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NovaServer.class, uri("/servers/%s", serverId)).execute();
red_line===
"/servers/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"LOG\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final Logger LOG = LoggerFactory.getLogger(ServerTagServiceImpl.class);
red_line===
LOG
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/servers/%s/tags\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return this.get(NovaServerTag.class, this.uri("/servers/%s/tags", serverId)).execute();
red_line===
"/servers/%s/tags"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/servers/%s/tags\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
private static final Pattern MESSAGE_PATTERN = Pattern.compile(".*message\\\":\\s\\\"([^\"]+)\\\".*");
red_line===
 = Pattern.compile
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"floatingIps\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronFloatingIP> floatingIps;
red_line===
floatingIps
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make id a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String id;
red_line===
id
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"firewallRules\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NeutronFirewallRule> firewallRules;
red_line===
firewallRules
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"lbPools\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NeutronLbPool> lbPools;
red_line===
lbPools
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"portPairGroups\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronPortPairGroup> portPairGroups;
red_line===
portPairGroups
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"firewalls\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NeutronFirewall> firewalls;
red_line===
firewalls
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"healthMonitors\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NeutronHealthMonitor> healthMonitors;
red_line===
healthMonitors
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neutronFirewallRules = new ArrayList<NeutronFirewallRule>();
red_line===
<NeutronFirewallRule>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neutronFirewallRules = new ArrayList<NeutronFirewallRule>();
red_line===
<NeutronFirewallRule>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"firewallPolicies\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NeutronFirewallPolicy> firewallPolicies;
red_line===
firewallPolicies
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"portPairs\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronPortPair> portPairs;
red_line===
portPairs
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"flowClassifiers\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronFlowClassifier> flowClassifiers;
red_line===
flowClassifiers
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"portChains\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronPortChain> portChains;
red_line===
portChains
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"members\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronMember>members;
red_line===
members
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"vips\"
scn.ruleId===
1700
scn.suspCodeStr===
List<NeutronVip> vips;
red_line===
vips
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"agents\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronAgent> agents;
red_line===
agents
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"opt_value\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public String opt_value;
red_line===
opt_value
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"opt_name\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public String opt_name;
red_line===
opt_name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return (adminStateUp != null) ? adminStateUp : false;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"routers\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronRouter> routers;
red_line===
routers
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public NeutronAvailabilityZone() { }
red_line===
NeutronAvailabilityZone
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"subnets\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronSubnet> subnets;
red_line===
subnets
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neutronSubnets = new ArrayList<NeutronSubnet>();
red_line===
<NeutronSubnet>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"networks\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronNetwork> networks;
red_line===
networks
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return adminStateUp == null ? false : adminStateUp;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"ports\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<NeutronPort> ports;
red_line===
ports
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/security-group-rules\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return post(NeutronSecurityGroupRule.class, uri("/security-group-rules")).entity(rule).execute();
red_line===
"/security-group-rules"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/ports\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(Ports.class, uri("/ports")).execute().getList();
red_line===
"/ports"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/ports/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronPort.class, uri("/ports/%s", portId)).execute();
red_line===
"/ports/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools/%s/members\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronMemberV2.MembersV2.class, uri("/lbaas/pools/%s/members",lbPoolId)).execute().getList();
red_line===
"/lbaas/pools/%s/members"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronLbPoolV2.LbPoolsV2.class, uri("/lbaas/pools")).execute().getList();
red_line===
"/lbaas/pools"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronLbPoolV2.class, uri("/lbaas/pools/%s",lbPoolId)).execute();
red_line===
"/lbaas/pools/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools/%s/members/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronMemberV2.class, uri("/lbaas/pools/%s/members/%s",lbPoolId,memberId)).execute();
red_line===
"/lbaas/pools/%s/members/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/sfc/flow_classifiers/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return deleteWithResponse(uri("/sfc/flow_classifiers/%s", flowClassifierId)).execute();
red_line===
"/sfc/flow_classifiers/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"TenantId must not be null\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkNotNull(tenantId, "TenantId must not be null");
red_line===
"TenantId must not be null"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/quotas\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronNetQuotas.class, uri("/quotas")).execute().getList();
red_line===
"/quotas"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/quotas/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronNetQuota.class, uri("/quotas/%s", tenantId)).execute();
red_line===
"/quotas/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/members/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronMember.class,uri("/lb/members/%s",memberId)).execute();
red_line===
"/lb/members/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/members\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(Members.class, uri("/lb/members")).execute().getList();
red_line===
"/lb/members"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/sfc/port_chains/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return deleteWithResponse(uri("/sfc/port_chains/%s", portChainId)).execute();
red_line===
"/sfc/port_chains/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/listeners/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronListenerV2.class, uri("/lbaas/listeners/%s",listenerId)).execute();
red_line===
"/lbaas/listeners/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/listeners\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronListenerV2.Listeners.class, uri("/lbaas/listeners")).execute().getList();
red_line===
"/lbaas/listeners"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/fw/firewalls/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronFirewall.class, uri("/fw/firewalls/%s", firewallId)).execute();
red_line===
"/fw/firewalls/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/fw/firewalls\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(Firewalls.class, uri("/fw/firewalls")).execute().getList();
red_line===
"/fw/firewalls"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/fw/firewall_policies/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronFirewallPolicy.class, uri("/fw/firewall_policies/%s", firewallPolicyId)).execute();
red_line===
"/fw/firewall_policies/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/fw/firewall_policies\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(FirewallPolicies.class, uri("/fw/firewall_policies")).execute().getList();
red_line===
"/fw/firewall_policies"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/sfc/port_pair_groups/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return deleteWithResponse(uri("/sfc/port_pair_groups/%s", portPairGroupId)).execute();
red_line===
"/sfc/port_pair_groups/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/fw/firewall_rules/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronFirewallRule.class, uri("/fw/firewall_rules/%s", firewallRuleId)).execute();
red_line===
"/fw/firewall_rules/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/fw/firewall_rules\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(FirewallRules.class, uri("/fw/firewall_rules")).execute().getList();
red_line===
"/fw/firewall_rules"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/healthmonitors/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronHealthMonitorV2.class, uri("/lbaas/healthmonitors/%s", healthMonitorId)).execute();
red_line===
"/lbaas/healthmonitors/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/healthmonitors\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(HealthMonitorsV2.class, uri("/lbaas/healthmonitors")).execute().getList();
red_line===
"/lbaas/healthmonitors"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/health_monitors\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(HealthMonitors.class, uri("/lb/health_monitors")).execute().getList();
red_line===
"/lb/health_monitors"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/health_monitors/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronHealthMonitor.class,uri("/lb/health_monitors/%s",healthMonitorId)).execute();
red_line===
"/lb/health_monitors/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/loadbalancers\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronLoadBalancerV2.LoadBalancersV2.class, uri("/lbaas/loadbalancers")).execute().getList();
red_line===
"/lbaas/loadbalancers"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/loadbalancers/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronLoadBalancerV2.class, uri("/lbaas/loadbalancers/%s",loadbalancerId)).execute();
red_line===
"/lbaas/loadbalancers/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/sfc/port_pairs/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return deleteWithResponse(uri("/sfc/port_pairs/%s", portPairId  )).execute();
red_line===
"/sfc/port_pairs/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/vips/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronVip.class,uri("/lb/vips/%s",vipId)).execute();
red_line===
"/lb/vips/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/vips\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(Vips.class, uri("/lb/vips")).execute().getList();
red_line===
"/lb/vips"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/pools/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronLbPool.class, uri("/lb/pools/%s",lbPoolId)).execute();
red_line===
"/lb/pools/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lb/pools\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(LbPools.class, uri("/lb/pools")).execute().getList();
red_line===
"/lb/pools"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/networks/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return deleteWithResponse(uri("/networks/%s", networkId)).execute();
red_line===
"/networks/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/networks\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Invocation<Networks> invocation = get(Networks.class, "/networks");
red_line===
"/networks"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/floatingips\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(FloatingIPs.class, uri("/floatingips")).execute().getList();
red_line===
"/floatingips"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/floatingips/%s\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronFloatingIP.class, uri("/floatingips/%s", id)).execute();
red_line===
"/floatingips/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/routers/%s\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronRouter.class, uri("/routers/%s", routerId)).execute();
red_line===
"/routers/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/routers\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(Routers.class, uri("/routers")).execute().getList();
red_line===
"/routers"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/security-groups/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronSecurityGroup.class, uri("/security-groups/%s", id)).execute();
red_line===
"/security-groups/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/security-groups\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return post(NeutronSecurityGroup.class, uri("/security-groups")).entity(securityGroup).execute();
red_line===
"/security-groups"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/subnets/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NeutronSubnet.class, uri("/subnets/%s", subnetId)).execute();
red_line===
"/subnets/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new MetaHeaderRequestWrapper<R>(prefix, metadata, request);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"shareServers\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaShareServer> shareServers;
red_line===
shareServers
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public ForceDeleteAction() { }
red_line===
ForceDeleteAction
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"host_name\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private String host_name;
red_line===
host_name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"server_id\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private String server_id;
red_line===
server_id
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"attachment_id\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private String attachment_id;
red_line===
attachment_id
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"volume_id\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private String volume_id;
red_line===
volume_id
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"services\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ExtService> services;
red_line===
services
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"volumes\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<CinderVolume> volumes;
red_line===
volumes
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"maxoversubscription_ratio\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private Long maxoversubscription_ratio;
red_line===
maxoversubscription_ratio
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"pools\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String pools;
red_line===
pools
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/snapshots/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(CinderVolumeSnapshot.class, uri("/snapshots/%s", snapshotId)).execute();
red_line===
"/snapshots/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/snapshots\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(VolumeSnapshots.class, uri("/snapshots")).execute().getList();
red_line===
"/snapshots"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"TransferId must contain a value\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkNotNull(transferId, "TransferId must contain a value");
red_line===
"TransferId must contain a value"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/volumes/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(CinderVolume.class, uri("/volumes/%s", volumeId)).execute();
red_line===
"/volumes/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"usage\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(CinderBlockQuotaSet.class, uri("/os-quota-sets/%s", tenantId)).param("usage", false).execute();
red_line===
"usage"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Tenant cannot be null\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkNotNull(tenantId, "Tenant cannot be null");
red_line===
"Tenant cannot be null"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/shares/%s\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(ManilaShare.class, uri("/shares/%s", shareId)).execute();
red_line===
"/shares/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String API_VERSION_HEADER = "X-Openstack-Manila-Api-Version";
red_line===
static
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"MITAKA_VERSION\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final MicroVersion MITAKA_VERSION = new MicroVersion(2, 15);
red_line===
MITAKA_VERSION
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/snapshots/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(ManilaShareSnapshot.class, uri("/snapshots/%s", snapshotId)).execute();
red_line===
"/snapshots/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/security-services/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(ManilaSecurityService.class, uri("/security-services/%s", securityServiceId)).execute();
red_line===
"/security-services/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/share-networks/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(ManilaShareNetwork.class, uri("/share-networks/%s", shareNetworkId)).execute();
red_line===
"/share-networks/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"shareTypes\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaShareType> shareTypes;
red_line===
shareTypes
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"services\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaService> services;
red_line===
services
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"shares\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaShare> shares;
red_line===
shares
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"availabilityZones\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaAvailabilityZone> availabilityZones;
red_line===
availabilityZones
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"securityServices\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaSecurityService> securityServices;
red_line===
securityServices
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"name\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String name;
red_line===
name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"description\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String description;
red_line===
description
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"shareNetworks\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaShareNetwork> shareNetworks;
red_line===
shareNetworks
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"shareInstances\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaShareInstance> shareInstances;
red_line===
shareInstances
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"accessList\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<ManilaAccess> accessList;
red_line===
accessList
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"type\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private SecurityService.Type type;
red_line===
type
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"name\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String name;
red_line===
name
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"description\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String description;
red_line===
description
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"user\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String user;
red_line===
user
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"password\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String password;
red_line===
password
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"domain\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String domain;
red_line===
domain
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"server\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String server;
red_line===
server
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"gigabytes\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Integer gigabytes;
red_line===
gigabytes
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"snapshots\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Integer snapshots;
red_line===
snapshots
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"shares\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Integer shares;
red_line===
shares
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"force\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Boolean force;
red_line===
force
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"cachedImages\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<CachedGlanceImage> cachedImages;
red_line===
cachedImages
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"images\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GlanceImage> images;
red_line===
images
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"members\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GlanceImageMember> members;
red_line===
members
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/images/%s/members\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GlanceMember.Members.class, uri("/images/%s/members", imageId)).execute().getList();
red_line===
"/images/%s/members"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/images/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GlanceImage.class, uri("/images/%s", imageId)).execute();
red_line===
"/images/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/images\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GlanceImage.Images.class, uri("/images")).execute().getList();
red_line===
"/images"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
outputStream = new FileOutputStream(filename);
red_line===
new FileOutputStream(filename)
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/tasks\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GlanceTask.Tasks.class, uri("/tasks")).execute().getList();
red_line===
"/tasks"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"tasks\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GlanceTask> tasks;
red_line===
tasks
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"images\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GlanceImage> images;
red_line===
images
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"members\"
scn.ruleId===
1700
scn.suspCodeStr===
List<GlanceMember> members;
red_line===
members
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"cachedImages\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<CachedGlanceImage> cachedImages;
red_line===
cachedImages
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/images/%s\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
return head(Image.class, uri("/images/%s", imageId)).execute(ExecutionOptions.create(ImageFromHeadersFunction.instance()));
red_line===
"/images/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/images/%s/members/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return statusAndClose(put(Void.class, uri("/images/%s/members/%s", imageId, tenantId)).executeWithResponse()) == 204;
red_line===
"/images/%s/members/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/images\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String uri = getProvider() == CloudProvider.RACKSPACE ? "/images" : "/images/detail";
red_line===
"/images"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/stacks\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return post(HeatStack.class, uri("/stacks")).entity(newStack).execute();
red_line===
"/stacks"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/stacks/%s/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return deleteWithResponse(uri("/stacks/%s/%s", stackName, stackId)).execute();
red_line===
"/stacks/%s/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, String> files = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, String> files = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(ex);
red_line===
RuntimeException
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String GET_FILE = "get_file";
red_line===
static
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, String> files = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, String> files = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"base_url\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
if(rr.get("base_url") != null ) setBaseUrl(new URL(rr.get("base_url")));
red_line===
"base_url"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"type\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String type;
red_line===
type
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make id a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String id;
red_line===
id
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"listeners\"
scn.ruleId===
1700
scn.suspCodeStr===
List<OctaviaListenerV2> listeners;
red_line===
listeners
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/loadbalancers\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaLoadBalancerV2.LoadBalancersV2.class, uri("/lbaas/loadbalancers")).execute().getList();
red_line===
"/lbaas/loadbalancers"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/loadbalancers/%s\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaLoadBalancerV2.class, uri("/lbaas/loadbalancers/%s",loadbalancerId)).execute();
red_line===
"/lbaas/loadbalancers/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/listeners/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaListenerV2.class, uri("/lbaas/listeners/%s",listenerId)).execute();
red_line===
"/lbaas/listeners/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/listeners\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaListenerV2.Listeners.class, uri("/lbaas/listeners")).execute().getList();
red_line===
"/lbaas/listeners"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/healthmonitors/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaHealthMonitorV2.class, uri("/lbaas/healthmonitors/%s", healthMonitorId)).execute();
red_line===
"/lbaas/healthmonitors/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/healthmonitors\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(HealthMonitorsV2.class, uri("/lbaas/healthmonitors")).execute().getList();
red_line===
"/lbaas/healthmonitors"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaLbPoolV2.LbPoolsV2.class, uri("/lbaas/pools")).execute().getList();
red_line===
"/lbaas/pools"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Null is returned but a \"Boolean\" is expected.
scn.ruleId===
2447
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaLbPoolV2.class, uri("/lbaas/pools/%s",lbPoolId)).execute();
red_line===
"/lbaas/pools/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools/%s/members/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaMemberV2.class, uri("/lbaas/pools/%s/members/%s",lbPoolId,memberId)).execute();
red_line===
"/lbaas/pools/%s/members/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/lbaas/pools/%s/members\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(OctaviaMemberV2.MembersV2.class, uri("/lbaas/pools/%s/members",lbPoolId)).execute().getList();
red_line===
"/lbaas/pools/%s/members"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/profiles/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(SenlinProfile.class, uri("/profiles/%s", policyID)).execute();
red_line===
"/profiles/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/clusters/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(SenlinCluster.class, uri("/clusters/%s", clusterID)).execute();
red_line===
"/clusters/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/policies/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(SenlinPolicy.class, uri("/policies/%s", policyID)).execute();
red_line===
"/policies/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/nodes/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(SenlinNode.class, uri("/nodes/%s", nodeID)).param("show_details", showDetails).execute();
red_line===
"/nodes/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"adjustment\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
properties.put("adjustment", adjustment);
red_line===
"adjustment"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"properties\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
spec.put("properties", properties);
red_line===
"properties"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"updated_at\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private Date updated_at;
red_line===
updated_at
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map<String, Map> schema;
red_line===
Map
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/vnfds\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(TackerVnfds.class, uri("/vnfds")).execute().getList();
red_line===
"/vnfds"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/vims\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(TackerVims.class, uri("/vims")).execute().getList();
red_line===
"/vims"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/vnfs/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(TackerVnf.class, uri("/vnfs/%s", vnfId)).execute();
red_line===
"/vnfs/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/vnfs\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(TackerVnfs.class, uri("/vnfs")).execute().getList();
red_line===
"/vnfs"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"nodeGroupTemplates\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaNodeGroupTemplate> nodeGroupTemplates;
red_line===
nodeGroupTemplates
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"instances\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaInstance> instances;
red_line===
instances
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"jobbinaries\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaJobBinary> jobbinaries;
red_line===
jobbinaries
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"nodeGroups\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaNodeGroup> nodeGroups;
red_line===
nodeGroups
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
private String trustId;
red_line===
        private String trustId;    // TODO: What is trust_id?
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"clusters\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaCluster> clusters;
red_line===
clusters
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"jobs\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaJob> jobs;
red_line===
jobs
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"jobExecutions\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaJobExecution> jobExecutions;
red_line===
jobExecutions
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"datasources\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<SaharaDataSource> datasources;
red_line===
datasources
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/clusters/%s\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(SaharaCluster.class, uri("/clusters/%s", clusterId)).execute();
red_line===
"/clusters/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/job-binary-internals/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(SaharaJobBinaryInternal.class, uri("/job-binary-internals/%s", jobBinaryInternalId)).execute();
red_line===
"/job-binary-internals/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/images/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(SaharaImage.class, uri("/images/%s", imageId)).execute();
red_line===
"/images/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DF\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static SimpleDateFormat DF;
red_line===
DF
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make \"ISO8601_FORMAT\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final SimpleDateFormat ISO8601_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
red_line===
ISO8601_FORMAT
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Null is returned but a \"Boolean\" is expected.
scn.ruleId===
2447
scn.suspCodeStr===
if (bool == null) return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Null is returned but a \"Boolean\" is expected.
scn.ruleId===
2447
scn.suspCodeStr===
private static final Pattern TZ_PATTERN = Pattern.compile("(.*)" + TZ_REGEX + "$");
red_line===
TZ_P
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static Pattern VERSION_REGEX = Pattern.compile("^([1-9]\\d*)\\.([1-9]\\d*|0|)$");
red_line===
static
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Call \"remove()\" on \"sessions\".
scn.ruleId===
5164
scn.suspCodeStr===
private static final ThreadLocal<OSClientSession> sessions = new ThreadLocal<OSClientSession>();
red_line===
sessions
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private static ThreadLocal<String> reqIdContainer = new ThreadLocal<String>();
red_line===
<String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new Invocation<R>(req, serviceType, endpointFunc);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map headers = new HashMap();
red_line===
Map
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"X-Configuration-Session\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
invocation.header("X-Configuration-Session", sessionId);
red_line===
"X-Configuration-Session"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return reports(environmentId, deploymentId, new ArrayList<String>());
red_line===
<String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/environments/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(MuranoEnvironment.class, uri("/environments/%s", id)).execute();
red_line===
"/environments/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"date\".
scn.ruleId===
1488
scn.suspCodeStr===
Date date = new Date(rawDateEpochMilliSeconds.longValue());
red_line===
new Date(rawDateEpochMilliSeconds.longValue())
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"INSTANCE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static HeaderNameValuesToHeaderMap INSTANCE = new HeaderNameValuesToHeaderMap();
red_line===
INSTANCE
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new OneOrNull<T>();
red_line===
<T>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private volatile SortedSetMultimap<String, Service> aggregatedCatalog;
red_line===
volatile SortedSetMultimap<String, Service>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Fully initialize \"aggregatedCatalog\" before assigning it.
scn.ruleId===
3064
scn.suspCodeStr===
aggregatedCatalog = TreeMultimap.create();
red_line===
aggregatedCatalog = TreeMultimap.create()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make \"user\" transient or serializable.
scn.ruleId===
1948
scn.suspCodeStr===
private AuthUser user;
red_line===
user
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/users/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(KeystoneUser.class, uri("/users/%s", userId)).execute();
red_line===
"/users/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/users\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(Users.class, uri("/users")).execute().getList();
red_line===
"/users"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
return (list != null && list.size() > 0) ? list.get(0) : null;
red_line===
list.size() > 0
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"endpoints\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<KeystoneEndpoint> endpoints;
red_line===
endpoints
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private volatile SortedSetMultimap<String, AccessService> aggregatedCatalog;
red_line===
volatile SortedSetMultimap<String, AccessService>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Fully initialize \"aggregatedCatalog\" before assigning it.
scn.ruleId===
3064
scn.suspCodeStr===
aggregatedCatalog = TreeMultimap.create();
red_line===
aggregatedCatalog = TreeMultimap.create()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make \"roles\" transient or serializable.
scn.ruleId===
1948
scn.suspCodeStr===
private List<AccessRole> roles;
red_line===
roles
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LEGACY_EP_HANDLING\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static boolean LEGACY_EP_HANDLING = Boolean.getBoolean(LEGACY_EP_RESOLVING_PROP);
red_line===
LEGACY_EP_HANDLING
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private static final Map<Key, String> CACHE = new ConcurrentHashMap<Key, String>();
red_line===
<Key, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/nat_pools/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpNatPool.class, uri("/grouppolicy/nat_pools/%s", id)).execute();
red_line===
"/grouppolicy/nat_pools/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/nat_pools\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(NatPools.class, uri("/grouppolicy/nat_pools")).execute().getList();
red_line===
"/grouppolicy/nat_pools"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_rules/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpPolicyRule.class, uri("/grouppolicy/policy_rules/%s", id)).execute();
red_line===
"/grouppolicy/policy_rules/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_rules\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(PolicyRules.class, uri("/grouppolicy/policy_rules")).execute().getList();
red_line===
"/grouppolicy/policy_rules"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_classifiers\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(PolicyClassifiers.class, uri("/grouppolicy/policy_classifiers")).execute().getList();
red_line===
"/grouppolicy/policy_classifiers"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_classifiers/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpPolicyClassifier.class, uri("/grouppolicy/policy_classifiers/%s", id)).execute();
red_line===
"/grouppolicy/policy_classifiers/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/external_policies\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(ExternalPolicies.class, uri("/grouppolicy/external_policies")).execute().getList();
red_line===
"/grouppolicy/external_policies"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/external_policies/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpExternalPolicy.class, uri("/grouppolicy/external_policies/%s", id)).execute();
red_line===
"/grouppolicy/external_policies/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_target_groups\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(PolicyTargetGroups.class, uri("/grouppolicy/policy_target_groups")).execute().getList();
red_line===
"/grouppolicy/policy_target_groups"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_target_groups/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpPolicyTargetGroup.class, uri("/grouppolicy/policy_target_groups/%s", id)).execute();
red_line===
"/grouppolicy/policy_target_groups/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/l3_policies\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(L3Policies.class, uri("/grouppolicy/l3_policies")).execute().getList();
red_line===
"/grouppolicy/l3_policies"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/l3_policies/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpL3Policy.class, uri("/grouppolicy/l3_policies/%s", id)).execute();
red_line===
"/grouppolicy/l3_policies/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/l2_policies\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(L2Policies.class, uri("/grouppolicy/l2_policies")).execute().getList();
red_line===
"/grouppolicy/l2_policies"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/l2_policies/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpL2Policy.class, uri("/grouppolicy/l2_policies/%s", id)).execute();
red_line===
"/grouppolicy/l2_policies/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/external_segments/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpExternalSegment.class, uri("/grouppolicy/external_segments/%s", id)).execute();
red_line===
"/grouppolicy/external_segments/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/external_segments\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(ExternalSegments.class, uri("/grouppolicy/external_segments")).execute().getList();
red_line===
"/grouppolicy/external_segments"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_actions\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(PolicyActions.class, uri("/grouppolicy/policy_actions")).execute().getList();
red_line===
"/grouppolicy/policy_actions"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_actions/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpPolicyAction.class, uri("/grouppolicy/policy_actions/%s", id)).execute();
red_line===
"/grouppolicy/policy_actions/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/network_service_policies/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpNetworkServicePolicy.class, uri("/grouppolicy/network_service_policies/%s", id)).execute();
red_line===
"/grouppolicy/network_service_policies/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_targets/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpPolicyTarget.class, uri("/grouppolicy/policy_targets/%s", id)).execute();
red_line===
"/grouppolicy/policy_targets/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_targets\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(PolicyTargets.class, uri("/grouppolicy/policy_targets")).execute().getList();
red_line===
"/grouppolicy/policy_targets"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_rule_sets/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(GbpPolicyRuleSet.class, uri("/grouppolicy/policy_rule_sets/%s", id)).execute();
red_line===
"/grouppolicy/policy_rule_sets/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/grouppolicy/policy_rule_sets\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(PolicyRuleSets.class, uri("/grouppolicy/policy_rule_sets")).execute().getList();
red_line===
"/grouppolicy/policy_rule_sets"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"l2Policies\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpL2Policy> l2Policies;
red_line===
l2Policies
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"policyTargets\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpPolicyTarget> policyTargets;
red_line===
policyTargets
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"policyActions\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpPolicyAction> policyActions;
red_line===
policyActions
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.l3Policy.externalSegments.put(extSegId, new ArrayList<String>());
red_line===
<String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"l3Policies\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpL3Policy> l3Policies;
red_line===
l3Policies
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.serviceManagement == null ? false : serviceManagement;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return this.shared == null ? false : shared;
red_line===
false
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"policyTargetGroups\"
scn.ruleId===
1700
scn.suspCodeStr===
private List<GbpPolicyTargetGroupCreate> policyTargetGroups;
red_line===
policyTargetGroups
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public CeilometerQuery(){}
red_line===
CeilometerQuery
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"CeilometerThresholdRule\".
scn.ruleId===
1905
scn.suspCodeStr===
this.thresholdRule = (CeilometerThresholdRule) tr;
red_line===
CeilometerThresholdRule
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"capabilities\".
scn.ruleId===
1488
scn.suspCodeStr===
CeilometerCapabilities capabilities = get(CeilometerCapabilities.class, uri("/capabilities")).execute();
red_line===
get(CeilometerCapabilities.class, uri("/capabilities")).execute()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/alarms/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(CeilometerAlarm.class, uri("/alarms/%s", alarmId)).execute();
red_line===
"/alarms/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ListEntity<MeterSample> listEntity= new ListEntity<MeterSample>(sampleList);
red_line===
<MeterSample>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/meters/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
CeilometerMeterSample[] samples = get(CeilometerMeterSample[].class, uri("/meters/%s", meterName)).execute();
red_line===
"/meters/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"resource\".
scn.ruleId===
1488
scn.suspCodeStr===
CeilometerResource resource = get(CeilometerResource.class, uri("/resources/%s", resourceId)).execute();
red_line===
get(CeilometerResource.class, uri("/resources/%s", resourceId)).execute()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"sample\".
scn.ruleId===
1488
scn.suspCodeStr===
CeiloMeterSample sample = get(CeiloMeterSample.class, uri("/samples/%s", sampleId)).execute();
red_line===
get(CeiloMeterSample.class, uri("/samples/%s", sampleId)).execute()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/alarms/%s\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(CeilometerAlarm.class, uri("/alarms/%s", alarmId)).execute();
red_line===
"/alarms/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
private static final String RESOURCE_PATH = "/containers";
red_line===
"/containers"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
private static final String RESOURCE_PATH = "/secrets";
red_line===
"/secrets"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"instance\".
scn.ruleId===
1488
scn.suspCodeStr===
TroveInstance instance = get(TroveInstance.class, uri("/instances/%s", instanceId)).execute();
red_line===
get(TroveInstance.class, uri("/instances/%s", instanceId)).execute()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"default_version\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private String default_version;
red_line===
default_version
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"%s/%s\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return get(MagnumContainer.class, uri("%s/%s", MAGNUM_CONTAINERS, id)).serviceType(ServiceType.MAGNUM).execute();
red_line===
"%s/%s"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"replace\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
return update(artifactId, "replace", "/status", "active", ToscaTemplates.class);
red_line===
"replace"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
return uri.replaceAll(" ", "%20");
red_line===
replaceAll
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public void checkClientTrusted(X509Certificate[] certs, String authType) {}
red_line===
checkClientTrusted
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public void checkServerTrusted(X509Certificate[] certs, String authType) {}
red_line===
checkServerTrusted
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
VULNERABILITY
scn.errorMessage===
Change this code to use a stronger protocol.
scn.ruleId===
4423
scn.suspCodeStr===
SSLContext ssc = SSLContext.getInstance("TLS");
red_line===
"TLS"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
VULNERABILITY
scn.errorMessage===
Enable server hostname verification on this SSL/TLS connection.
scn.ruleId===
5527
scn.suspCodeStr===
return true;
red_line===
return true;
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_PROJECTS = "/projects";
red_line===
"/projects"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_ROLES = "/roles";
red_line===
"/roles"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_USERS = "/users";
red_line===
"/users"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_SERVICES = "/services";
red_line===
"/services"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_DOMAINS = "/domains";
red_line===
"/domains"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_ENDPOINTS = "/endpoints";
red_line===
"/endpoints"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_EXTENSIONS = "/extensions";
red_line===
"/extensions"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_GROUPS = "/groups";
red_line===
"/groups"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_POLICIES = "/policies";
red_line===
"/policies"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_REGIONS = "/regions";
red_line===
"/regions"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_CREDENTIALS = "/credentials";
red_line===
"/credentials"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_TOKENS = "/auth/tokens";
red_line===
"/auth/tokens"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_TENANTS = "/tenants";
red_line===
"/tenants"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_ARTIFACTS = "/artifacts";
red_line===
"/artifacts"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_ZONES = "/zones";
red_line===
"/zones"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_RECORDSETS = "/recordsets";
red_line===
"/recordsets"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String PATH_NAMESERVERS = "/nameservers";
red_line===
"/nameservers"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new Handle<T>(response, returnType, options, requiresVoidBodyHandling);
red_line===
<T>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract the assignment out of this expression.
scn.ruleId===
1121
scn.suspCodeStr===
return service = it.next();
red_line===
=
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, Object> headers = new HashMap<String, Object>();
red_line===
<String, Object>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new RequestBuilder<Void>(Void.class);
red_line===
<Void>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new RequestBuilder<R>(returnType);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new RequestBuilder<R>(this);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
request = new HttpRequest<R>();
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Object> values = new ArrayList<Object>();
red_line===
<Object>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Object> values = new ArrayList<Object>();
red_line===
<Object>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ExecutionOptions<R>(parser, null);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ExecutionOptions<R>(null, propagateResponse);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ExecutionOptions<R>(parser, propagateResponse);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
VULNERABILITY
scn.errorMessage===
Change this code to use a stronger protocol.
scn.ruleId===
4423
scn.suspCodeStr===
SSLContext firstSslContext =  SSLContext.getInstance("SSL");
red_line===
"SSL"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
VULNERABILITY
scn.errorMessage===
Change this code to use a stronger protocol.
scn.ruleId===
4423
scn.suspCodeStr===
SSLContext secondSslContext =  SSLContext.getInstance("SSL");
red_line===
"SSL"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DOMAIN_DESCRIPTION\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static String DOMAIN_DESCRIPTION = "Domain used for CRUD tests";
red_line===
DOMAIN_DESCRIPTION
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DOMAIN_DESCRIPTION_UPDATED\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static String DOMAIN_DESCRIPTION_UPDATED = "An updated domain used for CRUD tests";
red_line===
DOMAIN_DESCRIPTION_UPDATED
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
String DOMAIN_ID = newDomain.getId();
red_line===
DOMAIN_ID
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027USER_ID\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
ActionResponse response_changeUserPassword = osv3().identity().users().changePassword("aa9f25defa6d4cafb48466df83106065", "originalPassword", "password");
red_line===
"aa9f25defa6d4cafb48466df83106065"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"foobar\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
User newUser = osv3().identity().users().create(USER_DOMAIN_ID, "foobar", "secret", "foobar@example.org", true);
red_line===
"foobar"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse response_delete = osv3().identity().users().delete(crudUserId);
red_line===
response_delete
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse response_delete_fail = osv3().identity().users().delete("invalidUser");
red_line===
response_delete_fail
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse response_changePassword_fail = osv3().identity().users().changePassword("invalidUser", "OriginalPassword", "password");
red_line===
response_changePassword_fail
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
String GROUP_ID = newGroup.getId();
red_line===
GROUP_ID
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Group group_setToUpdate = osv3().identity().groups().get(GROUP_ID);
red_line===
group_setToUpdate
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"PROJECT_ID\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private String PROJECT_ID;
red_line===
PROJECT_ID
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Region region_setToUpdate = osv3().identity().regions().get(REGION_CRUD_ID);
red_line===
region_setToUpdate
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Policy policy_setToUpdate = osv3().identity().policies().get(POLICY_ID);
red_line===
policy_setToUpdate
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
private static final String PASSWORD = "test";
red_line===
tic final String P
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"application/json\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
private static final ImmutableMap<String, String> HEADER_AUTH_PROJECT_RESPONSE = ImmutableMap.of("X-Subject-Token", "763fd7e197ab4e00b2e6e0a8d22a8e87", "Content-Type", "application/json");
red_line===
"application/json"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027TOKEN_UNSCOPED_ID\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
private static final ImmutableMap<String, String> HEADER_AUTH_TOKEN_RESPONSE = ImmutableMap.of("X-Subject-Token", "3ecb5c2063904566be4b10406c0f7568", "Content-Type", "application/json");
red_line===
"3ecb5c2063904566be4b10406c0f7568"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
String tokenId_unscoped = osclient_unscoped.getToken().getId();
red_line===
tokenId_unscoped
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
String tokenId_scoped = osclient_scoped.getToken().getId();
red_line===
tokenId_scoped
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Strings and Boxed types should be compared using \"equals()\".
scn.ruleId===
4973
scn.suspCodeStr===
assertTrue(newTokenId != tokenId);
red_line===
!=
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Strings and Boxed types should be compared using \"equals()\".
scn.ruleId===
4973
scn.suspCodeStr===
assertTrue(tokenUnscopedId != tokenScopedId);
red_line===
!=
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse response_success = osv3().identity().roles().checkProjectUserRole(PROJECT_ID, USER_ID, ROLE_ID);
red_line===
response_success
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse result_grant = osv3().identity().roles().grantProjectUserRole(PROJECT_ID, USER_ID, ROLE_ID);
red_line===
result_grant
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse result_revoke = osv3().identity().roles().revokeProjectUserRole(PROJECT_ID, USER_ID, ROLE_ID);
red_line===
result_revoke
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse response_success = osv3().identity().roles().checkDomainUserRole(USER_DOMAIN_ID, USER_ID, ROLE_ID);
red_line===
response_success
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse result_grant = osv3().identity().roles().grantDomainUserRole(USER_DOMAIN_ID, USER_ID, ROLE_ID);
red_line===
result_grant
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse result_revoke = osv3().identity().roles().revokeDomainUserRole(USER_DOMAIN_ID, USER_ID, ROLE_ID);
red_line===
result_revoke
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse response_fail = osv3().identity().roles().grantDomainUserRole(USER_DOMAIN_ID, USER_ID,"nonExistingRoleId");
red_line===
response_fail
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ActionResponse response_fail = osv3().identity().roles().revokeDomainUserRole(USER_DOMAIN_ID, USER_ID, "existingUnassignedRoleId");
red_line===
response_fail
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Role role_setToUpdate = osv3().identity().roles().get(ROLE_ID);
red_line===
role_setToUpdate
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make \"ISO8601\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final DateFormat ISO8601 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
red_line===
ISO8601
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("users.size = " + users.size());
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"b80f8d4e28b74188858b654cb1fccf7d\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(((TokenV2) osv2().getAccess().getToken()).getTenant().getId(), "b80f8d4e28b74188858b654cb1fccf7d");
red_line===
"b80f8d4e28b74188858b654cb1fccf7d"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> filters = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"8a9287b7-4f4d-4213-8d75-63470f19f27c\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
Volume volume = osv3().blockStorage().volumes().get("8a9287b7-4f4d-4213-8d75-63470f19f27c");
red_line===
"8a9287b7-4f4d-4213-8d75-63470f19f27c"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"b0b5ed7ae06049688349fe43737796d4\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(volumes.get(0).getTenantId(), "b0b5ed7ae06049688349fe43737796d4");
red_line===
"b0b5ed7ae06049688349fe43737796d4"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> filters = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> filters = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/v[123]/\\\\p{XDigit}*/backups/\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(request.getPath().matches("/v[123]/\\p{XDigit}*/backups/" + backupId ));
red_line===
"/v[123]/\\p{XDigit}*/backups/"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"backup1122\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
final String name = "backup1122";
red_line===
"backup1122"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"735359d5-9584-4046-94d3-5ffc47be84f5\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id="735359d5-9584-4046-94d3-5ffc47be84f5";
red_line===
"735359d5-9584-4046-94d3-5ffc47be84f5"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"X-Auth-Token\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertNotNull(request.getHeader("X-Auth-Token"));
red_line===
"X-Auth-Token"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"image.upload\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(event.getEventType(), "image.upload");
red_line===
"image.upload"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"string\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(traitDescriptions.get(0).getType(), "string");
red_line===
"string"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"image.localhost\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(trait.getValue(), "image.localhost");
red_line===
"image.localhost"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"service\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(trait.getName(), "service");
red_line===
"service"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"listRequest\".
scn.ruleId===
1854
scn.suspCodeStr===
RecordedRequest listRequest = server.takeRequest();
red_line===
= server.takeRequest()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"listRequest\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
private static final ImmutableList<String> RECORDSET_RECORDS = ImmutableList.of("10.1.0.2");
red_line===
 ImmutableL
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"c07058a9-8d84-4443-b8f5-508d0facfe10\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "c07058a9-8d84-4443-b8f5-508d0facfe10";
red_line===
"c07058a9-8d84-4443-b8f5-508d0facfe10"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"9a7aff27-fd41-4ec1-ba4c-3eb92c629313\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals("9a7aff27-fd41-4ec1-ba4c-3eb92c629313", list.get(0).getId());
red_line===
"9a7aff27-fd41-4ec1-ba4c-3eb92c629313"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
List<? extends MemberV2> list = osv3().octavia().lbPoolV2().listMembers("4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5");
red_line===
"4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"350576d8-5015-4d4e-b73f-23df2397e4c4\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals("350576d8-5015-4d4e-b73f-23df2397e4c4", list.get(0).getId());
red_line===
"350576d8-5015-4d4e-b73f-23df2397e4c4"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"282b71ea-9ceb-4cd6-8881-cb511af2edb5\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "282b71ea-9ceb-4cd6-8881-cb511af2edb5";
red_line===
"282b71ea-9ceb-4cd6-8881-cb511af2edb5"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"b7f6a49f-ebd8-43c5-b792-5748366eff21\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(list.get(0).getId(), "b7f6a49f-ebd8-43c5-b792-5748366eff21");
red_line===
"b7f6a49f-ebd8-43c5-b792-5748366eff21"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"db083bf7-c455-4758-b1ad-203cf441a73a\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String poolId = "db083bf7-c455-4758-b1ad-203cf441a73a";
red_line===
"db083bf7-c455-4758-b1ad-203cf441a73a"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test lb member List"+list);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test lb member List filter"+list);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test get a member"+member);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test delete a member"+result);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"100.2.12.32\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
map.put("address", "100.2.12.32");
red_line===
"100.2.12.32"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"c69933c1-b472-44f9-8226-30dc4ffd454c\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(list.get(0).getId(), "c69933c1-b472-44f9-8226-30dc4ffd454c");
red_line===
"c69933c1-b472-44f9-8226-30dc4ffd454c"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"3b0ef8f4-82c7-44d4-a4fb-6177f9a21977\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(list.get(0).getId(), "3b0ef8f4-82c7-44d4-a4fb-6177f9a21977");
red_line===
"3b0ef8f4-82c7-44d4-a4fb-6177f9a21977"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"8722e0e0-9cc9-4490-9660-8c9a5732fbb0\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(list.get(0).getId(), "8722e0e0-9cc9-4490-9660-8c9a5732fbb0");
red_line===
"8722e0e0-9cc9-4490-9660-8c9a5732fbb0"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"282b71ea-9ceb-4cd6-8881-cb511af2edb5\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "282b71ea-9ceb-4cd6-8881-cb511af2edb5";
red_line===
"282b71ea-9ceb-4cd6-8881-cb511af2edb5"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"9a7aff27-fd41-4ec1-ba4c-3eb92c629313\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals("9a7aff27-fd41-4ec1-ba4c-3eb92c629313", list.get(0).getId());
red_line===
"9a7aff27-fd41-4ec1-ba4c-3eb92c629313"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
List<? extends MemberV2> list = osv3().networking().lbaasV2().lbPool().listMembers("4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5");
red_line===
"4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"350576d8-5015-4d4e-b73f-23df2397e4c4\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals("350576d8-5015-4d4e-b73f-23df2397e4c4", list.get(0).getId());
red_line===
"350576d8-5015-4d4e-b73f-23df2397e4c4"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"c07058a9-8d84-4443-b8f5-508d0facfe10\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "c07058a9-8d84-4443-b8f5-508d0facfe10";
red_line===
"c07058a9-8d84-4443-b8f5-508d0facfe10"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> filters = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027NETWORK_ID\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
ActionResponse result = osv3().networking().agent().detachNetworkToDhcpAgent("190ecbc2-77e0-4e4f-a96b-aa849edb357b", "4e8e5957-649f-477b-9e5b-f1f75b21c03c");
red_line===
"4e8e5957-649f-477b-9e5b-f1f75b21c03c"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test lb HealtMonitor List"+list);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test lb HealtMonitor List filter"+list);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test get a HealtMonitor"+healthMonitor);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map <String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test lb vip List"+list);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test lb vip List filter"+list);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("test get a vip"+vip);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(result);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(result);
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"b7f6a49f-ebd8-43c5-b792-5748366eff21\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(list.get(0).getId(), "b7f6a49f-ebd8-43c5-b792-5748366eff21");
red_line===
"b7f6a49f-ebd8-43c5-b792-5748366eff21"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"os.heat.stack\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(profileTypeList.get(0).getName(), "os.heat.stack");
red_line===
"os.heat.stack"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"3ad6a92c-f969-4d69-8a83-0301f319fc78\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "3ad6a92c-f969-4d69-8a83-0301f319fc78";
red_line===
"3ad6a92c-f969-4d69-8a83-0301f319fc78"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"086a1aa6-c425-4ecd-9612-391a3b1b9375\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(snapshot1.getId(), "086a1aa6-c425-4ecd-9612-391a3b1b9375");
red_line===
"086a1aa6-c425-4ecd-9612-391a3b1b9375"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"2015-09-07T11:50:39.000000\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(snapshot2.getCreatedAt(), "2015-09-07T11:50:39.000000");
red_line===
"2015-09-07T11:50:39.000000"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"bookmark\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(snapshot.getLinks().get(1).getRel(), "bookmark");
red_line===
"bookmark"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"6d221c1d-0200-461e-8d20-24b4776b9ddb\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(snapshot.getId(), "6d221c1d-0200-461e-8d20-24b4776b9ddb");
red_line===
"6d221c1d-0200-461e-8d20-24b4776b9ddb"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ba11930a-bf1a-4aa7-bae4-a8dfbaa3cc73\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareServer.getId(), "ba11930a-bf1a-4aa7-bae4-a8dfbaa3cc73");
red_line===
"ba11930a-bf1a-4aa7-bae4-a8dfbaa3cc73"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ba11930a-bf1a-4aa7-bae4-a8dfbaa3cc73\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareServer.getBackendDetails().get("public_address"), "10.254.0.3");
red_line===
dDetails().get("public_address"), "10.
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make \"ISO8601\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final DateFormat ISO8601 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
red_line===
ISO8601
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"openstack@cmode\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ManilaService.ServiceStatus status = osv3().share().enableService("manila-share", "openstack@cmode");
red_line===
"openstack@cmode"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"manila-share\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(service1.getBinary(), "manila-share");
red_line===
"manila-share"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test_tenant\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
QuotaSet quotaSet = osv3().share().quotaSets().get("test_tenant");
red_line===
"test_tenant"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"manila2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(pool1.getHost(), "manila2");
red_line===
"manila2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"10.0.1.0/24\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(securityService1.getDnsIp(), "10.0.1.0/24");
red_line===
"10.0.1.0/24"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"d401b6b1f81943e8919f2b6819755fb6\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(securityService1.getProjectId(), "d401b6b1f81943e8919f2b6819755fb6");
red_line===
"d401b6b1f81943e8919f2b6819755fb6"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"SecServ2\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(securityService1.getName(), "SecServ2");
red_line===
"SecServ2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my_domain\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(securityService1.getDomain(), "my_domain");
red_line===
"my_domain"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"32e921ed-f399-4e7a-b05b-786f482bd369\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
SecurityService securityService = osv3().share().securityServices().get("32e921ed-f399-4e7a-b05b-786f482bd369");
red_line===
"32e921ed-f399-4e7a-b05b-786f482bd369"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"75559a8b-c90c-42a7-bda2-edbe86acfb7b\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareInstance2.getId(), "75559a8b-c90c-42a7-bda2-edbe86acfb7b");
red_line===
"75559a8b-c90c-42a7-bda2-edbe86acfb7b"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ba11930a-bf1a-4aa7-bae4-a8dfbaa3cc73\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareInstance1.getShareServerId(), "ba11930a-bf1a-4aa7-bae4-a8dfbaa3cc73");
red_line===
"ba11930a-bf1a-4aa7-bae4-a8dfbaa3cc73"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"manila2@generic1#GENERIC1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareInstance1.getHost(), "manila2@generic1#GENERIC1");
red_line===
"manila2@generic1#GENERIC1"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"081f7030-c54f-42f5-98ee-93a37393e0f2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareInstance1.getId(), "081f7030-c54f-42f5-98ee-93a37393e0f2");
red_line===
"081f7030-c54f-42f5-98ee-93a37393e0f2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"713df749-aac0-4a54-af52-10f6c991e80c\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareInstance1.getShareNetworkId(), "713df749-aac0-4a54-af52-10f6c991e80c");
red_line===
"713df749-aac0-4a54-af52-10f6c991e80c"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my_key\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
extraSpecMap.put("my_key", "my_value");
red_line===
"my_key"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"be27425c-f807-4500-a056-d00721db45cf\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareType1.getId(), "be27425c-f807-4500-a056-d00721db45cf");
red_line===
"be27425c-f807-4500-a056-d00721db45cf"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> metadataMap = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> metadataMap = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"project\" 11 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share.getMetadata().get("project"), "my_app");
red_line===
"project"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"vagrant-ubuntu-trusty-64.localdomain@generic1#GENERIC1\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share1.getHost(), "vagrant-ubuntu-trusty-64.localdomain@generic1#GENERIC1");
red_line===
"vagrant-ubuntu-trusty-64.localdomain@generic1#GENERIC1"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"8efb539e-76e3-4e7c-9c6c-c732fb9aa00d\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share1.getShareServerId(), "8efb539e-76e3-4e7c-9c6c-c732fb9aa00d");
red_line===
"8efb539e-76e3-4e7c-9c6c-c732fb9aa00d"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"3d503524-a906-4757-8576-77a2029ff0c4\" 12 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share.getId(), "3d503524-a906-4757-8576-77a2029ff0c4");
red_line===
"3d503524-a906-4757-8576-77a2029ff0c4"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"d401b6b1f81943e8919f2b6819755fb6\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share.getProjectId(), "d401b6b1f81943e8919f2b6819755fb6");
red_line===
"d401b6b1f81943e8919f2b6819755fb6"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"some_host\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ExtService s = osv3().compute().services().enableService("nova-compute", "some_host");
red_line===
"some_host"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"bookmark\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share.getLinks().get(1).getRel(), "bookmark");
red_line===
"bookmark"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"a25b2df3-90bd-4add-afa6-5f0dbbd50452\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(access.getId(), "a25b2df3-90bd-4add-afa6-5f0dbbd50452");
red_line===
"a25b2df3-90bd-4add-afa6-5f0dbbd50452"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"changed_doc\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
metadataMap.put("aim", "changed_doc");
red_line===
"changed_doc"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"new_metadata_key\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
metadataMap.put("new_metadata_key", "new_information");
red_line===
"new_metadata_key"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"2016-02-16T11:03:45.000000\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share.getCreatedAt(), "2016-02-16T11:03:45.000000");
red_line===
"2016-02-16T11:03:45.000000"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"default\" 12 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(share.getShareType(), "default");
red_line===
"default"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String envId = "3e57cee8b55448f6af0752d31d7e27d6";
red_line===
envId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"d401b6b1f81943e8919f2b6819755fb6\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareNetwork.getProjectId(), "d401b6b1f81943e8919f2b6819755fb6");
red_line===
"d401b6b1f81943e8919f2b6819755fb6"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"b1fb4828-93a2-4bbe-b388-7c9ccd69c17a\" 12 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareNetwork.getId(), "b1fb4828-93a2-4bbe-b388-7c9ccd69c17a");
red_line===
"b1fb4828-93a2-4bbe-b388-7c9ccd69c17a"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"2016-02-12T20:40:23.000000\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(shareNetwork.getCreatedAt(), "2016-02-12T20:40:23.000000");
red_line===
"2016-02-12T20:40:23.000000"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"e2d4fce7-4c55-497b-ac4c-290dd202c71a\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "e2d4fce7-4c55-497b-ac4c-290dd202c71a";
red_line===
"e2d4fce7-4c55-497b-ac4c-290dd202c71a"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"fff89eb8-8f9d-49a2-b66c-ad75d9a95287\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(externalSegList.get(0).getId(), "fff89eb8-8f9d-49a2-b66c-ad75d9a95287");
red_line===
"fff89eb8-8f9d-49a2-b66c-ad75d9a95287"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"fff89eb8-8f9d-49a2-b66c-ad75d9a95287\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
ExternalSegment externalSegment = osv2().gbp().externalSegment().create(Builders.externalSegment().ipVersion(4).cidr("172.16.0.0/12").name("extSeg01").description("extSeg01-desc").build());
red_line===
).externalSegment().create(Builders.ex
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"61073812-3994-40c2-96f0-6bff03804e47\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "61073812-3994-40c2-96f0-6bff03804e47";
red_line===
"61073812-3994-40c2-96f0-6bff03804e47"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"1bbc10a8-aeb2-4e53-ab31-a1fed18763f4\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(policyRuleSetList.get(0).getId(), "1bbc10a8-aeb2-4e53-ab31-a1fed18763f4");
red_line===
"1bbc10a8-aeb2-4e53-ab31-a1fed18763f4"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"36e41adb-0b9b-4a11-abd5-66e5386139d4\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(policyClasifierList.get(0).getId(), "36e41adb-0b9b-4a11-abd5-66e5386139d4");
red_line===
"36e41adb-0b9b-4a11-abd5-66e5386139d4"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"0d65eebe-4efe-456e-aec3-7856e4e839b4\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(policytargetList.get(0).getId(), "0d65eebe-4efe-456e-aec3-7856e4e839b4");
red_line===
"0d65eebe-4efe-456e-aec3-7856e4e839b4"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"8d14b663-c67d-4fa7-b23f-0732cb9aa292\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "8d14b663-c67d-4fa7-b23f-0732cb9aa292";
red_line===
"8d14b663-c67d-4fa7-b23f-0732cb9aa292"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"b25bbad7-224b-4810-ae1c-7d10fb4468b5\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(policyActionList.get(0).getId(), "b25bbad7-224b-4810-ae1c-7d10fb4468b5");
red_line===
"b25bbad7-224b-4810-ae1c-7d10fb4468b5"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String deploymentId = "ccfd5e951c70428c852bee3b2a9a132e";
red_line===
deploymentId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"8a45f76f-888b-4f3b-ad00-88c3b0ba9e6d\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(l3policyList.get(0).getId(), "8a45f76f-888b-4f3b-ad00-88c3b0ba9e6d");
red_line===
"8a45f76f-888b-4f3b-ad00-88c3b0ba9e6d"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"08c1c093-6337-4383-938e-2d9c6cac531a\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(l2policyList.get(0).getId(), "08c1c093-6337-4383-938e-2d9c6cac531a");
red_line===
"08c1c093-6337-4383-938e-2d9c6cac531a"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Test2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
NetworkServicePolicy gbpServicePolicy= Builders.networkServicePolicy().name("Test2").build();
red_line===
"Test2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"d98e3cd5-3eb4-41ba-9069-6f5867ceb162\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(gbpServicePolicies.get(0).getId(), "d98e3cd5-3eb4-41ba-9069-6f5867ceb162");
red_line===
"d98e3cd5-3eb4-41ba-9069-6f5867ceb162"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"059909d1-7f20-40cf-a78a-27c340a5aaac\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(policyRuleList.get(0).getId(), "059909d1-7f20-40cf-a78a-27c340a5aaac");
red_line===
"059909d1-7f20-40cf-a78a-27c340a5aaac"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(delete.getCode());
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make \"ISO8601\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final DateFormat ISO8601 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
red_line===
ISO8601
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use another way to initialize this instance.
scn.ruleId===
3599
scn.suspCodeStr===
Map<String, String> metadata = new HashMap<String, String>() {{ put("image_type", "image"); }};
red_line===
{{ put("image_type", "image"); }}
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"server-test-1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Server server = osv3().compute().servers().boot(Builders.server().name("server-test-1").build());
red_line===
"server-test-1"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"server-test-1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals("192.168.0.3", s.getAddresses().getAddresses("private").get(0).getAddr());
red_line===
t(0).getAddr())
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> map = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"721f76f9a9d64ebcacc76189cb8978a9\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "721f76f9a9d64ebcacc76189cb8978a9";
red_line===
"721f76f9a9d64ebcacc76189cb8978a9"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String envId = "e1c1b5a0b3284f188c5d91ab18bf0451";
red_line===
envId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"b8f4006064d24c10a33d9ed68e554f0f\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "b8f4006064d24c10a33d9ed68e554f0f";
red_line===
"b8f4006064d24c10a33d9ed68e554f0f"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String envId = "e1c1b5a0b3284f188c5d91ab18bf0451";
red_line===
envId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String serviceId = "e8d61b75-df6a-42c6-be2c-5b6aeaa60f5c";
red_line===
serviceId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String actionId = "e8d61b75-df6a-42c6-be2c-5b6aeaa60f5c_getTest";
red_line===
actionId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"getTest\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(action.getName(), "getTest");
red_line===
"getTest"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"some_id\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(taskId, "some_id");
red_line===
"some_id"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"{\\\"task_id\\\": \\\"some_id\\\"}\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
respondWith(200, "{\"task_id\": \"some_id\"}");
red_line===
"{\"task_id\": \"some_id\"}"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String envId = "e1c1b5a0b3284f188c5d91ab18bf0451";
red_line===
envId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String sessionId = "c2e2b5a0b3284f188c5d91ab18bf8754";
red_line===
sessionId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
return new String(ByteStreams.toByteArray(is));
red_line===
String
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"54c91755526e44b9808385a263db4aa6\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String databaseInstanceId = "54c91755526e44b9808385a263db4aa6";
red_line===
"54c91755526e44b9808385a263db4aa6"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"54c91755526e44b9808385a263db4aa6\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String databaseInstanceId = "54c91755526e44b9808385a263db4aa6";
red_line===
"54c91755526e44b9808385a263db4aa6"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"648d260d-c346-4145-8a2d-bbd4d78aedf6\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String datastoreId = "648d260d-c346-4145-8a2d-bbd4d78aedf6";
red_line===
"648d260d-c346-4145-8a2d-bbd4d78aedf6"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my_trigger\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(trigger.getName(), "my_trigger");
red_line===
"my_trigger"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"* * * * *\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(trigger.getPattern(), "* * * * *");
red_line===
"* * * * *"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"param1\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(trigger.getWorkflowInput().get("param1"), "val1");
red_line===
"param1"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"param2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(trigger.getWorkflowInput().get("param2"), "val2");
red_line===
"param2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my_wf\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(trigger.getWorkflowName(), "my_wf");
red_line===
"my_wf"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my_env\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(env.getName(), "my_env");
red_line===
"my_env"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"\u003cdefault-project\u003e\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(env.getProjectId(), "<default-project>");
red_line===
"<default-project>"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"This is my test environment\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(env.getDescription(), "This is my test environment");
red_line===
"This is my test environment"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"parallel_join_2\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(wfExec.getWorkflowName(), "parallel_join_2");
red_line===
"parallel_join_2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my_var\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(taskExec.getPublished().get("my_var"), "my_val");
red_line===
"my_var"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"parallel_join_2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(taskExec.getWorkflowName(), "parallel_join_2");
red_line===
"parallel_join_2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my task result\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(taskExec.getResult(), "my task result");
red_line===
"my task result"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"retry_cnt\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(taskExec.getRuntimeContext().get("retry_cnt"), 1);
red_line===
"retry_cnt"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"task_1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionExec.getTaskName(), "task_1");
red_line===
"task_1"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"std.noop\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionExec.getName(), "std.noop");
red_line===
"std.noop"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"c40c26cb-f695-4f20-8455-c57ca5c0770a\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionExec.getTaskExecutionId(), "c40c26cb-f695-4f20-8455-c57ca5c0770a");
red_line===
"c40c26cb-f695-4f20-8455-c57ca5c0770a"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"result\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertNull(actionExec.getOutput().get("result"));
red_line===
"result"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"parallel_join_2\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionExec.getWorkflowName(), "parallel_join_2");
red_line===
"parallel_join_2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String secretId = "520405bc-c7c5-41ea-97ad-6c67a8d41a9e";
red_line===
secretId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"param1\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionExec.getInput().get("param1"), "val1");
red_line===
"param1"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"concat\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionDef.getName(), "concat");
red_line===
"concat"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"s1, s2\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionDef.getInput(), "s1, s2");
red_line===
"s1, s2"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"base: std.echo\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(actionDef.getDefinition().contains("base: std.echo"));
red_line===
"base: std.echo"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"custom\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(actionDef.getTags().get(1), "custom");
red_line===
"custom"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"private\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(wfDef.getTags().get(1), "private");
red_line===
"private"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my_wb\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(wbDef.getName(), "my_wb");
red_line===
"my_wb"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"with-items: i in \u003c% range(0, 40) %\u003e\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(wbDef.getDefinition().contains("with-items: i in <% range(0, 40) %>"));
red_line===
"with-items: i in <% range(0, 40) %>"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"private\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(wbDef.getTags().get(1), "private");
red_line===
"private"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test-vnf\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(vnfs.get(0).getName(), "test-vnf");
red_line===
"test-vnf"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test-vnfd\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(vnfds.get(0).getName(), "test-vnfd");
red_line===
"test-vnfd"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"vim\".
scn.ruleId===
1854
scn.suspCodeStr===
vim = osv3().tacker().vim().register(vim);
red_line===
= osv3().tacker().vim().register(vim)
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("THROWING EXCEPTIONNNNNNNNN");
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"admin\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
VimProject vimProject = VimProject.create().name("admin").projectDomainName("default");
red_line===
"admin"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test-vim\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(vims.get(0).getName(), "test-vim");
red_line===
"test-vim"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"content_type\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final String content_type = "application/octet-stream";
red_line===
content_type
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String secretName = "test_secret";
red_line===
secretName
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String containerId = "eecf6cad-65af-4a11-9e6f-692b23ffac08";
red_line===
containerId
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String containerName = "test_container";
red_line===
containerName
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"JSON_CLUSTER_CREATE_REQUEST\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String JSON_CLUSTER_CREATE_REQUEST = "/sahara/cluster_create_req.json";
red_line===
JSON_CLUSTER_CREATE_REQUEST
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> headers = new HashMap<String,String>();
red_line===
<String,String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
uri = new URI("file:////test.iso");
red_line===
"file:////test.iso"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"IMAGE_UPDATE_JSON\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String IMAGE_UPDATE_JSON = "/image/v2/image-update.json";
red_line===
IMAGE_UPDATE_JSON
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"66cabdfb14bd48d48402f7464bda7733\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
String memberId = "66cabdfb14bd48d48402f7464bda7733";
red_line===
"66cabdfb14bd48d48402f7464bda7733"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"8a2ea42d-06b5-42c2-a54d-97105420f2bb\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
String id = "8a2ea42d-06b5-42c2-a54d-97105420f2bb";
red_line===
"8a2ea42d-06b5-42c2-a54d-97105420f2bb"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"4b434528-032b-4467-946c-b5880ce15c06\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
String imageId = "4b434528-032b-4467-946c-b5880ce15c06";
red_line===
"4b434528-032b-4467-946c-b5880ce15c06"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Invoke method(s) only conditionally.
scn.ruleId===
2629
scn.suspCodeStr===
Logger.getLogger(getClass().getName()).warning(message.toString());
red_line===
message.toString()
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new Exception("Alarm test failed by max");
red_line===
Exception
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("METER LISTING TEST");
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"JSON_UPLOAD_ARTIFACT\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String JSON_UPLOAD_ARTIFACT = "/artifact/tosca_templates_upload_artifact.json";
red_line===
JSON_UPLOAD_ARTIFACT
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"active\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(toscaTemplatesArtifact.getStatus(), "active");
red_line===
"active"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027ARTIFACT_ID\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
ToscaTemplatesArtifact toscaTemplatesArtifact = osv3().artifact().toscaTemplatesArtifact().update("b8f88696-80e7-4f89-abbc-1975991ba879",updates);
red_line===
"b8f88696-80e7-4f89-abbc-1975991ba879"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"private\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(toscaTemplatesArtifact.getVisibility(), "private");
red_line===
"private"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"sample\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
builder.name("sample");
red_line===
"sample"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"resource\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Map<String, Object> metadata = osv3().heat().resources().getMetadata("name", "id", "resource");
red_line===
"resource"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final Logger LOG = LoggerFactory.getLogger(getClass().getName());
red_line===
LOG
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
e.printStackTrace();
red_line===
rac
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
t.printStackTrace();
red_line===
rac
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
respondWith(headers, statusCode, new String(ByteStreams.toByteArray(is)));
red_line===
String
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
respondWith(headers, statusCode, new String(ByteStreams.toByteArray(is)));
red_line===
String
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String json = new String(Streams.readAll(getClass().getResourceAsStream(JSON_ACCESS)));
red_line===
String
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String json = new String(Streams.readAll(getClass().getResourceAsStream(JSON_TOKEN)));
red_line===
String
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
return new String(ByteStreams.toByteArray(is));
red_line===
String
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> headers = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> headers = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> headers = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"application/json\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.put("Content-Type", "application/json");
red_line===
"application/json"
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
unknownTypes = new HashMap();
red_line===
HashMap
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> headers = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HttpCommand<R> command = new HttpCommand<R>(request);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
pe.printStackTrace(System.err);
red_line===
System.err
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> retHeaders = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This accessibility update should be removed.
scn.ruleId===
3011
scn.suspCodeStr===
methodField.setAccessible(true);
red_line===
methodField.setAccessible(true)
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This accessibility bypass should be removed.
scn.ruleId===
3011
scn.suspCodeStr===
methodField.set(httpURLConnection, method);
red_line===
methodField.set(httpURLConnection, method)
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HttpCommand<R> command = new HttpCommand<R>(request);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"INTERCEPTOR\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static HttpClientConfigInterceptor INTERCEPTOR;
red_line===
INTERCEPTOR
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> retHeaders = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HttpCommand<R> command = new HttpCommand<R>(request);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> retHeaders = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HttpCommand<R> command = new HttpCommand<R>(request);
red_line===
<R>
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
