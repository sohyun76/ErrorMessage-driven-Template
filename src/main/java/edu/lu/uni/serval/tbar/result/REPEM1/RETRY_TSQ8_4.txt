RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"prefix\".
scn.ruleId===
3010
scn.suspCodeStr===
prefix = dataSource.getPrefix();
red_line===
prefix
start_offset===
8
end_offset===
14
Python OUTPUT===
 prefix Source.getPrefix(); 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove this \"break\" statement or make it conditional.
scn.ruleId===
1751
scn.suspCodeStr===
break;
red_line===
break
start_offset===
16
end_offset===
21
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"break\" statement or make it conditional.
scn.ruleId===
1751
scn.suspCodeStr===
e.printStackTrace();
red_line===
intSt
start_offset===
16
end_offset===
21
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"break\" statement or make it conditional.
scn.ruleId===
1751
scn.suspCodeStr===
e.printStackTrace();
red_line===
intSt
start_offset===
16
end_offset===
21
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final HashMap<String, MatchRule> action_types = parameters.getActionTypes();
red_line===
action_types
start_offset===
41
end_offset===
53
Python OUTPUT===
 final HashMap<String, MatchRule> action_types = parameters.getActionTypes(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"prefix\".
scn.ruleId===
3010
scn.suspCodeStr===
prefix = this.dataSource.getPrefix();
red_line===
prefix
start_offset===
8
end_offset===
14
Python OUTPUT===
 prefix .dataSource.getPrefix(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
database = null;
red_line===
database
start_offset===
12
end_offset===
20
Python OUTPUT===
final database = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" INNER JOIN \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
sql += " INNER JOIN " + prefix + "players p ON p.player_id = d.player_id ";
red_line===
" INNER JOIN "
start_offset===
15
end_offset===
29
Python OUTPUT===
 sql += " INNER JOIN " + prefix + "players p ON p.player_id = d.player_id "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v1_to_v2();
red_line===
v1_to_v2
start_offset===
9
end_offset===
17
Python OUTPUT===
 void v1_to_v2(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v2_to_v3();
red_line===
v2_to_v3
start_offset===
9
end_offset===
17
Python OUTPUT===
 void v2_to_v3(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v3_to_v4();
red_line===
v3_to_v4
start_offset===
9
end_offset===
17
Python OUTPUT===
 void v3_to_v4(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v4_to_v5();
red_line===
v4_to_v5
start_offset===
9
end_offset===
17
Python OUTPUT===
 void v4_to_v5(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v5_to_v6();
red_line===
v5_to_v6
start_offset===
9
end_offset===
17
Python OUTPUT===
 void v5_to_v6(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v6_to_v7();
red_line===
v6_to_v7
start_offset===
9
end_offset===
17
Python OUTPUT===
 void v6_to_v7(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"password\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
section.addDefault("password", "");
red_line===
"password"
start_offset===
27
end_offset===
37
Python OUTPUT===
 section.addDefault("password", ""); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
OutputStream out = new FileOutputStream(propFile);
red_line===
new FileOutputStream(propFile)
start_offset===
35
end_offset===
65
Python OUTPUT===
 OutputStream out = new FileOutputStream(propFile); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
15
end_offset===
17
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
15
end_offset===
17
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
15
end_offset===
17
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
15
end_offset===
17
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"mysql\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
String dataSource = configuration.getString("datasource", "mysql");
red_line===
"mysql"
start_offset===
66
end_offset===
73
Python OUTPUT===
 String dataSource = configuration.getString("datasource", "mysql"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
void createBatch() throws Exception;
red_line===
Exception
start_offset===
30
end_offset===
39
Python OUTPUT===
 void createBatch() throws Exception; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
boolean addInsertionToBatch(Handler a) throws Exception;
red_line===
Exception
start_offset===
50
end_offset===
59
Python OUTPUT===
 boolean addInsertionToBatch(Handler a) throws Exception; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
void processBatch() throws Exception;
red_line===
Exception
start_offset===
31
end_offset===
40
Python OUTPUT===
 void processBatch() throws Exception; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
long period = 24 * 60 * 60;
red_line===
*
start_offset===
30
end_offset===
31
Python OUTPUT===
 long period = 24 * 60 * 60;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make \"date\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final SimpleDateFormat date = new SimpleDateFormat("yy/MM/dd");
red_line===
date
start_offset===
42
end_offset===
46
Python OUTPUT===
private static final SimpleDateFormat date = new SimpleDateFormat ( " yy/MM/dd " ) ;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make \"time\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final SimpleDateFormat time = new SimpleDateFormat("hh:mm:ssa");
red_line===
time
start_offset===
42
end_offset===
46
Python OUTPUT===
private static final SimpleDateFormat time = new SimpleDateFormat ( " hh:mm:ssa " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make direction a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String direction;
red_line===
direction
start_offset===
22
end_offset===
31
Python OUTPUT===
public static final String direction ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
protected String var = null;
red_line===
var
start_offset===
21
end_offset===
24
Python OUTPUT===
 protected String var = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
protected String var = null;
red_line===
var
start_offset===
21
end_offset===
24
Python OUTPUT===
 protected String var = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
e.printStackTrace();
red_line===
ack
start_offset===
21
end_offset===
24
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract the assignment out of this expression.
scn.ruleId===
1121
scn.suspCodeStr===
return (factory = new EntitySerializerFactory());
red_line===
=
start_offset===
24
end_offset===
25
Python OUTPUT===
 return (factory = new EntitySerializerFactory()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make params a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String params = "";
red_line===
params
start_offset===
22
end_offset===
28
Python OUTPUT===
public static final String params = " " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make processType a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String processType;
red_line===
processType
start_offset===
22
end_offset===
33
Python OUTPUT===
public static final String processType ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lines a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] lines;
red_line===
lines
start_offset===
24
end_offset===
29
Python OUTPUT===
public static final String [ ] lines ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make signType a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String signType;
red_line===
signType
start_offset===
22
end_offset===
30
Python OUTPUT===
public static final String signType ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make facing a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public BlockFace facing;
red_line===
facing
start_offset===
25
end_offset===
31
Python OUTPUT===
public static final BlockFace facing ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int thresholdMax = 100;
red_line===
thresholdMax
start_offset===
22
end_offset===
34
Python OUTPUT===
private static final int thresholdMax = 100 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
15
end_offset===
19
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"audience\".
scn.ruleId===
1854
scn.suspCodeStr===
final Audience audience = Prism.getAudiences().player(call.getPlayer());
red_line===
= Prism.getAudiences().player(call.getPlayer())
start_offset===
32
end_offset===
79
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
parameters.setLimit(5);
red_line===
            parameters.setLimit(5); // @todo config this, and move the logic
start_offset===
0
end_offset===
76
Python OUTPUT===
 parameters.setLimit(5); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
15
end_offset===
19
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
assert (parameters.getProcessType() == PrismProcessType.ROLLBACK);
red_line===
                        assert (parameters.getProcessType() == PrismProcessType.ROLLBACK); //todo remove debug
start_offset===
0
end_offset===
110
Python OUTPUT===
 assert (parameters.getProcessType() == PrismProcessType.ROLLBACK); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
assert (parameters.getProcessType() == PrismProcessType.RESTORE);
red_line===
                        assert (parameters.getProcessType() == PrismProcessType.RESTORE);//todo remove debug
start_offset===
0
end_offset===
108
Python OUTPUT===
 assert (parameters.getProcessType() == PrismProcessType.RESTORE); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"restore\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
secondaries.add("restore");
red_line===
"restore"
start_offset===
24
end_offset===
33
Python OUTPUT===
 secondaries.add("restore"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
23
end_offset===
27
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"prism.help\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
addSub(new String[]{"about", "default"}, "prism.help").allowConsole().setHandler(new AboutCommand(prism));
red_line===
"prism.help"
start_offset===
49
end_offset===
61
Python OUTPUT===
 addSub(new String[]{"about", "default"}, "prism.help").allowConsole().setHandler(new AboutCommand(prism)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
15
end_offset===
19
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
23
end_offset===
27
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)");
red_line===
_tmp
start_offset===
23
end_offset===
27
Python OUTPUT===
 final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)");
red_line===
_tmp
start_offset===
23
end_offset===
27
Python OUTPUT===
 final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
e.printStackTrace();
red_line===
kTra
start_offset===
23
end_offset===
27
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
e.printStackTrace();
red_line===
Stac
start_offset===
23
end_offset===
27
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
actionsPerInsert = plugin.getConfig().getInt("prism.database.actions-per-insert-batch");
red_line===
actionsPerInsert
start_offset===
8
end_offset===
24
Python OUTPUT===
 actionsin.getConfig().getInt("prism.database.actions-per-insert-batch"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
e.printStackTrace();
red_line===
        e.printS
start_offset===
8
end_offset===
24
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
e.printStackTrace();
red_line===
        e.printS
start_offset===
8
end_offset===
24
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
final PrismBlockEvents be = new PrismBlockEvents(plugin);
red_line===
        final PrismBlockEvents be = new PrismBlockEvents(plugin); //todo is this necessary?
start_offset===
0
end_offset===
91
Python OUTPUT===
 final PrismBlockEvents be = new PrismBlockEvents(plugin); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final ArrayList<Block> falling_blocks = Utilities.findFallingBlocksAboveBlock(block);
red_line===
falling_blocks
start_offset===
31
end_offset===
45
Python OUTPUT===
 final ArrayList<Block> falling_blocks = Utilities.findFallingBlocksAboveBlock(block); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"entity-explode\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String action = "entity-explode";
red_line===
"entity-explode"
start_offset===
24
end_offset===
40
Python OUTPUT===
 String action = "entity-explode"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int blockChangesRead = 0;
red_line===
blockChangesRead
start_offset===
16
end_offset===
32
Python OUTPUT===
 private int blo0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
16
end_offset===
32
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
16
end_offset===
32
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
16
end_offset===
32
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
16
end_offset===
32
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
16
end_offset===
32
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
16
end_offset===
32
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Loaded player \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.debug("Loaded player " + name + ", id: " + uuid + " into the cache.");
red_line===
"Loaded player "
start_offset===
24
end_offset===
40
Python OUTPUT===
 Prism.debug("Loaded player " + name + ", id: " + uuid + " into the cache."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
deathWeapon = deathWeapon.replaceAll("_", " ");
red_line===
replaceAll
start_offset===
38
end_offset===
48
Python OUTPUT===
deathWeapon = deathWeapon.replaceAll ( " _ " , " " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"itemAliases\" which hides the field declared at line 33.
scn.ruleId===
1117
scn.suspCodeStr===
Map<String, Object> itemAliases = null;
red_line===
itemAliases
start_offset===
32
end_offset===
43
Python OUTPUT===
 Map<String, Object> itemAliases = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"skeleton\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return "skeleton";
red_line===
"skeleton"
start_offset===
19
end_offset===
29
Python OUTPUT===
 return "skeleton"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this alternation with a character class.
scn.ruleId===
6035
scn.suspCodeStr===
final Pattern p = Pattern.compile("([0-9]+)(s|h|m|d|w)");
red_line===
s|h|m|d|w
start_offset===
52
end_offset===
61
Python OUTPUT===
 final Pattern p = Pattern.compile("([0-9]+)(s|h|m|d|w)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make second a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int second;
red_line===
second
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int second ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
19
end_offset===
23
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String defaultSubCommand = "default";
red_line===
defaultSubCommand
start_offset===
25
end_offset===
42
Python OUTPUT===
private static final default String defaultSubCommand = " " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"examplecommand \u003calert\u003e\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
config.addDefault("prism.alerts.ores.log-commands", Collections.singletonList("examplecommand <alert>"));
red_line===
"examplecommand <alert>"
start_offset===
86
end_offset===
110
Python OUTPUT===
 config.addDefault("prism.alerts.ores.log-commands", Collections.singletonList("examplecommand <alert>")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make deleteTask a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public BukkitTask deleteTask;
red_line===
deleteTask
start_offset===
22
end_offset===
32
Python OUTPUT===
public static final BukkitTask delete Task ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Correct one of the identical sub-expressions on both sides of operator \"\u0026\u0026\"
scn.ruleId===
1764
scn.suspCodeStr===
return disableDripReporterHook() && disableDripReporterHook();
red_line===
disableDripReporterHook()
start_offset===
44
end_offset===
69
Python OUTPUT===
\u0026\u0026 && disableDripReporterHook ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make monitor a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static DripReporterApi monitor = null;
red_line===
monitor
start_offset===
34
end_offset===
41
Python OUTPUT===
public static final DripReporterApi monitor = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make worldEditPlugin a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static WorldEditPlugin worldEditPlugin = null;
red_line===
worldEditPlugin
start_offset===
34
end_offset===
49
Python OUTPUT===
public static final WorldEditPlugin worldEditPlugin = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static final HashMap<String, Integer> prismWorlds = new HashMap<>();
red_line===
prismWorlds
start_offset===
49
end_offset===
60
Python OUTPUT===
protected static final HashMap < String , Integer > prismWorlds = new HashMap < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static HashMap<String, Integer> prismActions = new HashMap<>();
red_line===
prismActions
start_offset===
43
end_offset===
55
Python OUTPUT===
protected static HashMap < String , Integer > prismActions = new HashMap < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make prismActions a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static HashMap<String, Integer> prismActions = new HashMap<>();
red_line===
prismActions
start_offset===
43
end_offset===
55
Python OUTPUT===
public static final HashMap < String , Integer > prismActions = new HashMap < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
items = new MaterialAliases();
red_line===
items
start_offset===
8
end_offset===
13
Python OUTPUT===
final items = new MaterialAliases ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make oreMonitor a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public OreMonitor oreMonitor;
red_line===
oreMonitor
start_offset===
22
end_offset===
32
Python OUTPUT===
public static final OreMonitor or eMonitor ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make name a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String name;
red_line===
name
start_offset===
22
end_offset===
26
Python OUTPUT===
public static final String name ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make owner a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String owner;
red_line===
owner
start_offset===
22
end_offset===
27
Python OUTPUT===
public static final String owner ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.enchs = enchs;
red_line===
enchs
start_offset===
23
end_offset===
28
Python OUTPUT===
final actionData . enchs = enchs ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.enchs = enchs;
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.enchs = enchs; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.enchs = enchs;
red_line===
enchs
start_offset===
31
end_offset===
36
Python OUTPUT===
final actionData . enchs = enchs ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.enchs = enchs;
red_line===
actionData
start_offset===
20
end_offset===
30
Python OUTPUT===
 actionData.enchs = enchs; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.name = meta.getDisplayName();
red_line===
name
start_offset===
23
end_offset===
27
Python OUTPUT===
final actionData . name = meta . getDisplayName ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.effectColors = effectColors;
red_line===
effectColors
start_offset===
31
end_offset===
43
Python OUTPUT===
final actionData . effectColors = effectColors ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.effectColors = effectColors;
red_line===
actionData
start_offset===
20
end_offset===
30
Python OUTPUT===
 actionData.effectColors = effectColors; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
effect.withColor(Color.fromRGB(actionData.effectColors[i]));
red_line===
actionData
start_offset===
43
end_offset===
53
Python OUTPUT===
 effect.withColor(Color.fromRGB(actionData.effectColors[i])); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
bookMeta.setAuthor(actionData.by);
red_line===
actionData
start_offset===
31
end_offset===
41
Python OUTPUT===
 bookMeta.setAuthor(actionData.by); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.name = meta.getDisplayName();
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.name = meta.getDisplayName(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
meta.setDisplayName(actionData.name);
red_line===
actionData
start_offset===
36
end_offset===
46
Python OUTPUT===
 meta.setDisplayName(actionData.name); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
lam.setColor(Color.fromRGB(actionData.color));
red_line===
actionData
start_offset===
39
end_offset===
49
Python OUTPUT===
 lam.setColor(Color.fromRGB(actionData.color)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.owner = Objects.requireNonNull(skull.getOwningPlayer()).getUniqueId().toString();
red_line===
owner
start_offset===
27
end_offset===
32
Python OUTPUT===
final actionData . owner = Objects . requireNonNull ( skull . getOwningPlayer ( ) ) . getUniqueId ( ) . toString ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.owner = Objects.requireNonNull(skull.getOwningPlayer()).getUniqueId().toString();
red_line===
actionData
start_offset===
16
end_offset===
26
Python OUTPUT===
 actionData.owner = Objects.requireNonNull(skull.getOwningPlayer()).getUniqueId().toString(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
skull.setOwningPlayer(Bukkit.getOfflinePlayer(EntityUtils.uuidOf(actionData.owner)));
red_line===
actionData
start_offset===
77
end_offset===
87
Python OUTPUT===
 skull.setOwningPlayer(Bukkit.getOfflinePlayer(EntityUtils.uuidOf(actionData.owner))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"worldChangeQueueTaskId\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int worldChangeQueueTaskId;
red_line===
worldChangeQueueTaskId
start_offset===
16
end_offset===
38
Python OUTPUT===
 private int wor
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Database Error:\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.debug("Database Error:" + e.getMessage());
red_line===
"Database Error:"
start_offset===
24
end_offset===
41
Python OUTPUT===
 Prism.debug("Database Error:" + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ALTER TABLE `\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
query = "ALTER TABLE `" + prefix + "data_extra` DROP FOREIGN KEY `" + prefix + "data_extra_ibfk_1`;";
red_line===
"ALTER TABLE `"
start_offset===
20
end_offset===
35
Python OUTPUT===
 query = "ALTER TABLE `" + prefix + "data_extra` DROP FOREIGN KEY `" + prefix + "data_extra_ibfk_1`;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ALTER TABLE `\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
teUpdate(query)
start_offset===
20
end_offset===
35
Python OUTPUT===
 st.executeUpdate(query); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String automap = "INSERT INTO <prefix>id_map(material, state) VALUES (?, ?);";
red_line===
automap
start_offset===
32
end_offset===
39
Python OUTPUT===
 private static final String automap = "INSERT INTO <prefix>id_map(material, state) VALUES (?, ?);"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String unauto = "ALTER TABLE <prefix>id_map AUTO_INCREMENT=?;";
red_line===
unauto
start_offset===
32
end_offset===
38
Python OUTPUT===
 private static final String unauto = "ALTER TABLE <prefix>id_map AUTO_INCREMENT=?;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String toAllIds = "SELECT block_id, block_subid FROM <prefix>id_map WHERE material=?;";
red_line===
toAllIds
start_offset===
32
end_offset===
40
Python OUTPUT===
 private static final String toAllIds = "SELECT block_id, block_subid FROM <prefix>id_map WHERE material=?;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Database connection error: \" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.warn("Database connection error: ", e);
red_line===
"Database connection error: "
start_offset===
23
end_offset===
52
Python OUTPUT===
 Prism.warn("Database connection error: ", e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Material cannot be null\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
Validate.notNull(material, "Material cannot be null");
red_line===
"Material cannot be null"
start_offset===
35
end_offset===
60
Python OUTPUT===
 Validate.notNull(material, "Material cannot be null"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"\u003cprefix\u003e\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
String query = toMat.replace("<prefix>", prefix);
red_line===
"<prefix>"
start_offset===
37
end_offset===
47
Python OUTPUT===
 String query = toMat.replace("<prefix>", prefix); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String repair = "UPDATE <prefix>id_map SET block_id=?, block_subid=? WHERE block_id=?;";
red_line===
repair
start_offset===
32
end_offset===
38
Python OUTPUT===
 private static final String repair = "UPDATE <prefix>id_map SET block_id=?, block_subid=? WHERE block_id=?;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Success callback cannot be null\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Validate.notNull(success, "Success callback cannot be null");
red_line===
"Success callback cannot be null"
start_offset===
34
end_offset===
67
Python OUTPUT===
 Validate.notNull(success, "Success callback cannot be null"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"State cannot be null\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Validate.notNull(state, "State cannot be null");
red_line===
"State cannot be null"
start_offset===
32
end_offset===
54
Python OUTPUT===
 Validate.notNull(state, "State cannot be null"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Remove this \"break\" statement or make it conditional.
scn.ruleId===
1751
scn.suspCodeStr===
break;
red_line===
break
start_offset===
12
end_offset===
17
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
private boolean paused;
red_line===
when set the datasource will not allow insertions;
start_offset===
30
end_offset===
80
Python OUTPUT===
 private boolean paused; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
database = null;
red_line===
database
start_offset===
8
end_offset===
16
Python OUTPUT===
final database = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
    st.e
start_offset===
8
end_offset===
16
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
    st.e
start_offset===
8
end_offset===
16
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
    st.e
start_offset===
8
end_offset===
16
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
e.printStackTrace();
red_line===
    e.pr
start_offset===
8
end_offset===
16
Python OUTPUT===
final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Loaded \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.debug("Loaded " + rs.getString(2) + ", id:" + rs.getInt(1));
red_line===
"Loaded "
start_offset===
28
end_offset===
37
Python OUTPUT===
 Prism.debug("Loaded " + rs.getString(2) + ", id:" + rs.getInt(1)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v7_to_v8();
red_line===
v7_to_v8
start_offset===
9
end_offset===
17
Python OUTPUT===
 void v7_to_v8(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"username\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
section.addDefault("username", "root");
red_line===
"username"
start_offset===
27
end_offset===
37
Python OUTPUT===
 section.addDefault("username", "root"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
15
end_offset===
17
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
return this.actionData.type != null ? this.actionData.type : "unknown";
red_line===
this.actionData
start_offset===
46
end_offset===
61
Python OUTPUT===
 return this.actionData.type != null ? this.actionData.type : "unknown"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
this.actionData.type = hanging.getType().name().toLowerCase();
red_line===
type
start_offset===
28
end_offset===
32
Python OUTPUT===
final this . actionData . type = hanging . getType ( ) . name ( ) . toLowerCase ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
this.actionData.type = hanging.getType().name().toLowerCase();
red_line===
this.actionData
start_offset===
12
end_offset===
27
Python OUTPUT===
 this.actionData.type = hanging.getType().name().toLowerCase(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
return actionData.type;
red_line===
actionData
start_offset===
15
end_offset===
25
Python OUTPUT===
 return actionData.type; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make type a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String type;
red_line===
type
start_offset===
22
end_offset===
26
Python OUTPUT===
public static final String type ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make art a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String art;
red_line===
art
start_offset===
22
end_offset===
25
Python OUTPUT===
public static final String art ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
this.actionData.direction = hanging.getAttachedFace().name().toLowerCase();
red_line===
direction
start_offset===
28
end_offset===
37
Python OUTPUT===
final this . actionData . direction = hanging . getAttachedFace ( ) . name ( ) . toLowerCase ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
return BlockFace.valueOf(actionData.direction.toUpperCase());
red_line===
actionData
start_offset===
37
end_offset===
47
Python OUTPUT===
 return BlockFace.valueOf(actionData.direction.toUpperCase()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
this.actionData.direction = hanging.getAttachedFace().name().toLowerCase();
red_line===
this.actionData
start_offset===
12
end_offset===
27
Python OUTPUT===
 this.actionData.direction = hanging.getAttachedFace().name().toLowerCase(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make potionType a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String potionType;
red_line===
potionType
start_offset===
22
end_offset===
32
Python OUTPUT===
public static final String potionType ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make color a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int color;
red_line===
color
start_offset===
19
end_offset===
24
Python OUTPUT===
public static final int color ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make bannerMeta a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Map<String, String> bannerMeta;
red_line===
bannerMeta
start_offset===
35
end_offset===
45
Python OUTPUT===
public static final Map < String , String > bannerMeta ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.potionType = potion.getBasePotionData().getType().toString().toLowerCase();
red_line===
potionType
start_offset===
23
end_offset===
33
Python OUTPUT===
final actionData . potionType = potion . getBasePotionData ( ) . getType ( ) . toString ( ) . toLowerCase ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.potionType = potion.getBasePotionData().getType().toString().toLowerCase();
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.potionType = potion.getBasePotionData().getType().toString().toLowerCase(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
final PotionType potionType = PotionType.valueOf(actionData.potionType.toUpperCase());
red_line===
actionData
start_offset===
61
end_offset===
71
Python OUTPUT===
 final PotionType potionType = PotionType.valueOf(actionData.potionType.toUpperCase()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"item\" which hides the field declared at line 57.
scn.ruleId===
1117
scn.suspCodeStr===
ItemStack item = getItem().clone();
red_line===
item
start_offset===
38
end_offset===
42
Python OUTPUT===
 ItemStack item = getItem().clone(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make enchs a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] enchs;
red_line===
enchs
start_offset===
24
end_offset===
29
Python OUTPUT===
public static final String [ ] enchs ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make title a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String title;
red_line===
title
start_offset===
22
end_offset===
27
Python OUTPUT===
public static final String title ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make content a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] content;
red_line===
content
start_offset===
24
end_offset===
31
Python OUTPUT===
public static final String [ ] content ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make effectColors a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int[] effectColors;
red_line===
effectColors
start_offset===
21
end_offset===
33
Python OUTPUT===
public static final int [ ] effectColors ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make fadeColors a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int[] fadeColors;
red_line===
fadeColors
start_offset===
21
end_offset===
31
Python OUTPUT===
public static final int [ ] fadeColors ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make hasFlicker a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean hasFlicker;
red_line===
hasFlicker
start_offset===
23
end_offset===
33
Python OUTPUT===
public static final boolean hasFlicker ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"item\" which hides the field declared at line 57.
scn.ruleId===
1117
scn.suspCodeStr===
ItemStack item = getItem().clone();
red_line===
item
start_offset===
38
end_offset===
42
Python OUTPUT===
 ItemStack item = getItem().clone(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make amt a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int amt;
red_line===
amt
start_offset===
19
end_offset===
22
Python OUTPUT===
public static final int amt ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lore a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] lore;
red_line===
lore
start_offset===
24
end_offset===
28
Python OUTPUT===
public static final String [ ] lore ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make slot a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String slot = "-1";
red_line===
slot
start_offset===
22
end_offset===
26
Python OUTPUT===
public static final String slot = " -1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make hasTrail a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean hasTrail;
red_line===
hasTrail
start_offset===
23
end_offset===
31
Python OUTPUT===
public static final boolean hasTrail ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make durability a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public short durability = 0;
red_line===
durability
start_offset===
21
end_offset===
31
Python OUTPUT===
public static final short durability = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make potionExtended a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean potionExtended;
red_line===
potionExtended
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final boolean potionExtended ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make potionUpgraded a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean potionUpgraded;
red_line===
potionUpgraded
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final boolean potionUpgraded ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.color = lam.getColor().asRGB();
red_line===
color
start_offset===
23
end_offset===
28
Python OUTPUT===
final actionData . color = lam . getColor ( ) . asRGB ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.color = lam.getColor().asRGB();
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.color = lam.getColor().asRGB(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
item = new ItemStack(getMaterial(), actionData.amt);
red_line===
actionData
start_offset===
44
end_offset===
54
Python OUTPUT===
 item = new ItemStack(getMaterial(), actionData.amt); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
name = actionData.amt + " " + fullItemName;
red_line===
actionData
start_offset===
19
end_offset===
29
Python OUTPUT===
 name = actionData.amt + " " + fullItemName; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make by a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String by;
red_line===
by
start_offset===
22
end_offset===
24
Python OUTPUT===
public static final String by ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.by = bookMeta.getAuthor();
red_line===
by
start_offset===
23
end_offset===
25
Python OUTPUT===
final actionData . by = bookMeta . getAuthor ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.by = bookMeta.getAuthor();
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.by = bookMeta.getAuthor(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
return actionData.durability;
red_line===
actionData
start_offset===
19
end_offset===
29
Python OUTPUT===
 return actionData.durability; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.durability = durability;
red_line===
durability
start_offset===
23
end_offset===
33
Python OUTPUT===
final actionData . durability = durability ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.durability = durability;
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.durability = durability; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.durability = (short) ItemUtils.getItemDamage(item);
red_line===
durability
start_offset===
19
end_offset===
29
Python OUTPUT===
final actionData . durability = ( short ) ItemUtils . getItemDamage ( item ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.durability = (short) ItemUtils.getItemDamage(item);
red_line===
actionData
start_offset===
8
end_offset===
18
Python OUTPUT===
 actionData.durability = (short) ItemUtils.getItemDamage(item); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.durability = tempDurability;
red_line===
durability
start_offset===
23
end_offset===
33
Python OUTPUT===
final actionData . durability = tempDurability ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.durability = tempDurability;
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.durability = tempDurability; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
ItemUtils.setItemDamage(item, actionData.durability);
red_line===
actionData
start_offset===
38
end_offset===
48
Python OUTPUT===
 ItemUtils.setItemDamage(item, actionData.durability); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.amt = quantity;
red_line===
amt
start_offset===
19
end_offset===
22
Python OUTPUT===
final actionData . amt = quantity ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.amt = quantity;
red_line===
actionData
start_offset===
8
end_offset===
18
Python OUTPUT===
 actionData.amt = quantity; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.title = bookMeta.getTitle();
red_line===
title
start_offset===
23
end_offset===
28
Python OUTPUT===
final actionData . title = bookMeta . getTitle ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.title = bookMeta.getTitle();
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.title = bookMeta.getTitle(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
bookMeta.setTitle(actionData.title);
red_line===
actionData
start_offset===
30
end_offset===
40
Python OUTPUT===
 bookMeta.setTitle(actionData.title); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.bannerMeta = stringyPatterns;
red_line===
bannerMeta
start_offset===
23
end_offset===
33
Python OUTPUT===
final actionData . bannerMeta = stringyPatterns ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.bannerMeta = stringyPatterns;
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.bannerMeta = stringyPatterns; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
Map<String, String> stringStringMap = actionData.bannerMeta;
red_line===
actionData
start_offset===
50
end_offset===
60
Python OUTPUT===
 Map<String, String> stringStringMap = actionData.bannerMeta; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.fadeColors = fadeColors;
red_line===
fadeColors
start_offset===
31
end_offset===
41
Python OUTPUT===
final actionData . fadeColors = fadeColors ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.fadeColors = fadeColors;
red_line===
actionData
start_offset===
20
end_offset===
30
Python OUTPUT===
 actionData.fadeColors = fadeColors; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
effect.withFade(Color.fromRGB(actionData.fadeColors[i]));
red_line===
actionData
start_offset===
46
end_offset===
56
Python OUTPUT===
 effect.withFade(Color.fromRGB(actionData.fadeColors[i])); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.lore = Objects.requireNonNull(meta.getLore()).toArray(new String[0]);
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.lore = Objects.requireNonNull(meta.getLore()).toArray(new String[0]); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.lore = Objects.requireNonNull(meta.getLore()).toArray(new String[0]);
red_line===
lore
start_offset===
23
end_offset===
27
Python OUTPUT===
final actionData . lore = Objects . requireNonNull ( meta . getLore ( ) ) . toArray ( new String [ 0 ] ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
meta.setLore(Arrays.asList(actionData.lore));
red_line===
actionData
start_offset===
43
end_offset===
53
Python OUTPUT===
 meta.setLore(Arrays.asList(actionData.lore)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.hasFlicker = true;
red_line===
hasFlicker
start_offset===
31
end_offset===
41
Python OUTPUT===
final actionData . hasFlicker = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.hasFlicker = true;
red_line===
actionData
start_offset===
20
end_offset===
30
Python OUTPUT===
 actionData.hasFlicker = true; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.content = bookMeta.getPages().toArray(new String[0]);
red_line===
content
start_offset===
23
end_offset===
30
Python OUTPUT===
final actionData . content = bookMeta . getPages ( ) . toArray ( new String [ 0 ] ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.content = bookMeta.getPages().toArray(new String[0]);
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.content = bookMeta.getPages().toArray(new String[0]); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
bookMeta.setPages(actionData.content);
red_line===
actionData
start_offset===
30
end_offset===
40
Python OUTPUT===
 bookMeta.setPages(actionData.content); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.slot = slot;
red_line===
slot
start_offset===
19
end_offset===
23
Python OUTPUT===
final actionData . slot = slot ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.slot = slot;
red_line===
actionData
start_offset===
8
end_offset===
18
Python OUTPUT===
 actionData.slot = slot; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
String slot = getActionData().slot.toUpperCase(Locale.ENGLISH);
red_line===
getActionData()
start_offset===
34
end_offset===
49
Python OUTPUT===
 String slot = getActionData().slot.toUpperCase(Locale.ENGLISH); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
iSlot = Integer.parseInt(getActionData().slot);
red_line===
getActionData()
start_offset===
45
end_offset===
60
Python OUTPUT===
 iSlot = Integer.parseInt(getActionData().slot); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.hasTrail = true;
red_line===
hasTrail
start_offset===
31
end_offset===
39
Python OUTPUT===
final actionData . hasTrail = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.hasTrail = true;
red_line===
actionData
start_offset===
20
end_offset===
30
Python OUTPUT===
 actionData.hasTrail = true; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
actionData.potionExtended = potion.getBasePotionData().isExtended();
red_line===
potionExtended
start_offset===
23
end_offset===
37
Python OUTPUT===
final actionData . potionExtended = potion . getBasePotionData ( ) . isExtended ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
actionData.potionExtended = potion.getBasePotionData().isExtended();
red_line===
actionData
start_offset===
12
end_offset===
22
Python OUTPUT===
 actionData.potionExtended = potion.getBasePotionData().isExtended(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"prefix\".
scn.ruleId===
3010
scn.suspCodeStr===
prefix = dataSource.getPrefix();
red_line===
prefix
start_offset===
0
end_offset===
0
Python OUTPUT===
 prefix Source.getPrefix(); 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove this \"break\" statement or make it conditional.
scn.ruleId===
1751
scn.suspCodeStr===
break;
red_line===
break
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"break\" statement or make it conditional.
scn.ruleId===
1751
scn.suspCodeStr===
e.printStackTrace();
red_line===
intSt
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final HashMap<String, MatchRule> action_types = parameters.getActionTypes();
red_line===
action_types
start_offset===
0
end_offset===
0
Python OUTPUT===
 final HashMap<String, MatchRule> action_types = parameters.getActionTypes(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"prefix\".
scn.ruleId===
3010
scn.suspCodeStr===
prefix = this.dataSource.getPrefix();
red_line===
prefix
start_offset===
0
end_offset===
0
Python OUTPUT===
 prefix .dataSource.getPrefix(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
database = null;
red_line===
database
start_offset===
0
end_offset===
0
Python OUTPUT===
final database = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" INNER JOIN \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
sql += " INNER JOIN " + prefix + "players p ON p.player_id = d.player_id ";
red_line===
" INNER JOIN "
start_offset===
0
end_offset===
0
Python OUTPUT===
 sql += " INNER JOIN " + prefix + "players p ON p.player_id = d.player_id "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v1_to_v2();
red_line===
v1_to_v2
start_offset===
0
end_offset===
0
Python OUTPUT===
 void v1_to_v2(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v2_to_v3();
red_line===
v2_to_v3
start_offset===
0
end_offset===
0
Python OUTPUT===
 void v2_to_v3(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v3_to_v4();
red_line===
v3_to_v4
start_offset===
0
end_offset===
0
Python OUTPUT===
 void v3_to_v4(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v4_to_v5();
red_line===
v4_to_v5
start_offset===
0
end_offset===
0
Python OUTPUT===
 void v4_to_v5(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v5_to_v6();
red_line===
v5_to_v6
start_offset===
0
end_offset===
0
Python OUTPUT===
 void v5_to_v6(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v6_to_v7();
red_line===
v6_to_v7
start_offset===
0
end_offset===
0
Python OUTPUT===
 void v6_to_v7(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"password\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
section.addDefault("password", "");
red_line===
"password"
start_offset===
0
end_offset===
0
Python OUTPUT===
 section.addDefault("password", ""); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
OutputStream out = new FileOutputStream(propFile);
red_line===
new FileOutputStream(propFile)
start_offset===
0
end_offset===
0
Python OUTPUT===
 OutputStream out = new FileOutputStream(propFile); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"mysql\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
String dataSource = configuration.getString("datasource", "mysql");
red_line===
"mysql"
start_offset===
0
end_offset===
0
Python OUTPUT===
 String dataSource = configuration.getString("datasource", "mysql"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
boolean addInsertionToBatch(Handler a) throws Exception;
red_line===
Exception
start_offset===
0
end_offset===
0
Python OUTPUT===
 boolean addInsertionToBatch(Handler a) throws Exception; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
void processBatch() throws Exception;
red_line===
Exception
start_offset===
0
end_offset===
0
Python OUTPUT===
 void processBatch() throws Exception; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make \"date\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final SimpleDateFormat date = new SimpleDateFormat("yy/MM/dd");
red_line===
date
start_offset===
0
end_offset===
0
Python OUTPUT===
private static final SimpleDateFormat date = new SimpleDateFormat ( " yy/MM/dd " ) ;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make \"time\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static final SimpleDateFormat time = new SimpleDateFormat("hh:mm:ssa");
red_line===
time
start_offset===
0
end_offset===
0
Python OUTPUT===
private static final SimpleDateFormat time = new SimpleDateFormat ( " hh:mm:ssa " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
protected String var = null;
red_line===
var
start_offset===
0
end_offset===
0
Python OUTPUT===
 protected String var = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
protected String var = null;
red_line===
var
start_offset===
0
end_offset===
0
Python OUTPUT===
 protected String var = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
e.printStackTrace();
red_line===
ack
start_offset===
0
end_offset===
0
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract the assignment out of this expression.
scn.ruleId===
1121
scn.suspCodeStr===
return (factory = new EntitySerializerFactory());
red_line===
=
start_offset===
0
end_offset===
0
Python OUTPUT===
 return (factory = new EntitySerializerFactory()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make direction a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String direction;
red_line===
direction
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String direction ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make params a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String params = "";
red_line===
params
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String params = " " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make processType a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String processType;
red_line===
processType
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String processType ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lines a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] lines;
red_line===
lines
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String [ ] lines ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make signType a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String signType;
red_line===
signType
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String signType ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make facing a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public BlockFace facing;
red_line===
facing
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final BlockFace facing ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int thresholdMax = 100;
red_line===
thresholdMax
start_offset===
0
end_offset===
0
Python OUTPUT===
private static final int thresholdMax = 100 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
parameters.setLimit(5);
red_line===
            parameters.setLimit(5); // @todo config this, and move the logic
start_offset===
0
end_offset===
0
Python OUTPUT===
 parameters.setLimit(5); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
assert (parameters.getProcessType() == PrismProcessType.ROLLBACK);
red_line===
                        assert (parameters.getProcessType() == PrismProcessType.ROLLBACK); //todo remove debug
start_offset===
0
end_offset===
0
Python OUTPUT===
 assert (parameters.getProcessType() == PrismProcessType.ROLLBACK); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
assert (parameters.getProcessType() == PrismProcessType.RESTORE);
red_line===
                        assert (parameters.getProcessType() == PrismProcessType.RESTORE);//todo remove debug
start_offset===
0
end_offset===
0
Python OUTPUT===
 assert (parameters.getProcessType() == PrismProcessType.RESTORE); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"restore\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
secondaries.add("restore");
red_line===
"restore"
start_offset===
0
end_offset===
0
Python OUTPUT===
 secondaries.add("restore"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"prism.help\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
addSub(new String[]{"about", "default"}, "prism.help").allowConsole().setHandler(new AboutCommand(prism));
red_line===
"prism.help"
start_offset===
0
end_offset===
0
Python OUTPUT===
 addSub(new String[]{"about", "default"}, "prism.help").allowConsole().setHandler(new AboutCommand(prism)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)");
red_line===
_tmp
start_offset===
0
end_offset===
0
Python OUTPUT===
 final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)");
red_line===
_tmp
start_offset===
0
end_offset===
0
Python OUTPUT===
 final String[] _tmp = this.name.toLowerCase().split("-(?!.*-.*)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
e.printStackTrace();
red_line===
kTra
start_offset===
0
end_offset===
0
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
e.printStackTrace();
red_line===
Stac
start_offset===
0
end_offset===
0
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
e.printStackTrace();
red_line===
Stac
start_offset===
0
end_offset===
0
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
final PrismBlockEvents be = new PrismBlockEvents(plugin);
red_line===
        final PrismBlockEvents be = new PrismBlockEvents(plugin); //todo is this necessary?
start_offset===
0
end_offset===
0
Python OUTPUT===
 final PrismBlockEvents be = new PrismBlockEvents(plugin); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final ArrayList<Block> falling_blocks = Utilities.findFallingBlocksAboveBlock(block);
red_line===
falling_blocks
start_offset===
0
end_offset===
0
Python OUTPUT===
 final ArrayList<Block> falling_blocks = Utilities.findFallingBlocksAboveBlock(block); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"entity-explode\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String action = "entity-explode";
red_line===
"entity-explode"
start_offset===
0
end_offset===
0
Python OUTPUT===
 String action = "entity-explode"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int blockChangesRead = 0;
red_line===
blockChangesRead
start_offset===
0
end_offset===
0
Python OUTPUT===
 private int blo0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"blockChangesRead\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTrace();
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" into the cache.\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.debug("Loaded player " + name + ", id: " + uuid + " into the cache.");
red_line===
" into the cache."
start_offset===
0
end_offset===
0
Python OUTPUT===
 Prism.debug("Loaded player " + name + ", id: " + uuid + " into the cache."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
deathWeapon = deathWeapon.replaceAll("_", " ");
red_line===
replaceAll
start_offset===
0
end_offset===
0
Python OUTPUT===
deathWeapon = deathWeapon.replaceAll ( " _ " , " " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"itemAliases\" which hides the field declared at line 33.
scn.ruleId===
1117
scn.suspCodeStr===
Map<String, Object> itemAliases = null;
red_line===
itemAliases
start_offset===
0
end_offset===
0
Python OUTPUT===
 Map<String, Object> itemAliases = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"skeleton\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return "skeleton";
red_line===
"skeleton"
start_offset===
0
end_offset===
0
Python OUTPUT===
 return "skeleton"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make second a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int second;
red_line===
second
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int second ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String defaultSubCommand = "default";
red_line===
defaultSubCommand
start_offset===
0
end_offset===
0
Python OUTPUT===
private static final default String defaultSubCommand = " " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"examplecommand \u003calert\u003e\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
config.addDefault("prism.alerts.ores.log-commands", Collections.singletonList("examplecommand <alert>"));
red_line===
"examplecommand <alert>"
start_offset===
0
end_offset===
0
Python OUTPUT===
 config.addDefault("prism.alerts.ores.log-commands", Collections.singletonList("examplecommand <alert>")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make deleteTask a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public BukkitTask deleteTask;
red_line===
deleteTask
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final BukkitTask delete Task ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Correct one of the identical sub-expressions on both sides of operator \"\u0026\u0026\"
scn.ruleId===
1764
scn.suspCodeStr===
return disableDripReporterHook() && disableDripReporterHook();
red_line===
disableDripReporterHook()
start_offset===
0
end_offset===
0
Python OUTPUT===
\u0026\u0026 && disableDripReporterHook ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make monitor a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static DripReporterApi monitor = null;
red_line===
monitor
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final DripReporterApi monitor = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make worldEditPlugin a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static WorldEditPlugin worldEditPlugin = null;
red_line===
worldEditPlugin
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final WorldEditPlugin worldEditPlugin = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static HashMap<String, Integer> prismActions = new HashMap<>();
red_line===
prismActions
start_offset===
0
end_offset===
0
Python OUTPUT===
protected static HashMap < String , Integer > prismActions = new HashMap < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static final HashMap<String, Integer> prismWorlds = new HashMap<>();
red_line===
prismWorlds
start_offset===
0
end_offset===
0
Python OUTPUT===
protected static final HashMap < String , Integer > prismWorlds = new HashMap < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make prismActions a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static HashMap<String, Integer> prismActions = new HashMap<>();
red_line===
prismActions
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final HashMap < String , Integer > prismActions = new HashMap < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
items = new MaterialAliases();
red_line===
items
start_offset===
0
end_offset===
0
Python OUTPUT===
final items = new MaterialAliases ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int currentDbSchemaVersion = 8;
red_line===
currentDbSchemaVersion
start_offset===
0
end_offset===
0
Python OUTPUT===
private static final int currentDbSchemaVersion = 8 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make oreMonitor a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public OreMonitor oreMonitor;
red_line===
oreMonitor
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final OreMonitor or eMonitor ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make owner a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String owner;
red_line===
owner
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String owner ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make name a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String name;
red_line===
name
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String name ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"worldChangeQueueTaskId\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int worldChangeQueueTaskId;
red_line===
worldChangeQueueTaskId
start_offset===
0
end_offset===
0
Python OUTPUT===
 private int wor
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ALTER TABLE `\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
query = "ALTER TABLE `" + prefix + "data_extra` DROP FOREIGN KEY `" + prefix + "data_extra_ibfk_1`;";
red_line===
"ALTER TABLE `"
start_offset===
0
end_offset===
0
Python OUTPUT===
 query = "ALTER TABLE `" + prefix + "data_extra` DROP FOREIGN KEY `" + prefix + "data_extra_ibfk_1`;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ALTER TABLE `\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
teUpdate(query)
start_offset===
0
end_offset===
0
Python OUTPUT===
 st.executeUpdate(query); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String automap = "INSERT INTO <prefix>id_map(material, state) VALUES (?, ?);";
red_line===
automap
start_offset===
0
end_offset===
0
Python OUTPUT===
 private static final String automap = "INSERT INTO <prefix>id_map(material, state) VALUES (?, ?);"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String unauto = "ALTER TABLE <prefix>id_map AUTO_INCREMENT=?;";
red_line===
unauto
start_offset===
0
end_offset===
0
Python OUTPUT===
 private static final String unauto = "ALTER TABLE <prefix>id_map AUTO_INCREMENT=?;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String toAllIds = "SELECT block_id, block_subid FROM <prefix>id_map WHERE material=?;";
red_line===
toAllIds
start_offset===
0
end_offset===
0
Python OUTPUT===
 private static final String toAllIds = "SELECT block_id, block_subid FROM <prefix>id_map WHERE material=?;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Database connection error: \" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.warn("Database connection error: ", e);
red_line===
"Database connection error: "
start_offset===
0
end_offset===
0
Python OUTPUT===
 Prism.warn("Database connection error: ", e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Material cannot be null\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
Validate.notNull(material, "Material cannot be null");
red_line===
"Material cannot be null"
start_offset===
0
end_offset===
0
Python OUTPUT===
 Validate.notNull(material, "Material cannot be null"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"\u003cprefix\u003e\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
String query = toMat.replace("<prefix>", prefix);
red_line===
"<prefix>"
start_offset===
0
end_offset===
0
Python OUTPUT===
 String query = toMat.replace("<prefix>", prefix); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String repair = "UPDATE <prefix>id_map SET block_id=?, block_subid=? WHERE block_id=?;";
red_line===
repair
start_offset===
0
end_offset===
0
Python OUTPUT===
 private static final String repair = "UPDATE <prefix>id_map SET block_id=?, block_subid=? WHERE block_id=?;"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Success callback cannot be null\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Validate.notNull(success, "Success callback cannot be null");
red_line===
"Success callback cannot be null"
start_offset===
0
end_offset===
0
Python OUTPUT===
 Validate.notNull(success, "Success callback cannot be null"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"State cannot be null\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Validate.notNull(state, "State cannot be null");
red_line===
"State cannot be null"
start_offset===
0
end_offset===
0
Python OUTPUT===
 Validate.notNull(state, "State cannot be null"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Remove this \"break\" statement or make it conditional.
scn.ruleId===
1751
scn.suspCodeStr===
break;
red_line===
break
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
private boolean paused;
red_line===
when set the datasource will not allow insertions;
start_offset===
0
end_offset===
0
Python OUTPUT===
 private boolean paused; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
void v7_to_v8();
red_line===
v7_to_v8
start_offset===
0
end_offset===
0
Python OUTPUT===
 void v7_to_v8(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"username\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
section.addDefault("username", "root");
red_line===
"username"
start_offset===
0
end_offset===
0
Python OUTPUT===
 section.addDefault("username", "root"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make art a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String art;
red_line===
art
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String art ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make type a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String type;
red_line===
type
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String type ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make potionType a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String potionType;
red_line===
potionType
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String potionType ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make color a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int color;
red_line===
color
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int color ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make bannerMeta a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Map<String, String> bannerMeta;
red_line===
bannerMeta
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final Map < String , String > bannerMeta ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"item\" which hides the field declared at line 57.
scn.ruleId===
1117
scn.suspCodeStr===
ItemStack item = getItem().clone();
red_line===
item
start_offset===
0
end_offset===
0
Python OUTPUT===
 ItemStack item = getItem().clone(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make by a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String by;
red_line===
by
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String by ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"actionData\" which hides the field declared at line 64.
scn.ruleId===
1117
scn.suspCodeStr===
final BannerActionData actionData = (BannerActionData) blockActionData;
red_line===
actionData
start_offset===
0
end_offset===
0
Python OUTPUT===
 final BannerActionData actionData = (BannerActionData) blockActionData; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
e.printStackTrace();
red_line===
rint
start_offset===
0
end_offset===
0
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove duplicates in this character class.
scn.ruleId===
5869
scn.suspCodeStr===
Pattern pattern = Pattern.compile("([abtrkpew]|id|since|before){1}:([\\[,<,a-z,0-9,>,|,:,\\],#]*)");
red_line===
,
start_offset===
0
end_offset===
0
Python OUTPUT===
 Pattern pattern = Pattern.compile("([abtrkpew]|id|since|before){1}:([\\[,<,a-z-9,>,|,:,\\],#]*)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"wand-current\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
sendWandStatus(call.getPlayer(), "wand-current", false, wandOn, parameters.toString());
red_line===
"wand-current"
start_offset===
0
end_offset===
0
Python OUTPUT===
 sendWandStatus(call.getPlayer(), "wand-current", false, wandOn, parameters.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"rollback\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
secondaries.add("rollback");
red_line===
"rollback"
start_offset===
0
end_offset===
0
Python OUTPUT===
 secondaries.add("rollback"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static failedDbConnectionCount\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static int failedDbConnectionCount = 0;
red_line===
failedDbConnectionCount
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int failedDbConnectionCount = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ACTION: \" 11 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.debug("ACTION: " + event.getAction().name());
red_line===
"ACTION: "
start_offset===
0
end_offset===
0
Python OUTPUT===
 Prism.debug("ACTION: " + event.getAction().name()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"unknown\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String name = "unknown";
red_line===
"unknown"
start_offset===
0
end_offset===
0
Python OUTPUT===
 String name = "unknown"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final Material item_mat = wand.getItem();
red_line===
item_mat
start_offset===
0
end_offset===
0
Python OUTPUT===
 final Material item_mat = wand.getItem(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"You do not have permission to override the max radius.\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new IllegalArgumentException("You do not have permission to override the max radius.");
red_line===
"You do not have permission to override the max radius."
start_offset===
0
end_offset===
0
Python OUTPUT===
 throw new IllegalArgumentException("You do not have permission to override the max radius."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"applier-changes-skipped\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
builder.append(Il8nHelper.formatMessage("applier-changes-skipped", result.getChangesSkipped()));
red_line===
"applier-changes-skipped"
start_offset===
0
end_offset===
0
Python OUTPUT===
 builder.append(Il8nHelper.formatMessage("applier-changes-skipped", result.getChangesSkipped())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"prism.mysql.prefix\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
prefix = Prism.config.getString("prism.mysql.prefix","prism_");
red_line===
"prism.mysql.prefix"
start_offset===
0
end_offset===
0
Python OUTPUT===
 prefix = Prism.config.getString("prism.mysql.prefix","prism_"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"prism_\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
private static String prefix = "prism_";
red_line===
"prism_"
start_offset===
0
end_offset===
0
Python OUTPUT===
 private static String prefix = "prism_"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Elixr: Loaded items directory");
red_line===
System.out
start_offset===
0
end_offset===
0
Python OUTPUT===
 System.out.println("Elixr: Loaded items directory"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make material a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Material material;
red_line===
material
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final Material material ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make state a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String state;
red_line===
state
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String state ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"material\".
scn.ruleId===
3010
scn.suspCodeStr===
this.material = material;
red_line===
material
start_offset===
0
end_offset===
0
Python OUTPUT===
 this.material =;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
this.material = material;
red_line===
this
start_offset===
0
end_offset===
0
Python OUTPUT===
 this.material = material; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final NamespacedKey key = null;
red_line===
key
start_offset===
0
end_offset===
0
Python OUTPUT===
private static final NamespacedKey key = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make first a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int first;
red_line===
first
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int first ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"first\".
scn.ruleId===
3010
scn.suspCodeStr===
this.first = first;
red_line===
first
start_offset===
0
end_offset===
0
Python OUTPUT===
 this.first =;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
this.first = first;
red_line===
this
start_offset===
0
end_offset===
0
Python OUTPUT===
 this.first = first; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"first\".
scn.ruleId===
3010
scn.suspCodeStr===
first = (int) (both >> 32);
red_line===
first
start_offset===
0
end_offset===
0
Python OUTPUT===
 first =) (both >> 32); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
0
end_offset===
0
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"command\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.mode = (mode == null ? "command" : mode);
red_line===
"command"
start_offset===
0
end_offset===
0
Python OUTPUT===
 this.mode = (mode == null ? "command" : mode); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make mode a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String mode;
red_line===
mode
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String mode ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"instance\".
scn.ruleId===
3010
scn.suspCodeStr===
instance = this;
red_line===
instance
start_offset===
0
end_offset===
0
Python OUTPUT===
 instanc; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
pasteKey = Prism.config.getString("prism.paste.api-key", "API KEY");
red_line===
pasteKey
start_offset===
0
end_offset===
0
Python OUTPUT===
final pasteKey = Prism . config . getString ( " prism.paste.api-key " , " API KEY " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
pluginName = this.getDescription().getName();
red_line===
pluginName
start_offset===
0
end_offset===
0
Python OUTPUT===
final pluginName = this . getDescription ( ) . getName ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make maxCycleTime a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public long maxCycleTime = 0;
red_line===
maxCycleTime
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final long maxCycleTime = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"cachedQueries\" should be an interface such as \"ConcurrentMap\" rather than the implementation \"ConcurrentHashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public final ConcurrentHashMap<String, QueryResult> cachedQueries = new ConcurrentHashMap<>();
red_line===
ConcurrentHashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public final ConcurrentHashMap<String, QueryResult> cachedQueries = new ConcurrentHashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make useMonitor a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public UseMonitor useMonitor;
red_line===
useMonitor
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final UseMonitor useMonitor ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
log.info("[" + getPrismName() + "] " + message);
red_line===
"[" + getPrismName() + "] " + message
start_offset===
0
end_offset===
0
Python OUTPUT===
 log.info("[" + getPrismName() + "] " + message); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
prismLog = createPrismLogger();
red_line===
prismLog
start_offset===
0
end_offset===
0
Python OUTPUT===
final prismLog = createPrismLogger ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Lambda should be used to defer string concatenation.
scn.ruleId===
3457
scn.suspCodeStr===
prismLog.log(Level.WARNING, "[" + getPrismName() + "] " + message, e);
red_line===
prismLog.log(Level.WARNING, "[" + getPrismName() + "] " + message, e)
start_offset===
0
end_offset===
0
Python OUTPUT===
 prismLog.log(Level.WARNING, "[" + getPrismName() + "] " + message, e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make monitoring a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean monitoring = false;
red_line===
monitoring
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final boolean monitoring = false ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make config a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static FileConfiguration config;
red_line===
config
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final FileConfiguration config ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static messenger\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static Messenger messenger;
red_line===
messenger
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final Messenger messenger ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
ignore = new Ignore(this);
red_line===
ignore
start_offset===
0
end_offset===
0
Python OUTPUT===
final ignore = new Ignore ( this ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
useMonitor = new UseMonitor(instance);
red_line===
useMonitor
start_offset===
0
end_offset===
0
Python OUTPUT===
final useMonitor = new UseMonitor ( instance ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"preplannedVehiclePlacement\" should be an interface such as \"ConcurrentMap\" rather than the implementation \"ConcurrentHashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public final ConcurrentHashMap<String, String> preplannedVehiclePlacement = new ConcurrentHashMap<>();
red_line===
ConcurrentHashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public final ConcurrentHashMap<String, String> preplannedVehiclePlacement = new ConcurrentHashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
pasteKey = null;
red_line===
pasteKey
start_offset===
0
end_offset===
0
Python OUTPUT===
final pasteKey = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"prismPlayers\" should be an interface such as \"Map\" rather than the implementation \"HashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public static final HashMap<UUID, PrismPlayer> prismPlayers = new HashMap<>();
red_line===
HashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public static final HashMap<UUID, PrismPlayer> prismPlayers = new HashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"playerActivePreviews\" should be an interface such as \"ConcurrentMap\" rather than the implementation \"ConcurrentHashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public final ConcurrentHashMap<String, PreviewSession> playerActivePreviews = new ConcurrentHashMap<>();
red_line===
ConcurrentHashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public final ConcurrentHashMap<String, PreviewSession> playerActivePreviews = new ConcurrentHashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
audiences = BukkitAudiences.create(this);
red_line===
audiences
start_offset===
0
end_offset===
0
Python OUTPUT===
final audiences = BukkitAudiences . create ( this ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
pasteKey = null;
red_line===
pasteKey
start_offset===
0
end_offset===
0
Python OUTPUT===
final pasteKey = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027instance::enabled\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
Bukkit.getScheduler().runTask(instance, () -> instance.enabled());
red_line===
->
start_offset===
0
end_offset===
0
Python OUTPUT===
 Bukkit.getScheduler().runTask(instance, () -> instance.enabled()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"prismActions\" should be an interface such as \"Map\" rather than the implementation \"HashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public static HashMap<String, Integer> prismActions = new HashMap<>();
red_line===
HashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public static HashMap<String, Integer> prismActions = new HashMap<>(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
eventTimer = new TimeTaken(this);
red_line===
eventTimer
start_offset===
0
end_offset===
0
Python OUTPUT===
final eventTimer = new TimeTaken ( this ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
queueStats = new QueueStats();
red_line===
queueStats
start_offset===
0
end_offset===
0
Python OUTPUT===
final queueStats = new QueueStats ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"playersWithActiveTools\" should be an interface such as \"ConcurrentMap\" rather than the implementation \"ConcurrentHashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public static final ConcurrentHashMap<String, Wand> playersWithActiveTools = new ConcurrentHashMap<>();
red_line===
ConcurrentHashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public static final ConcurrentHashMap<String, Wand> playersWithActiveTools = new ConcurrentHashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this alternation with a character class.
scn.ruleId===
6035
scn.suspCodeStr===
final Pattern p = Pattern.compile("([0-9]+)(s|h|m|d|w)");
red_line===
s|h|m|d|w
start_offset===
0
end_offset===
0
Python OUTPUT===
 final Pattern p = Pattern.compile("([0-9]+)(s|h|m|d|w)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Database Error:\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.debug("Database Error:" + e.getMessage());
red_line===
"Database Error:"
start_offset===
0
end_offset===
0
Python OUTPUT===
 Prism.debug("Database Error:" + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "";
red_line===
""
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
void createBatch() throws Exception;
red_line===
Exception
start_offset===
0
end_offset===
0
Python OUTPUT===
 void createBatch() throws Exception; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
actionsPerInsert = plugin.getConfig().getInt("prism.database.actions-per-insert-batch");
red_line===
actionsPerInsert
start_offset===
0
end_offset===
0
Python OUTPUT===
 actionsin.getConfig().getInt("prism.database.actions-per-insert-batch"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
e.printStackTrace();
red_line===
        e.printS
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
result.addHandler(handler);
red_line===
    result.addHa
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
result.setLevel(Level.CONFIG);
red_line===
    result.setLe
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"actionsPerInsert\".
scn.ruleId===
3010
scn.suspCodeStr===
e.printStackTrace();
red_line===
    e.printStack
start_offset===
0
end_offset===
0
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
log.warning("[" + getPrismName() + "] " + message);
red_line===
"[" + getPrismName() + "] " + message
start_offset===
0
end_offset===
0
Python OUTPUT===
 log.warning("[" + getPrismName() + "] " + message); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
debug = getConfig().getBoolean("prism.debug", false);
red_line===
debug
start_offset===
0
end_offset===
0
Python OUTPUT===
final debug = getConfig ( ) . getBoolean ( " prism.debug " , false ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027instance::enableFailedDatabase\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
Bukkit.getScheduler().runTask(instance, () -> instance.enableFailedDatabase());
red_line===
->
start_offset===
0
end_offset===
0
Python OUTPUT===
 Bukkit.getScheduler().runTask(instance, () -> instance.enableFailedDatabase()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
config = mc.getConfig();
red_line===
config
start_offset===
0
end_offset===
0
Python OUTPUT===
final config = mc . getConfig ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make recordingTask a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public BukkitTask recordingTask;
red_line===
recordingTask
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final BukkitTask recordingTask ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"playerActiveViews\" should be an interface such as \"ConcurrentMap\" rather than the implementation \"ConcurrentHashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public final ConcurrentHashMap<String, ArrayList<Block>> playerActiveViews = new ConcurrentHashMap<>();
red_line===
ConcurrentHashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public final ConcurrentHashMap<String, ArrayList<Block>> playerActiveViews = new ConcurrentHashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make queueStats a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public QueueStats queueStats;
red_line===
queueStats
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final QueueStats queueStats ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make preplannedBlockFalls a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public ConcurrentHashMap<String, String> preplannedBlockFalls = new ConcurrentHashMap<>();
red_line===
preplannedBlockFalls
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final ConcurrentHashMap < String , String > preplannedBlockFalls = new ConcurrentHashMap < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"prismWorlds\" should be an interface such as \"Map\" rather than the implementation \"HashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public static final HashMap<String, Integer> prismWorlds = new HashMap<>();
red_line===
HashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public static final HashMap<String, Integer> prismWorlds = new HashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make totalRecordsAffected a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int totalRecordsAffected = 0;
red_line===
totalRecordsAffected
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int totalRecordsAffected = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
The type of \"preplannedBlockFalls\" should be an interface such as \"ConcurrentMap\" rather than the implementation \"ConcurrentHashMap\".
scn.ruleId===
1319
scn.suspCodeStr===
public ConcurrentHashMap<String, String> preplannedBlockFalls = new ConcurrentHashMap<>();
red_line===
ConcurrentHashMap
start_offset===
0
end_offset===
0
Python OUTPUT===
 public ConcurrentHashMap<String, String> preplannedBlockFalls = new ConcurrentHashMap<>(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make eventTimer a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public TimeTaken eventTimer;
red_line===
eventTimer
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final TimeTaken eventTimer ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
messenger = new Messenger(pluginName, Prism.getAudiences());
red_line===
messenger
start_offset===
0
end_offset===
0
Python OUTPUT===
final messenger = new Messenger ( pluginName , Prism . getAudiences ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027instance::enableFailedDatabase\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
Bukkit.getScheduler().runTask(instance, () -> instance.enableFailedDatabase());
red_line===
->
start_offset===
0
end_offset===
0
Python OUTPUT===
 Bukkit.getScheduler().runTask(instance, () -> instance.enableFailedDatabase()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Lambda should be used to defer string concatenation.
scn.ruleId===
3457
scn.suspCodeStr===
log.log(Level.WARNING, "[" + getPrismName() + "] " + message, e);
red_line===
log.log(Level.WARNING, "[" + getPrismName() + "] " + message, e)
start_offset===
0
end_offset===
0
Python OUTPUT===
 log.log(Level.WARNING, "[" + getPrismName() + "] " + message, e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lore a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] lore;
red_line===
lore
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String [ ] lore ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make potionUpgraded a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean potionUpgraded;
red_line===
potionUpgraded
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final boolean potionUpgraded ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make enchs a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] enchs;
red_line===
enchs
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String [ ] enchs ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"item\" which hides the field declared at line 57.
scn.ruleId===
1117
scn.suspCodeStr===
ItemStack item = getItem().clone();
red_line===
item
start_offset===
0
end_offset===
0
Python OUTPUT===
 ItemStack item = getItem().clone(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make hasFlicker a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean hasFlicker;
red_line===
hasFlicker
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final boolean hasFlicker ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make title a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String title;
red_line===
title
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String title ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make hasTrail a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean hasTrail;
red_line===
hasTrail
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final boolean hasTrail ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make amt a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int amt;
red_line===
amt
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int amt ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make amt a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
e.printStackTrace();
red_line===
kTr
start_offset===
0
end_offset===
0
Python OUTPUT===
static final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make amt a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
ute
start_offset===
0
end_offset===
0
Python OUTPUT===
static final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make amt a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
ute
start_offset===
0
end_offset===
0
Python OUTPUT===
static final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make amt a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
exe
start_offset===
0
end_offset===
0
Python OUTPUT===
static final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
database = null;
red_line===
database
start_offset===
0
end_offset===
0
Python OUTPUT===
final database = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
        
start_offset===
0
end_offset===
0
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
    st.e
start_offset===
0
end_offset===
0
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
    st.e
start_offset===
0
end_offset===
0
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
    st.e
start_offset===
0
end_offset===
0
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
st.executeUpdate(query);
red_line===
    st.e
start_offset===
0
end_offset===
0
Python OUTPUT===
final st . executeUpdate ( query ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
e.printStackTrace();
red_line===
    e.pr
start_offset===
0
end_offset===
0
Python OUTPUT===
final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Loaded \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Prism.debug("Loaded " + rs.getString(2) + ", id:" + rs.getInt(1));
red_line===
"Loaded "
start_offset===
0
end_offset===
0
Python OUTPUT===
 Prism.debug("Loaded " + rs.getString(2) + ", id:" + rs.getInt(1)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make fadeColors a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int[] fadeColors;
red_line===
fadeColors
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int [ ] fadeColors ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make content a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String[] content;
red_line===
content
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String [ ] content ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make slot a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String slot = "-1";
red_line===
slot
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final String slot = " -1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make effectColors a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int[] effectColors;
red_line===
effectColors
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final int [ ] effectColors ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make potionExtended a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean potionExtended;
red_line===
potionExtended
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final boolean potionExtended ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make durability a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public short durability = 0;
red_line===
durability
start_offset===
0
end_offset===
0
Python OUTPUT===
public static final short durability = 0 ;
isFixed===
true
==================
