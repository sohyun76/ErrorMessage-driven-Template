RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List resultLineList   = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List resultLineList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List baseSplitEdges = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List baseSplitEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List newEdges = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List newEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List splitEdges = baseSplitEdges;
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List splitEdges = baseSplitEdges; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List resultPointList  = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List resultPointList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geomList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geomList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"splitEdges\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
List splitEdges = baseSplitEdges;
red_line===
splitEdges
start_offset===
9
end_offset===
19
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set exteriorCoords = new TreeSet();
red_line===
Set
start_offset===
2
end_offset===
5
Python OUTPUT===
 Set exteriorCoords = new TreeSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (exteriorCoords.size() == 0)
			return otherGeom;
red_line===
exteriorCoords.size() == 0
start_offset===
6
end_offset===
32
Python OUTPUT===
 if (exteriorCoords.size() == 0) return otherGeom; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List extractedGeoms = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List extractedGeoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("found empty!");
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("found empty!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"overallUnion\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry overallUnion = GeometryCombiner.combine(union, disjoint0, disjoint1);
red_line===
GeometryCombiner.combine(union, disjoint0, disjoint1)
start_offset===
27
end_offset===
80
Python OUTPUT===
 Geometry overallUnion = GeometryCombiner.combine(union, disjoint0, disjoint1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"unionAll\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry unionAll = gColl.buffer(0.0);
red_line===
gColl.buffer(0.0)
start_offset===
23
end_offset===
40
Python OUTPUT===
 Geometry unionAll = gColl.buffer(0.0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List points = extracter.getExtract(0);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List points = extracter.getExtract(0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polygons = extracter.getExtract(2);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polygons = extracter.getExtract(2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polygons = PolygonExtracter.getPolygons(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polygons = PolygonExtracter.getPolygons(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"geomFactory\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private GeometryFactory geomFactory = null;
red_line===
geomFactory
start_offset===
25
end_offset===
36
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"geomFactory\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private GeometryFactory geomFactory = null;
red_line===
geomFactory
start_offset===
25
end_offset===
36
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> intersectingGeoms = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
52
end_offset===
62
Python OUTPUT===
\u003c\u003e intersectingGeoms = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> disjointPolys = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
48
end_offset===
58
Python OUTPUT===
\u003c\u003e disjointPolys = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (Double.isInfinite(coord.y)) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (Double.isInfinite(coord.y)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
6
end_offset===
13
Python OUTPUT===
 retur
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List rings = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List rings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List results = index.query(innerRing.getEnvelopeInternal());
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List results = index.query(innerRing.getEnvelopeInternal()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public RepeatedPointTester() {
  }
red_line===
RepeatedPointTester
start_offset===
9
end_offset===
28
Python OUTPUT===
 public RepeatedPointTester() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add the missing @Deprecated annotation.
scn.ruleId===
1123
scn.suspCodeStr===
public static final int REPEATED_POINT          = 1;
red_line===
REPEATED_POINT
start_offset===
26
end_offset===
40
Python OUTPUT===
 public static final int REPEATED_POINT = 1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edgeRings = buildEdgeRings(graph.getEdgeEnds());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edgeRings = buildEdgeRings(graph.getEdgeEnds()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edgeRings = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edgeRings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List minEdgeRings = er.buildMinimalRings();
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List minEdgeRings = er.buildMinimalRings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = er.getEdges();
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List edges = er.getEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set prevSubgraphNodes = new TreeSet();
red_line===
Set
start_offset===
4
end_offset===
7
Python OUTPUT===
 Set prevSubgraphNodes = new TreeSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List currNodes = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List currNodes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List sequences = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List sequences = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List subgraphs = csFinder.getConnectedSubgraphs();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List subgraphs = csFinder.getConnectedSubgraphs(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List orientedSeq = orient(seq);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List orientedSeq = orient(seq); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List seq = new LinkedList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List seq = new LinkedList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
LinkedList newSeq = new LinkedList();
red_line===
LinkedList
start_offset===
4
end_offset===
14
Python OUTPUT===
 LinkedList newSeq = new LinkedList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"junk2\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int junk2 = file.readShortBE();
red_line===
junk2
start_offset===
8
end_offset===
13
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
shellList = new ArrayList();
red_line===
ArrayList
start_offset===
20
end_offset===
29
Python OUTPUT===
 shellList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = PolygonExtracter.getPolygons(g);
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List polys = PolygonExtracter.getPolygons(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VERBOSE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static boolean VERBOSE = false;
red_line===
VERBOSE
start_offset===
25
end_offset===
32
Python OUTPUT===
 private static boolean VVERBOSE= false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"ei\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
if (dim == Dimension.FALSE) 
      return OverlayLabel.DIM_NOT_PART;
red_line===
n.
start_offset===
23
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
if (dim == Dimension.FALSE) 
      return OverlayLabel.DIM_NOT_PART;
red_line===
    return OverlayLab
start_offset===
2
end_offset===
23
Python OUTPUT===
 if (dim == Dimension.FALSE) return OverlayLabel.DIM_NOT_PART; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"edge \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
bDim = info.getDimension();
red_line===
etDimen
start_offset===
19
end_offset===
26
Python OUTPUT===
 bDim = info.getDimension(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<OverlayEdge> edges = new ArrayList<OverlayEdge>();
red_line===
<OverlayEdge>
start_offset===
49
end_offset===
62
Python OUTPUT===
\u003c\u003e > edges = new ArrayList < OverlayEdge > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Deque<OverlayEdge> edgeStack = new ArrayDeque<OverlayEdge>(linearEdges);
red_line===
<OverlayEdge>
start_offset===
49
end_offset===
62
Python OUTPUT===
\u003c\u003e edgeStack = new ArrayDeque < OverlayEdge > ( linearEdges ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"KEEP\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final int KEEP = 1;
red_line===
KEEP
start_offset===
27
end_offset===
31
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"lineCoord\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate[] lineCoord = segGen.getCoordinates();
red_line===
segGen.getCoordinates()
start_offset===
29
end_offset===
52
Python OUTPUT===
 Coordinate[] lineCoord = segGen.getCoordinates(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List curveList = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List curveList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ptList = new ArrayList();
red_line===
ArrayList
start_offset===
16
end_offset===
25
Python OUTPUT===
 ptList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (ptList.size() < 1)
    	return false;
red_line===
ptList.size() < 1
start_offset===
8
end_offset===
25
Python OUTPUT===
 if (ptList.size() < 1) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Coordinate coord[] = e.getCoordinates();
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
 Coordinate coord[] = e.getCoordinates(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> parts = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
40
end_offset===
50
Python OUTPUT===
\u003c\u003e parts = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"polygon\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon polygon = geomFactory.createPolygon(pts);
red_line===
geomFactory.createPolygon(pts)
start_offset===
22
end_offset===
52
Python OUTPUT===
 Polygon polygon = geomFactory.createPolygon(pts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection subgraphs;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection subgraphs; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List stabbedSegments = findStabbedSegments(p);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List stabbedSegments = findStabbedSegments(p); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List bufferSegStrList = curveSetBuilder.getCurves();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List bufferSegStrList = curveSetBuilder.getCurves(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List subgraphList = createSubgraphs(graph);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List subgraphList = createSubgraphs(graph); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List resultPolyList = polyBuilder.getPolygons();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List resultPolyList = polyBuilder.getPolygons(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection nodedSegStrings = noder.getNodedSubstrings();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection nodedSegStrings = noder.getNodedSubstrings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List subgraphList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List subgraphList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"resultGeom\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry resultGeom = geomFact.buildGeometry(resultPolyList);
red_line===
geomFact.buildGeometry(resultPolyList)
start_offset===
26
end_offset===
64
Python OUTPUT===
 Geometry resultGeom = geomFact.buildGeometry(resultPolyList); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"emptyGeom\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry emptyGeom = geomFact.createPolygon();
red_line===
geomFact.createPolygon()
start_offset===
25
end_offset===
49
Python OUTPUT===
 Geometry emptyGeom = geomFact.createPolygon(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List dirEdgeList  = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List dirEdgeList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"testPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate testPt = testRing.getCoordinateN(0);
red_line===
= testRing.getCoordinateN(0)
start_offset===
22
end_offset===
50
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
return list == null || list.size() == 0;
red_line===
list.size() == 0
start_offset===
27
end_offset===
43
Python OUTPUT===
 return list == null || list.size() == 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geomOv\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry geomOv = ov.getResult();
red_line===
ov.getResult()
start_offset===
22
end_offset===
36
Python OUTPUT===
 Geometry geomOv = ov.getResult(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geomOv\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry geomOv = ov.getResult();
red_line===
ov.getResult()
start_offset===
22
end_offset===
36
Python OUTPUT===
 Geometry geomOv = ov.getResult(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geomOv\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry geomOv = ov.getResult();
red_line===
ov.getResult()
start_offset===
22
end_offset===
36
Python OUTPUT===
 Geometry geomOv = ov.getResult(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geomOv\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry geomOv = ov.getResult();
red_line===
ov.getResult()
start_offset===
22
end_offset===
36
Python OUTPUT===
 Geometry geomOv = ov.getResult(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geomOv\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry geomOv = ov.getResult();
red_line===
ov.getResult()
start_offset===
22
end_offset===
36
Python OUTPUT===
 Geometry geomOv = ov.getResult(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = computeEdgeOverlay();
red_line===
computeEdgeOverlay()
start_offset===
22
end_offset===
42
Python OUTPUT===
 Geometry result = computeEdgeOverlay(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"scale\".
scn.ruleId===
1488
scn.suspCodeStr===
double scale = PrecisionUtil.safeScale(maxBnd);
red_line===
PrecisionUtil.safeScale(maxBnd)
start_offset===
19
end_offset===
50
Python OUTPUT===
 double scale = PrecisionUtil.safeScale(maxBnd); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"scaleFactor\".
scn.ruleId===
1488
scn.suspCodeStr===
double scaleFactor = Math.pow(10.0, precDigits);
red_line===
Math.pow(10.0, precDigits)
start_offset===
25
end_offset===
51
Python OUTPUT===
 double scaleFactor = Math.pow(10.0, precDigits); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"scaleFactor\".
scn.ruleId===
1488
scn.suspCodeStr===
double scaleFactor = Math.pow(10.0, numDec);
red_line===
Math.pow(10.0, numDec)
start_offset===
25
end_offset===
47
Python OUTPUT===
 double scaleFactor = Math.pow(10.0, numDec); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MAX_ROBUST_DP_DIGITS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static int MAX_ROBUST_DP_DIGITS = 14;
red_line===
MAX_ROBUST_DP_DIGITS
start_offset===
20
end_offset===
40
Python OUTPUT===
 public static int MMAX_ROBUST_DP_DIGITS= 14; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public List getDirectedEdges() { return dirEdgeList; }
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 public List getDirectedEdges() { return dirEdgeList; } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set nodesVisited = new HashSet();
red_line===
Set
start_offset===
4
end_offset===
7
Python OUTPUT===
 Set nodesVisited = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
LinkedList nodeQueue = new LinkedList();
red_line===
LinkedList
start_offset===
4
end_offset===
14
Python OUTPUT===
 LinkedList nodeQueue = new LinkedList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"label\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
Label label = de.getLabel();
red_line===
label
start_offset===
10
end_offset===
15
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"n\".
scn.ruleId===
1854
scn.suspCodeStr===
Node n = de.getNode();
red_line===
= de.getNode()
start_offset===
11
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List splitEdges = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List splitEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this expression which always evaluates to \"true\"
scn.ruleId===
2589
scn.suspCodeStr===
if (isValid)
      	isSuccess = true;
red_line===
isValid
start_offset===
10
end_offset===
17
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Geometry remGeom[] = new Geometry[2];
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
 Geometry remGeom[] = new Geometry[2]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Snapped geometry is invalid");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Snapped geometry is invalid"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"snapGeom\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry[] snapGeom = GeometrySnapper.snap(remGeom[0], remGeom[1], snapTolerance);
red_line===
GeometrySnapper.snap(remGeom[0], remGeom[1], snapTolerance)
start_offset===
26
end_offset===
85
Python OUTPUT===
 Geometry[] snapGeom = GeometrySnapper.snap(remGeom[0], remGeom[1], snapTolerance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
ptSet.add(pts[i]);
red_line===
ptSet.add(pts[i]);
start_offset===
6
end_offset===
24
Python OUTPUT===
 ptSet.add(pts[i]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"snapTol\".
scn.ruleId===
1488
scn.suspCodeStr===
double snapTol = minDimension * SNAP_PRECISION_FACTOR;
red_line===
minDimension * SNAP_PRECISION_FACTOR
start_offset===
21
end_offset===
57
Python OUTPUT===
 double snapTol = minDimension * SNAP_PRECISION_FACTOR; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"snapTol\".
scn.ruleId===
1488
scn.suspCodeStr===
double snapTol = minSegLen / 10;
red_line===
minSegLen / 10
start_offset===
21
end_offset===
35
Python OUTPUT===
 double snapTol = minSegLen / 10; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"newPts\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate[] newPts = coordList.toCoordinateArray();
red_line===
coordList.toCoordinateArray()
start_offset===
26
end_offset===
55
Python OUTPUT===
 Coordinate[] newPts = coordList.toCoordinateArray(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List lineEdgesList    = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List lineEdgesList = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"snapTol\".
scn.ruleId===
1488
scn.suspCodeStr===
double snapTol = Math.max(tol0,  tol1);
red_line===
Math.max(tol0,  tol1)
start_offset===
21
end_offset===
42
Python OUTPUT===
 double snapTol = Math.max(tol0, tol1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"order\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int order = -1;
red_line===
order
start_offset===
14
end_offset===
19
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"coordList\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private CoordinateList coordList = new CoordinateList();
red_line===
coordList
start_offset===
24
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double pow4 = numPts / 3;
red_line===
/
start_offset===
23
end_offset===
24
Python OUTPUT===
 double pow4 = numPts  /  3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove these useless parentheses.
scn.ruleId===
1110
scn.suspCodeStr===
int pow2 = (int) ( (Math.log(numPoints)/Math.log(2)));
red_line===
(
start_offset===
23
end_offset===
24
Python OUTPUT===
 int pow2 = (int) ( (Ma.log(numPoints) / Math.log(2))); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
return (int) Math.pow(2, 2 *level);
red_line===
*
start_offset===
31
end_offset===
32
Python OUTPUT===
 return (int) Math.pow (2,2 *level);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double pow4 = numPts / 3;
red_line===
/
start_offset===
23
end_offset===
24
Python OUTPUT===
 double pow4 = numPts  /  3;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double x = orgX + xLen * Math.random();
red_line===
L
start_offset===
23
end_offset===
24
Python OUTPUT===
 double x = orgX + xLen * Math.random();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double y = orgY + yLen * Math.random();
red_line===
L
start_offset===
23
end_offset===
24
Python OUTPUT===
 double y = orgY + yLen * Math.random();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double rndAng = 2 * Math.PI * Math.random();
red_line===
M
start_offset===
23
end_offset===
24
Python OUTPUT===
 double rndAng = 2 * Math.PI * Math.random();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double rndRadius = Math.random();
red_line===
a
start_offset===
23
end_offset===
24
Python OUTPUT===
 double rndRadius = Math.random();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double x = env.getMinX() + env.getWidth() * Math.random();
red_line===
i
start_offset===
23
end_offset===
24
Python OUTPUT===
 double x = env.getMinX() + env.getWidth() * Math.random();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double y = env.getMinY() + env.getHeight() * Math.random();
red_line===
i
start_offset===
23
end_offset===
24
Python OUTPUT===
 double y = env.getMinY() + env.getHeight() * Math.random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"x\" to prevent any misunderstanding/clash with field \"X\".
scn.ruleId===
1845
scn.suspCodeStr===
public double x;
red_line===
x
start_offset===
16
end_offset===
17
Python OUTPUT===
 public double x; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"y\" to prevent any misunderstanding/clash with field \"Y\".
scn.ruleId===
1845
scn.suspCodeStr===
public double y;
red_line===
y
start_offset===
16
end_offset===
17
Python OUTPUT===
 public double y; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"invalidPoint\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Coordinate invalidPoint;
red_line===
invalidPoint
start_offset===
21
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List edgeEnds = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List edgeEnds = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double A2plusB2 = A*A + B*B;
red_line===
A2plusB2
start_offset===
11
end_offset===
19
Python OUTPUT===
 double A2plusB2 = A*A + B*B; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double B = p0.getX() - p1.getX();
red_line===
B
start_offset===
11
end_offset===
12
Python OUTPUT===
 double B = p0.getX() - p1.getX(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"intPt\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate intPt = Intersection.intersection(p0, p1, line.p0, line.p1);
red_line===
Intersection.intersection(p0, p1, line.p0, line.p1)
start_offset===
23
end_offset===
74
Python OUTPUT===
 Coordinate intPt = Intersection.intersection(p0, p1, line.p0, line.p1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if( maxp < minq )
        return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if( maxp < minq ) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (envmaxy < miny) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (envmaxy < miny) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List eeList = eeBuilder.computeEdgeEnds(geomGraph.getEdgeIterator());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List eeList = eeBuilder.computeEdgeEnds(geomGraph.getEdgeIterator()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public Iterator getNodeIterator() { return nodes.iterator(); }
red_line===
Iterator
start_offset===
9
end_offset===
17
Python OUTPUT===
 public Iterator getNodeIterator() { return nodes.iterator(); } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (equalsOriented(qe.sym()))
            return true;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (equalsOriented(qe.sym())) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"seg\" field final.
scn.ruleId===
1165
scn.suspCodeStr===
private LineSegment seg = null;
red_line===
seg
start_offset===
21
end_offset===
24
Python OUTPUT===
private final LineSegment seg = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List quadEdges = new ArrayList();
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 private List quadEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set vertices = new HashSet();
red_line===
Set
start_offset===
4
end_offset===
7
Python OUTPUT===
 Set vertices = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List edges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Stack edgeStack = new Stack();
red_line===
Stack
start_offset===
2
end_offset===
7
Python OUTPUT===
 Stack edgeStack = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set visitedVertices = new HashSet();
red_line===
Set
start_offset===
4
end_offset===
7
Python OUTPUT===
 Set visitedVertices = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List edges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set visitedEdges = new HashSet();
red_line===
Set
start_offset===
2
end_offset===
5
Python OUTPUT===
 Set visitedEdges = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = deStar.getEdges();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = deStar.getEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
PolygonizeDirectedEdge de = null;
red_line===
findLowestDirEdge();
start_offset===
42
end_offset===
62
Python OUTPUT===
 PolygonizeDirectedEdge de = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Stack nodeStack = new Stack();
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
 Stack nodeStack = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<Point> points = new ArrayList<Point>();
red_line===
<Point>
start_offset===
44
end_offset===
51
Python OUTPUT===
\u003c\u003e > points = new ArrayList < Point > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isNodeInBoth\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isNodeInBoth = isEdgeOfA && isEdgeOfB;
red_line===
isEdgeOfA && isEdgeOfB
start_offset===
27
end_offset===
49
Python OUTPUT===
 boolean isNodeInBoth = isEdgeOfA && isEdgeOfB; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"clipEnv\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Envelope clipEnv;
red_line===
clipEnv
start_offset===
19
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! getCoordinate(1).equals2D(edge2.getCoordinate(1)))
      return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (! getCoordinate(1).equals2D(edge2.getCoordinate(1))) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literals.
scn.ruleId===
1125
scn.suspCodeStr===
return cmp == -1 ? true : false;
red_line===
true
start_offset===
23
end_offset===
27
Python OUTPUT===
 return cmp == -1 ? trufalse; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"pts\" which hides the field declared at line 61.
scn.ruleId===
1117
scn.suspCodeStr===
Coordinate[] pts = getCoordinates();
red_line===
pts
start_offset===
17
end_offset===
20
Python OUTPUT===
 Coordinate[] ptsptsgetCoordinates(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edgeRingList = graph.getEdgeRings();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edgeRingList = graph.getEdgeRings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List validEdgeRingList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List validEdgeRingList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
invalidRingLines = new ArrayList();
red_line===
ArrayList
start_offset===
27
end_offset===
36
Python OUTPUT===
 invalidRingLines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if ( pts[ pts.length-1 ].equals2D(pts[ pts.length - 2 ])) return true;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if ( pts[ pts.length-1 ].equals2D(pts[ pts.length - 2 ])) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<Coordinate> resultCoords = new HashSet<Coordinate>();
red_line===
<Coordinate>
start_offset===
46
end_offset===
58
Python OUTPUT===
\u003c\u003e resultCoords = new HashSet < Coordinate > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Point> points = new ArrayList<Point>();
red_line===
<Point>
start_offset===
38
end_offset===
45
Python OUTPUT===
\u003c\u003e points = new ArrayList < Point > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Polygon> list = new ArrayList<Polygon>();
red_line===
<Polygon>
start_offset===
38
end_offset===
47
Python OUTPUT===
\u003c\u003e list = new ArrayList < Polygon > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ArrayList<Edge>(edgeMap.values());
red_line===
<Edge>
start_offset===
24
end_offset===
30
Python OUTPUT===
\u003c\u003e Edge > ( edgeMap.values ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<EdgeKey, Edge> edgeMap = new HashMap<EdgeKey, Edge>();
red_line===
<EdgeKey, Edge>
start_offset===
50
end_offset===
65
Python OUTPUT===
\u003c\u003e > edgeMap = new HashMap < EdgeKey , Edge > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (bDim == DIM_BOUNDARY && aDim == DIM_NOT_PART) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (bDim == DIM_BOUNDARY && aDim == DIM_NOT_PART) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (bDim == DIM_COLLAPSE && bLocLine == Location.INTERIOR) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (bDim == DIM_COLLAPSE && bLocLine == Location.INTERIOR) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (bDim == DIM_COLLAPSE && aDim == DIM_NOT_PART && aLocLine == Location.INTERIOR) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (bDim == DIM_COLLAPSE && aDim == DIM_NOT_PART && aLocLine == Location.INTERIOR) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOC_UNKNOWN\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static int LOC_UNKNOWN = Location.NONE;
red_line===
LOC_UNKNOWN
start_offset===
20
end_offset===
31
Python OUTPUT===
 public static int LLOC_UNKNOWN= Location.NONE; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<Coordinate, Point> map = new HashMap<Coordinate, Point>();
red_line===
<Coordinate, Point>
start_offset===
48
end_offset===
67
Python OUTPUT===
\u003c\u003e = new HashMap < Coordinate , Point > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<LineString> lines = new ArrayList<LineString>();
red_line===
<LineString>
start_offset===
48
end_offset===
60
Python OUTPUT===
\u003c\u003e > lines = new ArrayList < LineString > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"im\".
scn.ruleId===
1488
scn.suspCodeStr===
IntersectionMatrix im = relOp.getIntersectionMatrix();
red_line===
relOp.getIntersectionMatrix()
start_offset===
28
end_offset===
57
Python OUTPUT===
 IntersectionMatrix im = relOp.getIntersectionMatrix(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"im\".
scn.ruleId===
1488
scn.suspCodeStr===
IntersectionMatrix im = relOp.getIntersectionMatrix();
red_line===
relOp.getIntersectionMatrix()
start_offset===
28
end_offset===
57
Python OUTPUT===
 IntersectionMatrix im = relOp.getIntersectionMatrix(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList isolatedEdges = new ArrayList();
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList isolatedEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List ee0 = eeBuilder.computeEdgeEnds(arg[0].getEdgeIterator());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List ee0 = eeBuilder.computeEdgeEnds(arg[0].getEdgeIterator()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List ee1 = eeBuilder.computeEdgeEnds(arg[1].getEdgeIterator());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List ee1 = eeBuilder.computeEdgeEnds(arg[1].getEdgeIterator()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = node.getOutEdges().getEdges();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = node.getOutEdges().getEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = node.getOutEdges().getEdges();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = node.getOutEdges().getEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = node.getOutEdges().getEdges();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = node.getOutEdges().getEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List intNodes = findIntersectionNodes(de, label);
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List intNodes = findIntersectionNodes(de, label); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edgeRingStarts = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edgeRingStarts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected Collection dangles = new ArrayList();
red_line===
Collection
start_offset===
12
end_offset===
22
Python OUTPUT===
 protected Collection dangles = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List cutEdges = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List cutEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List invalidRingLines = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List invalidRingLines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List holeList = null;
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List holeList = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List shellList = null;
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List shellList = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List polyList = null;
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List polyList = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
polyList = new ArrayList();
red_line===
ArrayList
start_offset===
19
end_offset===
28
Python OUTPUT===
 polyList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VERBOSE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static boolean VERBOSE = false;
red_line===
VERBOSE
start_offset===
25
end_offset===
32
Python OUTPUT===
 private static boolean VVERBOSE= false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public DistanceToPointFinder() {
  }
red_line===
DistanceToPointFinder
start_offset===
9
end_offset===
30
Python OUTPUT===
 public DistanceToPointFinder() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"s1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private Coordinate s0, s1, s2;
red_line===
s1
start_offset===
25
end_offset===
27
Python OUTPUT===
 private Coordinate s0, s1, s2; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"maxCurveSegmentError\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private double maxCurveSegmentError = 0.0;
red_line===
maxCurveSegmentError
start_offset===
17
end_offset===
37
Python OUTPUT===
 private double m= 0.0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"maxCurveSegmentError\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private double maxCurveSegmentError = 0.0;
red_line===
maxCurveSegmentError
start_offset===
17
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"pts\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate[] pts = segList.getCoordinates();
red_line===
segList.getCoordinates()
start_offset===
23
end_offset===
47
Python OUTPUT===
 Coordinate[] pts = segList.getCoordinates(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 3-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
addCornerFillet(s1, offset0.p1, offset1.p0, orientation, distance);
red_line===
addCornerFillet(s1, offset0.p1, offset1.p0, orientation, distance);
start_offset===
6
end_offset===
73
Python OUTPUT===
 addCornerFillet(s1, offset0.p1, offset1.p0, orientation, distance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List linework = extracter.getLinework();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List linework = extracter.getLinework(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"linework\" which hides the field declared at line 46.
scn.ruleId===
1117
scn.suspCodeStr===
List linework = extracter.getLinework();
red_line===
linework
start_offset===
8
end_offset===
16
Python OUTPUT===
 List lilinework extracter.getLinework(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List linework;
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 private List linework; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
linework = new ArrayList();
red_line===
ArrayList
start_offset===
17
end_offset===
26
Python OUTPUT===
 linework = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isValid\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isValid = checkValid(overlayOp);
red_line===
checkValid(overlayOp)
start_offset===
22
end_offset===
43
Python OUTPUT===
 boolean isValid = checkValid(overlayOp); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List testCoords = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List testCoords = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isCovered(coord, resultPolyList)) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (isCovered(coord, resultPolyList)) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"result\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
Geometry result = null;
red_line===
result
start_offset===
13
end_offset===
19
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geomOv\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry geomOv = gov.getResultGeometry(opCode);
red_line===
gov.getResultGeometry(opCode)
start_offset===
22
end_offset===
51
Python OUTPUT===
 Geometry geomOv = gov.getResultGeometry(opCode); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List minEdgeRings = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List minEdgeRings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List resultPointList = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List resultPointList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<Polygon> polygons = new ArrayList<Polygon>();
red_line===
<Polygon>
start_offset===
48
end_offset===
57
Python OUTPUT===
\u003c\u003e > polygons = new ArrayList < Polygon > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (riVisitor.intersects())
      return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (riVisitor.intersects()) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return intersects == true;
red_line===
true
start_offset===
25
end_offset===
29
Python OUTPUT===
 return intersects == tru
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return containsPoint == true;
red_line===
true
start_offset===
28
end_offset===
32
Python OUTPUT===
 return containsPoint == tru
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literal.
scn.ruleId===
1125
scn.suspCodeStr===
return hasIntersection == true;
red_line===
true
start_offset===
30
end_offset===
34
Python OUTPUT===
 return hasIntersection == tru
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isContainedInBoundary(geom))
      return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (isContainedInBoundary(geom)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
15
end_offset===
19
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (startEdge.getFromNode().getDegree() == 1)
          flipSeq = true;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (startEdge.getFromNode().getDegree() == 1) flipSeq = true; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"startNode\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
DirectedEdge startDE = (DirectedEdge) startNode.getOutEdges().iterator().next();
red_line===
startNode.getOutEdges
start_offset===
42
end_offset===
63
Python OUTPUT===
 DirectedEdge startDE = (DirectedEdge) startNode.getOutEdges().iterator().next(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List directedEdges = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List directedEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection mergedLineStrings = null;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection mergedLineStrings = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection edgeStrings = null;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection edgeStrings = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
edgeStrings = new ArrayList();
red_line===
ArrayList
start_offset===
22
end_offset===
31
Python OUTPUT===
 edgeStrings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
mergedLineStrings = new ArrayList();
red_line===
ArrayList
start_offset===
28
end_offset===
37
Python OUTPUT===
 mergedLineStrings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List pts;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List pts; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = PolygonExtracter.getPolygons(polyGeom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = PolygonExtracter.getPolygons(polyGeom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List insideLocs = ConnectedElementLocationFilter.getLocations(geom[locationsIndex]);
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List insideLocs = ConnectedElementLocationFilter.getLocations(geom[locationsIndex]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines0 = LinearComponentExtracter.getLines(geom[0]);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines0 = LinearComponentExtracter.getLines(geom[0]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines1 = LinearComponentExtracter.getLines(geom[1]);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines1 = LinearComponentExtracter.getLines(geom[1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts0 = PointExtracter.getPoints(geom[0]);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List pts0 = PointExtracter.getPoints(geom[0]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts1 = PointExtracter.getPoints(geom[1]);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List pts1 = PointExtracter.getPoints(geom[1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
8
end_offset===
15
Python OUTPUT===
 return;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
locPtPoly[1] = new GeometryLocation(poly, pt);
red_line===
;
start_offset===
52
end_offset===
53
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List locations;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List locations; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List locations = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List locations = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List sections = computeFacetSequences(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List sections = computeFacetSequences(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
final List sections = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 final List sections = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"norm\".
scn.ruleId===
1488
scn.suspCodeStr===
Vector3D norm = Vector3D.create(sum).normalize();
red_line===
Vector3D.create(sum).normalize()
start_offset===
18
end_offset===
50
Python OUTPUT===
 Vector3D norm = Vector3D.create(sum).normalize(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map endpointMap;
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map endpointMap; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List bdyPts = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List bdyPts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
endpointMap = new TreeMap();
red_line===
TreeMap
start_offset===
22
end_offset===
29
Python OUTPUT===
 endpointMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map.Entry entry = (Map.Entry) it.next();
red_line===
Entry
start_offset===
10
end_offset===
15
Python OUTPUT===
 Map.Entry entry = (Map.Entry) it.next(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\".
scn.ruleId===
3824
scn.suspCodeStr===
Counter counter = (Counter) endpointMap.get(pt);
red_line===
endpointMap.get(pt)
start_offset===
32
end_offset===
51
Python OUTPUT===
Counter counter = ( Counter ) endpointMap.get ( pt ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set points = new TreeSet();
red_line===
Set
start_offset===
4
end_offset===
7
Python OUTPUT===
 Set points = new TreeSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List rings = LinearComponentExtracter.getLines(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List rings = LinearComponentExtracter.getLines(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map endPoints = new TreeMap();
red_line===
Map
start_offset===
4
end_offset===
7
Python OUTPUT===
 Map endPoints = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (hasClosedEndpointIntersection(graph)) return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if (hasClosedEndpointIntersection(graph)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\".
scn.ruleId===
3824
scn.suspCodeStr===
EndpointInfo eiInfo = (EndpointInfo) endPoints.get(p);
red_line===
endPoints.get(p)
start_offset===
41
end_offset===
57
Python OUTPUT===
EndpointInfo eiInfo = ( EndpointInfo ) endPoints.get ( p ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove these useless parentheses.
scn.ruleId===
1110
scn.suspCodeStr===
int pow2 = (int) ( (Math.log(numPoints)/Math.log(2)));
red_line===
(
start_offset===
23
end_offset===
24
Python OUTPUT===
 int pow2 = (int) ( (Ma.log(numPoints) / Math.log(2))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
long A = a | (b >> 1);
red_line===
A
start_offset===
9
end_offset===
10
Python OUTPUT===
 long A = a | (b >> 1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
long B = (a >> 1) ^ a;
red_line===
B
start_offset===
9
end_offset===
10
Python OUTPUT===
 long B = (a >> 1) ^ a; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
long C = ((c >> 1) ^ (b & (d >> 1))) ^ c;
red_line===
C
start_offset===
9
end_offset===
10
Python OUTPUT===
 long C = ((c >> 1) ^ (b & (d >> 1))) ^ c; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
long D = ((a & (c >> 1)) ^ (d >> 1)) ^ d;
red_line===
D
start_offset===
9
end_offset===
10
Python OUTPUT===
 long D = ((a & (c >> 1)) ^ (d >> 1)) ^ d; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
return (int) Math.pow(2, 2 *level);
red_line===
*
start_offset===
31
end_offset===
32
Python OUTPUT===
 return (int) Math.pow (2,2 *level);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"z\" to prevent any misunderstanding/clash with field \"Z\".
scn.ruleId===
1845
scn.suspCodeStr===
public double z;
red_line===
z
start_offset===
16
end_offset===
17
Python OUTPUT===
 public double z; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"Coordinate\".
scn.ruleId===
1905
scn.suspCodeStr===
Coordinate other = (Coordinate) o;
red_line===
Coordinate
start_offset===
24
end_offset===
34
Python OUTPUT===
 Coordinate other = ( )o;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Return a non null object.
scn.ruleId===
2225
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
13
end_offset===
17
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Invalid ordinate index: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new IllegalArgumentException("Invalid ordinate index: " + M);
red_line===
"Invalid ordinate index: "
start_offset===
39
end_offset===
65
Python OUTPUT===
 throw new IllegalArgumentException("Invalid ordinate index: " + M); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"coord\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate coord = (Coordinate) super.clone();
red_line===
(Coordinate) super.clone()
start_offset===
25
end_offset===
51
Python OUTPUT===
 Coordinate coord = (Coordinate) super.clone(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"compZ\".
scn.ruleId===
1488
scn.suspCodeStr===
int compZ = compare(c1.getZ(), c2.getZ());
red_line===
compare(c1.getZ(), c2.getZ())
start_offset===
18
end_offset===
47
Python OUTPUT===
 int compZ = compare(c1.getZ(), c2.getZ()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make z a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double z;
red_line===
z
start_offset===
16
end_offset===
17
Python OUTPUT===
public static final double z ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Parameters to isTouches have the same names but not the same order as the method arguments.
scn.ruleId===
2234
scn.suspCodeStr===
return isTouches(dimensionOfGeometryB, dimensionOfGeometryA);
red_line===
(dimensionOfGeometryB, dimensionOfGeometryA)
start_offset===
22
end_offset===
66
Python OUTPUT===
 return isTouches(dimensionOfGeometryB, dimensionOfGeometryA); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List coords = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List coords = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List coords;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List coords; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make y a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double y;
red_line===
y
start_offset===
16
end_offset===
17
Python OUTPUT===
public static final double y ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection lines;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection lines; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
return getLines(geom, new ArrayList());
red_line===
ArrayList
start_offset===
30
end_offset===
39
Python OUTPUT===
 return getLines(geom, new ArrayList()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List comps;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List comps; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List mapped = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List mapped = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List mapped = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List mapped = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List list = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List list = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List list = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List list = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection inputGeoms;
red_line===
Collection
start_offset===
9
end_offset===
19
Python OUTPUT===
 private Collection inputGeoms; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
20
end_offset===
40
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon poly = geomFact.createPolygon(ring);
red_line===
geomFact.createPolygon(ring)
start_offset===
19
end_offset===
47
Python OUTPUT===
 Polygon poly = geomFact.createPolygon(ring); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public ShortCircuitedGeometryVisitor() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList holes = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList holes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList geometries = new ArrayList(); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"result\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
result.setUserData(geometry.getUserData());
red_line===
result.setUserData
start_offset===
6
end_offset===
24
Python OUTPUT===
 result.setUserData(geometry.getUserData()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Unsupported class");
red_line===
RuntimeException
start_offset===
11
end_offset===
27
Python OUTPUT===
 throw new RuntimeException("Unsupported class"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
return extract(geom, clz, new ArrayList());
red_line===
ArrayList
start_offset===
34
end_offset===
43
Python OUTPUT===
 return extract(geom, clz, new ArrayList()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
return extract(geom, geometryType, new ArrayList());
red_line===
ArrayList
start_offset===
43
end_offset===
52
Python OUTPUT===
 return extract(geom, geometryType, new ArrayList()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List comps;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List comps; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (geometryType == Geometry.TYPENAME_LINESTRING
      && geom.getGeometryType() == Geometry.TYPENAME_LINEARRING) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (geometryType == Geometry.TYPENAME_LINESTRING && geom.getGeometryType() == Geometry.TYPENAME_LINEARRING) return true; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Return a non null object.
scn.ruleId===
2225
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
10
end_offset===
14
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List mapped = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List mapped = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List transGeomList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List transGeomList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List transGeomList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List transGeomList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList holes = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList holes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List components = new ArrayList();
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List components = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List transGeomList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List transGeomList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List transGeomList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List transGeomList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public GeometryTransformer() {
  }
red_line===
GeometryTransformer
start_offset===
9
end_offset===
28
Python OUTPUT===
 public GeometryTransformer() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"preserveCollections\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private boolean preserveCollections = false;
red_line===
preserveCollections
start_offset===
18
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"m01\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private double m00, m01, m02, m10, m11, m12;
red_line===
m01
start_offset===
22
end_offset===
25
Python OUTPUT===
 private double m00, m01, m02, m10, m11, m12; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
return getPolygons(geom, new ArrayList());
red_line===
ArrayList
start_offset===
33
end_offset===
42
Python OUTPUT===
 return getPolygons(geom, new ArrayList()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List comps;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List comps; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
return getPoints(geom, new ArrayList());
red_line===
ArrayList
start_offset===
31
end_offset===
40
Python OUTPUT===
 return getPoints(geom, new ArrayList()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List pts;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List pts; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 2-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
return segIntFinder;
red_line===
return segIntFinder;
start_offset===
4
end_offset===
24
Python OUTPUT===
 return segIntFinder; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 2-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
return PreparedLineStringIntersects.intersects(this, g);
red_line===
return PreparedLineStringIntersects.intersects(this, g);
start_offset===
4
end_offset===
60
Python OUTPUT===
 return PreparedLineStringIntersects.intersects(this, g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isSingleShell(prepPoly.getGeometry())) return true;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (isSingleShell(prepPoly.getGeometry())) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (numHoles == 0) return true;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (numHoles == 0) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isAnyInTargetInterior\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isAnyInTargetInterior = isAnyTestPointInTargetInterior(geom);
red_line===
isAnyTestPointInTargetInterior(geom)
start_offset===
38
end_offset===
74
Python OUTPUT===
 boolean isAnyInTargetInterior = isAnyTestPointInTargetInterior(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private final List representativePts;
red_line===
List
start_offset===
16
end_offset===
20
Python OUTPUT===
 private final List representativePts; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! baseGeom.getEnvelopeInternal().intersects(g.getEnvelopeInternal()))
      return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (! baseGeom.getEnvelopeInternal().intersects(g.getEnvelopeInternal())) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! baseGeom.getEnvelopeInternal().covers(g.getEnvelopeInternal()))
      return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (! baseGeom.getEnvelopeInternal().covers(g.getEnvelopeInternal())) return false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean result = prepPoly.getGeometry().covers(geom);
red_line===
prepPoly.getGeometry().covers(geom)
start_offset===
19
end_offset===
54
Python OUTPUT===
 boolean result = prepPoly.getGeometry().covers(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public PreparedGeometryFactory() {
  }
red_line===
PreparedGeometryFactory
start_offset===
9
end_offset===
32
Python OUTPUT===
 public PreparedGeometryFactory() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isContained\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isContained = prepPoly.getGeometry().contains(geom);
red_line===
prepPoly.getGeometry().contains(geom)
start_offset===
24
end_offset===
61
Python OUTPUT===
 boolean isContained = prepPoly.getGeometry().contains(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 6-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
return isAnyTargetComponentInTest(g);
red_line===
return isAnyTargetComponentInTest(g);
start_offset===
4
end_offset===
41
Python OUTPUT===
 return isAnyTargetComponentInTest(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lineSegStr = SegmentStringUtil.extractSegmentStrings(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List coords = ComponentCoordinateExtracter.getCoordinates(testGeom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List coords = ComponentCoordinateExtracter.getCoordinates(testGeom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List coords = ComponentCoordinateExtracter.getCoordinates(testGeom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List coords = ComponentCoordinateExtracter.getCoordinates(testGeom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List coords = ComponentCoordinateExtracter.getCoordinates(testGeom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List coords = ComponentCoordinateExtracter.getCoordinates(testGeom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List coords = ComponentCoordinateExtracter.getCoordinates(testGeom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List coords = ComponentCoordinateExtracter.getCoordinates(testGeom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
this.coords[i] = coords[i];
red_line===
this.coords[i] = coords[i];
start_offset===
8
end_offset===
35
Python OUTPUT===
 this.coords[i] = coords[i]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
coordRef = new SoftReference<Coordinate[]>(coords);
red_line===
<Coordinate[]>
start_offset===
32
end_offset===
46
Python OUTPUT===
\u003c\u003e [ ] > ( coords ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static Coordinate[] coordArrayType = new Coordinate[0];
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final Coordinate [ ] coordArrayType = new Coordinate [ 0 ] ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"Coordinate\".
scn.ruleId===
1905
scn.suspCodeStr===
add((Coordinate) obj, allowRepeated);
red_line===
Coordinate
start_offset===
9
end_offset===
19
Python OUTPUT===
 add((Coobj, allowRepeated); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (diff == 2) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (diff == 2) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList allRings = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList allRings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SQRT2\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static double SQRT2 = Math.sqrt(2.0);
red_line===
SQRT2
start_offset===
24
end_offset===
29
Python OUTPUT===
 private static double SSQRT2= Math.sqrt(2.0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (maxB < other.minB) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (maxB < other.minB) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (maxB < B) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (maxB < B) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double A = computeA(x, y);
red_line===
A
start_offset===
11
end_offset===
12
Python OUTPUT===
 double A = computeA(x, y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double B = computeB(x, y);
red_line===
B
start_offset===
11
end_offset===
12
Python OUTPUT===
 double B = computeB(x, y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double A = computeA(p.x, p.y);
red_line===
A
start_offset===
11
end_offset===
12
Python OUTPUT===
 double A = computeA(p.x, p.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double B = computeB(p.x, p.y);
red_line===
B
start_offset===
11
end_offset===
12
Python OUTPUT===
 double B = computeB(p.x, p.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"p1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
public Coordinate p0, p1, p2;
red_line===
p1
start_offset===
24
end_offset===
26
Python OUTPUT===
 public Coordinate p0, p1, p2; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (!Angle.isAcute(c, a, b))
      return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (!Angle.isAcute(c, a, b)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"splitPt\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate splitPt = new Coordinate(a.x + frac * dx, a.y + frac * dy);
red_line===
new Coordinate(a.x + frac * dx, a.y + frac * dy)
start_offset===
25
end_offset===
73
Python OUTPUT===
 Coordinate splitPt = new Coordinate(a.x + frac * dx, a.y + frac * dy); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"area3D\".
scn.ruleId===
1488
scn.suspCodeStr===
double area3D = Math.sqrt(absSq) / 2;
red_line===
Math.sqrt(absSq) / 2
start_offset===
20
end_offset===
40
Python OUTPUT===
 double area3D = Math.sqrt(absSq) / 2; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"z\".
scn.ruleId===
1488
scn.suspCodeStr===
double z = v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ());
red_line===
v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ())
start_offset===
15
end_offset===
84
Python OUTPUT===
 double z = v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make p0 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Coordinate p0, p1, p2;
red_line===
p0
start_offset===
20
end_offset===
22
Python OUTPUT===
public static final Coordinate p0 , p1 , p2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"m\" to prevent any misunderstanding/clash with field \"M\".
scn.ruleId===
1845
scn.suspCodeStr===
protected double m;
red_line===
m
start_offset===
19
end_offset===
20
Python OUTPUT===
 protected double m; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private static Map nameToTypeMap = new HashMap();
red_line===
Map
start_offset===
19
end_offset===
22
Python OUTPUT===
 private static Map nameToTypeMap = new HashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public final static double maximumPreciseValue = 9007199254740992.0;
red_line===
maximumPreciseValue
start_offset===
29
end_offset===
48
Python OUTPUT===
 public final static double maximumPreciseValue = 9007199254740992.0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static double maximumPreciseValue = 9007199254740992.0;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final double maximumPreciseValue = 9007199254740992.0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return 0;
red_line===
0
start_offset===
11
end_offset===
12
Python OUTPUT===
 return 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return 0;
red_line===
0
start_offset===
11
end_offset===
12
Python OUTPUT===
 return 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
return (double) floatSingleVal;
red_line===
double
start_offset===
12
end_offset===
18
Python OUTPUT===
 return (douloatSingleVal; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"external\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate external = new Coordinate(internal);
red_line===
new Coordinate(internal)
start_offset===
26
end_offset===
50
Python OUTPUT===
 Coordinate external = new Coordinate(internal); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int P = 0;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int P = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int L = 1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int L = 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int A = 2;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int A = 2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int FALSE = -1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int FALSE = - 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int TRUE = -2;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int TRUE = - 2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int DONTCARE = -3;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int DONTCARE = - 3 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static char SYM_FALSE = 'F';
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final char SYM_FALSE = ' F ' ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static char SYM_TRUE = 'T';
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final char SYM_TRUE = ' T ' ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static char SYM_DONTCARE = '*';
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final char SYM_DONTCARE = ' * ' ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static char SYM_P = '0';
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final char SYM_P = ' 0 ' ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static char SYM_L = '1';
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final char SYM_L = ' 1 ' ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static char SYM_A = '2';
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final char SYM_A = ' 2 ' ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
TreeSet theseElements = new TreeSet(Arrays.asList(geometries));
red_line===
TreeSet
start_offset===
4
end_offset===
11
Python OUTPUT===
 TreeSet theseElements = new TreeSet(Arrays.asList(geometries)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
TreeSet otherElements = new TreeSet(Arrays.asList(((GeometryCollection) o).geometries));
red_line===
TreeSet
start_offset===
4
end_offset===
11
Python OUTPUT===
 TreeSet otherElements = new TreeSet(Arrays.asList(((GeometryCollection) o).geometries)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometries\" which hides the field declared at line 37.
scn.ruleId===
1117
scn.suspCodeStr===
Geometry[] geometries = new Geometry[this.geometries.length];
red_line===
geometries
start_offset===
15
end_offset===
25
Python OUTPUT===
 Geometry[] geogeometriesnew Geometry[this.geometries.length]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometries\" which hides the field declared at line 37.
scn.ruleId===
1117
scn.suspCodeStr===
Geometry[] geometries = new Geometry[this.geometries.length];
red_line===
geometries
start_offset===
15
end_offset===
25
Python OUTPUT===
 Geometry[] geogeometriesnew Geometry[this.geometries.length]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"shell\" which hides the field declared at line 59.
scn.ruleId===
1117
scn.suspCodeStr===
LinearRing shell = (LinearRing) getExteriorRing().reverse();
red_line===
shell
start_offset===
15
end_offset===
20
Python OUTPUT===
 LinearRing sheshell(LinearRing) getExteriorRing().reverse(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"holes\" which hides the field declared at line 66.
scn.ruleId===
1117
scn.suspCodeStr===
LinearRing[] holes = new LinearRing[getNumInteriorRing()];
red_line===
holes
start_offset===
17
end_offset===
22
Python OUTPUT===
 LinearRing[] holholesnew LinearRing[getNumInteriorRing()]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int INTERIOR = 0;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int INTERIOR = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int BOUNDARY = 1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int BOUNDARY = 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int EXTERIOR = 2;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int EXTERIOR = 2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int NONE = -1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NONE = - 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class geomClass = null;
red_line===
Class
start_offset===
4
end_offset===
9
Python OUTPUT===
 Class geomClass = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class partClass = geom.getClass();
red_line===
Class
start_offset===
6
end_offset===
11
Python OUTPUT===
 Class partClass = geom.getClass(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SRID\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private int SRID;
red_line===
SRID
start_offset===
14
end_offset===
18
Python OUTPUT===
 private int SSRID 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"pt\" field final.
scn.ruleId===
1165
scn.suspCodeStr===
private Coordinate pt = null;
red_line===
pt
start_offset===
21
end_offset===
23
Python OUTPUT===
private final Coordinate pt = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator i = a.iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator i = a.iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator j = b.iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator j = b.iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Comparable aElement = (Comparable) i.next();
red_line===
Comparable
start_offset===
6
end_offset===
16
Python OUTPUT===
 Comparable aElement = (Comparable) i.next(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Comparable bElement = (Comparable) j.next();
red_line===
Comparable
start_offset===
6
end_offset===
16
Python OUTPUT===
 Comparable bElement = (Comparable) j.next(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SRID\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int SRID;
red_line===
SRID
start_offset===
16
end_offset===
20
Python OUTPUT===
 protected int SSRID 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make \"userData\" transient or serializable.
scn.ruleId===
1948
scn.suspCodeStr===
private Object userData = null;
red_line===
userData
start_offset===
17
end_offset===
25
Python OUTPUT===
private final Object userData = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return 1;
red_line===
1
start_offset===
11
end_offset===
12
Python OUTPUT===
 return 1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return 0.0;
red_line===
0.0
start_offset===
11
end_offset===
14
Python OUTPUT===
 return 0.0
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return 0.0;
red_line===
0.0
start_offset===
11
end_offset===
14
Python OUTPUT===
 return 0.0
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Return a non null object.
scn.ruleId===
2225
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
13
end_offset===
17
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use \"isAssignableFrom\" instead.
scn.ruleId===
1872
scn.suspCodeStr===
return this.getClass().getName().equals(other.getClass().getName());
red_line===
this.getClass().getName().equals(other.getClass().getName())
start_offset===
11
end_offset===
71
Python OUTPUT===
 return this.getClass().getName().equals(other.getClass().getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
abstract protected int getTypeCode();
red_line===
protected
start_offset===
11
end_offset===
20
Python OUTPUT===
protected abstract final int getTypeCode ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OVERLAY_PROPERTY_NAME\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String OVERLAY_PROPERTY_NAME = "jts.overlay";
red_line===
OVERLAY_PROPERTY_NAME
start_offset===
23
end_offset===
44
Python OUTPUT===
 public static String OOVERLAY_PROPERTY_NAME= "jts.overlay"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OVERLAY_PROPERTY_VALUE_NG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String OVERLAY_PROPERTY_VALUE_NG = "ng";
red_line===
OVERLAY_PROPERTY_VALUE_NG
start_offset===
23
end_offset===
48
Python OUTPUT===
 public static String OOVERLAY_PROPERTY_VALUE_NG= "ng"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OVERLAY_PROPERTY_VALUE_OLD\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String OVERLAY_PROPERTY_VALUE_OLD = "old";
red_line===
OVERLAY_PROPERTY_VALUE_OLD
start_offset===
23
end_offset===
49
Python OUTPUT===
 public static String OOVERLAY_PROPERTY_VALUE_OLD= "old"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OVERLAY_NG_DEFAULT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static boolean OVERLAY_NG_DEFAULT = false;
red_line===
OVERLAY_NG_DEFAULT
start_offset===
24
end_offset===
42
Python OUTPUT===
 public static boolean OOVERLAY_NG_DEFAULT= false; 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Correct one of the identical sub-expressions on both sides of operator \"\u0026\u0026\"
scn.ruleId===
1764
scn.suspCodeStr===
if (b.isEmpty() && b.isEmpty())
        return OverlayOp.createEmptyResult(OverlayOp.UNION, a, b, a.getFactory());
red_line===
b.isEmpty()
start_offset===
25
end_offset===
36
Python OUTPUT===
\u0026\u0026 ) && b.isEmpty ( ) ) return OverlayOp.createEmptyResult ( OverlayOp.UNION , a , b , a.getFactory ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make OVERLAY_PROPERTY_NAME a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String OVERLAY_PROPERTY_NAME = "jts.overlay";
red_line===
OVERLAY_PROPERTY_NAME
start_offset===
23
end_offset===
44
Python OUTPUT===
public static final String OVERLAY_PROPERTY_NAME = " jts.overlay " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make OVERLAY_PROPERTY_VALUE_NG a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String OVERLAY_PROPERTY_VALUE_NG = "ng";
red_line===
OVERLAY_PROPERTY_VALUE_NG
start_offset===
23
end_offset===
48
Python OUTPUT===
public static final String OVERLAY_PROPERTY_VALUE_NG = " ng " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make OVERLAY_PROPERTY_VALUE_OLD a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String OVERLAY_PROPERTY_VALUE_OLD = "old";
red_line===
OVERLAY_PROPERTY_VALUE_OLD
start_offset===
23
end_offset===
49
Python OUTPUT===
public static final String OVERLAY_PROPERTY_VALUE_OLD = " old " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make OVERLAY_NG_DEFAULT a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static boolean OVERLAY_NG_DEFAULT = false;
red_line===
OVERLAY_NG_DEFAULT
start_offset===
24
end_offset===
42
Python OUTPUT===
public static final boolean OVERLAY_NG_DEFAULT = false ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static Coordinate[] coordArrayType = new Coordinate[0];
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final Coordinate [ ] coordArrayType = new Coordinate [ 0 ] ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Coordinate copy[] = (Coordinate[]) Array.newInstance(coordinateType, array.length);
red_line===
[]
start_offset===
21
end_offset===
23
Python OUTPUT===
 Coordinate copy[] = (Coordinate[]) Array.newInstance(coordinateType, array.length); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (!pts[0].equals2D(pts[pts.length - 1])) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (!pts[0].equals2D(pts[pts.length - 1])) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private LinkedList triQueue = new LinkedList();
red_line===
LinkedList
start_offset===
12
end_offset===
22
Python OUTPUT===
 private LinkedList triQueue = new LinkedList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public EdgeConnectedTriangleTraversal() {}
red_line===
EdgeConnectedTriangleTraversal
start_offset===
11
end_offset===
41
Python OUTPUT===
 public EdgeConnectedTriangleTraversal() {} 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("a: " + a + "  b: " + b + "  c: " + c);
red_line===
System.err
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.err.println("a: " + a + " b: " + b + " c: " + c); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(nre);
red_line===
System.err
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.err.println(nre); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"z\".
scn.ruleId===
1488
scn.suspCodeStr===
double z = v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ());
red_line===
v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ())
start_offset===
19
end_offset===
88
Python OUTPUT===
 double z = v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"z\".
scn.ruleId===
1488
scn.suspCodeStr===
double z = v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ());
red_line===
v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ())
start_offset===
19
end_offset===
88
Python OUTPUT===
 double z = v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"pz\".
scn.ruleId===
1488
scn.suspCodeStr===
double pz = p0.getZ() + dz * (ptLen / segLen);
red_line===
p0.getZ() + dz * (ptLen / segLen)
start_offset===
20
end_offset===
53
Python OUTPUT===
 double pz = p0.getZ() + dz * (ptLen / segLen); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Stack edgeStack = new Stack();
red_line===
Stack
start_offset===
2
end_offset===
7
Python OUTPUT===
 Stack edgeStack = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set visitedEdges = new HashSet();
red_line===
Set
start_offset===
2
end_offset===
5
Python OUTPUT===
 Set visitedEdges = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List triList = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List triList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List triList = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List triList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List triCoords = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List triCoords = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List quadEdges = getPrimaryEdges(false);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List quadEdges = getPrimaryEdges(false); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List triPtsList = getTriangleCoordinates(false);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List triPtsList = getTriangleCoordinates(false); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List vorCells = getVoronoiCellPolygons(geomFact);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List vorCells = getVoronoiCellPolygons(geomFact); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List cells = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List cells = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection edges = getVertexUniqueEdges(false);
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection edges = getVertexUniqueEdges(false); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List cellPts = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List cellPts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".
scn.ruleId===
1149
scn.suspCodeStr===
Stack edgeStack = new Stack();
red_line===
Stack
start_offset===
2
end_offset===
7
Python OUTPUT===
Deque edgeStack = new Deque ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static double EDGE_COINCIDENCE_TOL_FACTOR = 1000;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
private static final double EDGE_COINCIDENCE_TOL_FACTOR = 1000 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"offset\".
scn.ruleId===
1854
scn.suspCodeStr===
double offset = 0.0;
red_line===
= 0.0
start_offset===
16
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isFrameVertex(e.orig()) || isFrameVertex(e.dest()))
			return true;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (isFrameVertex(e.orig()) || isFrameVertex(e.dest())) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isFrameVertex(vRightTriOther))
			return true;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (isFrameVertex(vRightTriOther)) return true; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (v.equals(frameVertex[2]))
			return true;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (v.equals(frameVertex[2])) return true; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TriangleCircumcentreVisitor() {
		}
red_line===
TriangleCircumcentreVisitor
start_offset===
9
end_offset===
36
Python OUTPUT===
 public TriangleCircumcentreVisitor() { } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"triEdges\" which hides the field declared at line 670.
scn.ruleId===
1117
scn.suspCodeStr===
QuadEdge[] triEdges = fetchTriangleToVisit(edge, edgeStack,
						includeFrame, visitedEdges);
red_line===
triEdges
start_offset===
15
end_offset===
23
Python OUTPUT===
 QuadEdge[] tritriEdgesfetchTriangleToVisit(edge, edgeStack, includeFrame, visitedEdges); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TriangleCoordinatesVisitor() {
		}
red_line===
TriangleCoordinatesVisitor
start_offset===
9
end_offset===
35
Python OUTPUT===
 public TriangleCoordinatesVisitor() { } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"loc\".
scn.ruleId===
1854
scn.suspCodeStr===
loc = WKTWriter.toLineString(pts[0], pts[1]);
red_line===
= WKTWriter.toLineString(pts[0], pts[1])
start_offset===
8
end_offset===
48
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"loc\".
scn.ruleId===
1854
scn.suspCodeStr===
if (pts.length >= 1)
					loc = WKTWriter.toPoint(pts[0]);
red_line===
= WKTWriter.toPoint(pts[0])
start_offset===
9
end_offset===
36
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"loc\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String loc = "";
red_line===
loc
start_offset===
10
end_offset===
13
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"quadEdges\" which hides the field declared at line 88.
scn.ruleId===
1117
scn.suspCodeStr===
List quadEdges = getPrimaryEdges(false);
red_line===
quadEdges
start_offset===
7
end_offset===
16
Python OUTPUT===
 List qquadEdges= getPrimaryEdges(false); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(coordList);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(coordList); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List incEdge = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List incEdge = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List adjTris = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List adjTris = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List triangles = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List triangles = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"index\".
scn.ruleId===
1854
scn.suspCodeStr===
return index = (index + 1) % 3;
red_line===
= (index + 1) % 3
start_offset===
15
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public QuadEdgeTriangleBuilderVisitor() {
		}
red_line===
QuadEdgeTriangleBuilderVisitor
start_offset===
9
end_offset===
39
Python OUTPUT===
 public QuadEdgeTriangleBuilderVisitor() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract the assignment out of this expression.
scn.ruleId===
1121
scn.suspCodeStr===
return index = (index + 1) % 3;
red_line===
=
start_offset===
15
end_offset===
16
Python OUTPUT===
 return index = (index + 1) % 3; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"tri\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon tri = fact.createPolygon(ring);
red_line===
fact.createPolygon(ring)
start_offset===
16
end_offset===
40
Python OUTPUT===
 Polygon tri = fact.createPolygon(ring); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"tri\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon tri = fact.createPolygon(ring);
red_line===
fact.createPolygon(ring)
start_offset===
16
end_offset===
40
Python OUTPUT===
 Polygon tri = fact.createPolygon(ring); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"tri\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon tri = fact.createPolygon(ring);
red_line===
fact.createPolygon(ring)
start_offset===
16
end_offset===
40
Python OUTPUT===
 Polygon tri = fact.createPolygon(ring); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(WKTWriter.toLineString(new CoordinateArraySequence(
        new Coordinate[] { a, b, c, p })));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(WKTWriter.toLineString(new CoordinateArraySequence( new Coordinate[] { a, b, c, p }))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Circumcentre = " + WKTWriter.toPoint(circumCentre)
        + " radius = " + a.distance(circumCentre));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Circumcentre = " + WKTWriter.toPoint(circumCentre) + " radius = " + a.distance(circumCentre)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("p radius diff a = "
        + Math.abs(p.distance(circumCentre)/a.distance(circumCentre) - 1));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("p radius diff a = " + Math.abs(p.distance(circumCentre)/a.distance(circumCentre) - 1)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("p radius diff b = "
        + Math.abs(p.distance(circumCentre)/b.distance(circumCentre) - 1));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("p radius diff b = " + Math.abs(p.distance(circumCentre)/b.distance(circumCentre) - 1)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("p radius diff c = "
        + Math.abs(p.distance(circumCentre)/c.distance(circumCentre) - 1));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("p radius diff c = " + Math.abs(p.distance(circumCentre)/c.distance(circumCentre) - 1)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isInCircle\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isInCircle = sum.doubleValue() > 0;
red_line===
sum.doubleValue() > 0
start_offset===
25
end_offset===
46
Python OUTPUT===
 boolean isInCircle = sum.doubleValue() > 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isInCircle\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isInCircle = sum.doubleValue() > 0;
red_line===
sum.doubleValue() > 0
start_offset===
25
end_offset===
46
Python OUTPUT===
 boolean isInCircle = sum.doubleValue() > 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isInCircle\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isInCircle = sum.doubleValue() > 0;
red_line===
sum.doubleValue() > 0
start_offset===
25
end_offset===
46
Python OUTPUT===
 boolean isInCircle = sum.doubleValue() > 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection siteCoords;
red_line===
Collection
start_offset===
9
end_offset===
19
Python OUTPUT===
 private Collection siteCoords; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List vertices = DelaunayTriangulationBuilder.toVertices(siteCoords);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List vertices = DelaunayTriangulationBuilder.toVertices(siteCoords); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List clipped = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List clipped = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection siteCoords;
red_line===
Collection
start_offset===
9
end_offset===
19
Python OUTPUT===
 private Collection siteCoords; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isUsingTolerance\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private boolean isUsingTolerance = false;
red_line===
isUsingTolerance
start_offset===
17
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map coordDataMap = new TreeMap();
red_line===
Map
start_offset===
9
end_offset===
12
Python OUTPUT===
 private Map coordDataMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
return new ArrayList(coordDataMap.keySet());
red_line===
ArrayList
start_offset===
13
end_offset===
22
Python OUTPUT===
 return new ArrayList(coordDataMap.keySet()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public NonEncroachingSplitPointFinder() {}
red_line===
NonEncroachingSplitPointFinder
start_offset===
11
end_offset===
41
Python OUTPUT===
 public NonEncroachingSplitPointFinder() {} 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
double nonEncroachDiam = projPt.distance(encroachPt) * 2 * 0.8;
red_line===
.99;
start_offset===
75
end_offset===
79
Python OUTPUT===
 double nonEncroachDiam = projPt.distance(encroachPt) * 2 * 0.8; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"projPt\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate projPt = lineSeg.project(encroachPt);
red_line===
lineSeg.project(encroachPt)
start_offset===
28
end_offset===
55
Python OUTPUT===
 Coordinate projPt = lineSeg.project(encroachPt); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"pt\" field final.
scn.ruleId===
1165
scn.suspCodeStr===
private Coordinate pt = null;
red_line===
pt
start_offset===
23
end_offset===
25
Python OUTPUT===
private final Coordinate pt = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List verts = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List verts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List vertices = toVertices(siteCoords);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List vertices = toVertices(siteCoords); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"coordList\".
scn.ruleId===
1488
scn.suspCodeStr===
CoordinateList coordList = new CoordinateList(coordsCopy, false);
red_line===
new CoordinateList(coordsCopy, false)
start_offset===
29
end_offset===
66
Python OUTPUT===
 CoordinateList coordList = new CoordinateList(coordsCopy, false); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List initialVertices;
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 private List initialVertices; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List segVertices;
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 private List segVertices; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List segments = new ArrayList();
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 private List segments = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
this.initialVertices = new ArrayList(initialVertices);
red_line===
ArrayList
start_offset===
29
end_offset===
38
Python OUTPUT===
 this.initialVertices = new ArrayList(initialVertices); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List newSegments = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List newSegments = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segsToRemove = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List segsToRemove = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = kdt.query(env);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List result = kdt.query(env); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int MAX_SPLIT_ITER = 99;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
private static final int MAX_SPLIT_ITER = 99 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection siteCoords;
red_line===
Collection
start_offset===
9
end_offset===
19
Python OUTPUT===
 private Collection siteCoords; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map constraintVertexMap = new TreeMap();
red_line===
Map
start_offset===
9
end_offset===
12
Python OUTPUT===
 private Map constraintVertexMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segments = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List segments = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List sites = createSiteVertices(siteCoords);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List sites = createSiteVertices(siteCoords); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
cdt.setConstraints(segments, new ArrayList(constraintVertexMap.values()));
red_line===
ArrayList
start_offset===
35
end_offset===
44
Python OUTPUT===
 cdt.setConstraints(segments, new ArrayList(constraintVertexMap.values())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List verts = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List verts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(geom);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List constraintSegs = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List constraintSegs = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection nodedSegStrings;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection nodedSegStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"pm\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private PrecisionModel pm;
red_line===
pm
start_offset===
25
end_offset===
27
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this expression which always evaluates to \"true\"
scn.ruleId===
2589
scn.suspCodeStr===
if (done1 && done2) return 0;
red_line===
done2
start_offset===
19
end_offset===
24
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("found non-noded collapse at "
        + fact.createLineString(new Coordinate[] { p0, p1, p2}));
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException("found non-noded collapse at " + fact.createLineString(new Coordinate[] { p0, p1, p2})); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
if (pts[j].equals(testPt))
          throw new RuntimeException("found endpt/interior pt intersection at index " + j + " :pt " + testPt);
red_line===
RuntimeException
start_offset===
20
end_offset===
36
Python OUTPUT===
 if (pts[j].equals(testPt)) throw new RuntimeException("found endpt/interior pt intersection at index " + j + " :pt " + testPt); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection segStrings;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection segStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private final Random rnd = new Random(13);
red_line===
e final Ra
start_offset===
10
end_offset===
20
Python OUTPUT===
 private final Random rnd = new Random(13); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<NodedSegmentString> snapped = new ArrayList<NodedSegmentString>();
red_line===
<NodedSegmentString>
start_offset===
52
end_offset===
72
Python OUTPUT===
\u003c\u003e snapped = new ArrayList < NodedSegmentString > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (hp.intersects(p0) || hp.intersects(p1))
            return;
red_line===
if
start_offset===
10
end_offset===
12
Python OUTPUT===
 if (hp.intersects(p0) || hp.intersects(p1)) return; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"snapped\".
scn.ruleId===
1488
scn.suspCodeStr===
List<NodedSegmentString> snapped = computeSnaps(segStrings);
red_line===
computeSnaps(segStrings)
start_offset===
39
end_offset===
63
Python OUTPUT===
 List<NodedSegmentString> snapped = computeSnaps(segStrings); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
return (double) Math.round(val * scaleFactor);
red_line===
double
start_offset===
12
end_offset===
18
Python OUTPUT===
 return (douath.round(val * scaleFactor); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (y < hpy - TOLERANCE) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (y < hpy - TOLERANCE) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (py < qy) return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if (py < qy) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (py > qy) return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if (py > qy) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (py < qy) return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if (py < qy) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (li.hasIntersection()) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (li.hasIntersection()) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
intersections = new ArrayList();
red_line===
ArrayList
start_offset===
24
end_offset===
33
Python OUTPUT===
 intersections = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segStrings = toSegmentStrings(extractLines(geoms));
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segStrings = toSegmentStrings(extractLines(geoms)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection nodedLines = sr.getNodedSubstrings();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection nodedLines = sr.getNodedSubstrings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segStrings = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segStrings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection nodedSegStrings;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection nodedSegStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection resultSegStrings = NodedSegmentString.getNodedSubstrings(inputSegmentStrings);
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection resultSegStrings = NodedSegmentString.getNodedSubstrings(inputSegmentStrings); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List intersections = findInteriorIntersections(segStrings, li);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List intersections = findInteriorIntersections(segStrings, li); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ex.printStackTrace();
red_line===
  ex
start_offset===
4
end_offset===
8
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"pm\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private final PrecisionModel pm;
red_line===
pm
start_offset===
31
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
private LineIntersector li = new RobustLineIntersector();
red_line===
;
start_offset===
59
end_offset===
60
Python OUTPUT===
 private LineIntersector li = new RobustLineIntersector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<NodedSegmentString> nodedStrings = new ArrayList<NodedSegmentString>();
red_line===
<NodedSegmentString>
start_offset===
57
end_offset===
77
Python OUTPUT===
\u003c\u003e nodedStrings = new ArrayList < NodedSegmentString > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List monoChains = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List monoChains = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection nodedSegStrings;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection nodedSegStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List overlapChains = index.query(queryEnv);
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List overlapChains = index.query(queryEnv); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segStr = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segStr = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
1
end_offset===
13
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List segList;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List segList; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<SegmentString> segList = new ArrayList<SegmentString>();
red_line===
<SegmentString>
start_offset===
47
end_offset===
62
Python OUTPUT===
\u003c\u003e segList = new ArrayList < SegmentString > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map ocaMap = new TreeMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map ocaMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"matchSS\".
scn.ruleId===
1488
scn.suspCodeStr===
SegmentString matchSS = (SegmentString) ocaMap.get(oca);
red_line===
(SegmentString) ocaMap.get(oca)
start_offset===
28
end_offset===
59
Python OUTPUT===
 SegmentString matchSS = (SegmentString) ocaMap.get(oca); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
if (! pt0.equals2D(edgePts[0]))
      throw new RuntimeException("bad split edge start point at " + pt0);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 if (! pt0.equals2D(edgePts[0])) throw new RuntimeException("bad split edge start point at " + pt0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
if (! ptn.equals2D(edgePts[edgePts.length - 1]))
      throw new RuntimeException("bad split edge end point at " + ptn);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 if (! ptn.equals2D(edgePts[edgePts.length - 1])) throw new RuntimeException("bad split edge end point at " + ptn); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map nodeMap = new TreeMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map nodeMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List collapsedVertexIndexes = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List collapsedVertexIndexes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator it = iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator it = iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator it = iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator it = iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator it = iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator it = iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Iterator nodeIt;
red_line===
Iterator
start_offset===
10
end_offset===
18
Python OUTPUT===
 private Iterator nodeIt; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"p1\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate p1 = edge.getCoordinate(i + 1);
red_line===
= edge.getCoordinate(i + 1)
start_offset===
20
end_offset===
47
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (segmentIndex == maxSegmentIndex) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (segmentIndex == maxSegmentIndex) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"currSegIndex\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int currSegIndex = 0;
red_line===
currSegIndex
start_offset===
14
end_offset===
26
Python OUTPUT===
 private int c= 0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (nextNode == null) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (nextNode == null) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"nodeList\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private SegmentNodeList nodeList;
red_line===
nodeList
start_offset===
26
end_offset===
34
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"edge\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private NodedSegmentString edge;
red_line===
edge
start_offset===
29
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"currSegIndex\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int currSegIndex = 0;
red_line===
currSegIndex
start_offset===
14
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List monoChains = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List monoChains = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List overlapChains = index.query(queryChain.getEnvelope());
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List overlapChains = index.query(queryChain.getEnvelope()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"segString\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private final NodedSegmentString segString;
red_line===
segString
start_offset===
35
end_offset===
44
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private final Collection baseSegStrings;
red_line===
Collection
start_offset===
16
end_offset===
26
Python OUTPUT===
 private final Collection baseSegStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private final List interiorIntersections;
red_line===
List
start_offset===
16
end_offset===
20
Python OUTPUT===
 private final List interiorIntersections; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
interiorIntersections = new ArrayList();
red_line===
ArrayList
start_offset===
32
end_offset===
41
Python OUTPUT===
 interiorIntersections = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List resultEdgelist = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List resultEdgelist = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"ei\".
scn.ruleId===
1488
scn.suspCodeStr===
SegmentNode ei = nodeList.add(intPt, normalizedSegmentIndex);
red_line===
nodeList.add(intPt, normalizedSegmentIndex)
start_offset===
19
end_offset===
62
Python OUTPUT===
 SegmentNode ei = nodeList.add(intPt, normalizedSegmentIndex); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public SinglePassNoder() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection splitSS = noder.getNodedSubstrings();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection splitSS = noder.getNodedSubstrings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection intSegStrings = inputSegStrings;
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection intSegStrings = inputSegStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List nodedSegmentStrings = new ArrayList(segStrings.size());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List nodedSegmentStrings = new ArrayList(segStrings.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(pts);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(pts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"roundPtsNoDup\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate[] roundPtsNoDup = CoordinateArrays.removeRepeatedPoints(roundPts);
red_line===
CoordinateArrays.removeRepeatedPoints(roundPts)
start_offset===
33
end_offset===
80
Python OUTPUT===
 Coordinate[] roundPtsNoDup = CoordinateArrays.removeRepeatedPoints(roundPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List intersections = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List intersections = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isInteriorVertexIntersection(p01, p11, isEnd01, isEnd11)) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (isInteriorVertexIntersection(p01, p11, isEnd01, isEnd11)) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int INDENT_SIZE = 2;
red_line===
INDENT_SIZE
start_offset===
20
end_offset===
31
Python OUTPUT===
private static final int INDENT_SIZE = 2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (index >= segStr.size() - 2) return true;
red_line===
if
start_offset===
3
end_offset===
5
Python OUTPUT===
 if (index >= segStr.size() - 2) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection nodedSegStrings;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection nodedSegStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public SimpleNoder() {
  }
red_line===
SimpleNoder
start_offset===
9
end_offset===
20
Python OUTPUT===
 public SimpleNoder() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isSelfIntersection\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private boolean isSelfIntersection;
red_line===
isSelfIntersection
start_offset===
18
end_offset===
36
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make numIntersections a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int numIntersections = 0;
red_line===
numIntersections
start_offset===
13
end_offset===
29
Python OUTPUT===
public static final int numIntersections = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make numInteriorIntersections a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int numInteriorIntersections = 0;
red_line===
numInteriorIntersections
start_offset===
13
end_offset===
37
Python OUTPUT===
public static final int numInteriorIntersections = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make numProperIntersections a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int numProperIntersections = 0;
red_line===
numProperIntersections
start_offset===
13
end_offset===
35
Python OUTPUT===
public static final int numProperIntersections = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make numTests a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int numTests = 0;
red_line===
numTests
start_offset===
13
end_offset===
21
Python OUTPUT===
public static final int numTests = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private final List interiorIntersections;
red_line===
List
start_offset===
16
end_offset===
20
Python OUTPUT===
 private final List interiorIntersections; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
interiorIntersections = new ArrayList();
red_line===
ArrayList
start_offset===
32
end_offset===
41
Python OUTPUT===
 interiorIntersections = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection segStrings;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection segStrings; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
4
end_offset===
11
Python OUTPUT===
 ret
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 2-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
checkInteriorIntersections();
red_line===
checkInteriorIntersections();
start_offset===
4
end_offset===
33
Python OUTPUT===
 checkInteriorIntersections(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Unexpected IO exception: " + ex.getMessage());
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException("Unexpected IO exception: " + ex.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 2-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
ByteOrderValues.putDouble(ordVal, buf, byteOrder);
red_line===
ByteOrderValues.putDouble(ordVal, buf, byteOrder);
start_offset===
6
end_offset===
56
Python OUTPUT===
 ByteOrderValues.putDouble(ordVal, buf, byteOrder); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String coordinateSeparator = ",";
red_line===
coordinateSeparator
start_offset===
29
end_offset===
48
Python OUTPUT===
 private static final String coordinateSeparator = ","; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String tupleSeparator = " ";
red_line===
tupleSeparator
start_offset===
29
end_offset===
43
Python OUTPUT===
 private static final String tupleSeparator = " "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"INDENT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final String INDENT = "  ";
red_line===
INDENT
start_offset===
22
end_offset===
28
Python OUTPUT===
 private final String INDENT = " "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String INDENT = "  ";
red_line===
INDENT
start_offset===
22
end_offset===
28
Python OUTPUT===
private static final String INDENT = " " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!(Double.isNaN(coords[0].getZ())))
				dim = 3;
red_line===
if
start_offset===
3
end_offset===
5
Python OUTPUT===
 if (!(Double.isNaN(coords[0].getZ()))) dim = 3; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private static HashMap strategies = loadStrategies();
red_line===
HashMap
start_offset===
16
end_offset===
23
Python OUTPUT===
 private static HashMap strategies = loadStrategies(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
HashMap strats = new HashMap();
red_line===
HashMap
start_offset===
2
end_offset===
9
Python OUTPUT===
 HashMap strats = new HashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List t = arg.children.size()>1?arg.children.subList(1,arg.children.size()):null;
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List t = arg.children.size()>1?arg.children.subList(1,arg.children.size()):null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private WeakHashMap patterns = new WeakHashMap();
red_line===
WeakHashMap
start_offset===
11
end_offset===
22
Python OUTPUT===
 private WeakHashMap patterns = new WeakHashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"PATT_SUFFIX_INT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static Pattern PATT_SUFFIX_INT = Pattern.compile("(\\d+)$");
red_line===
PATT_SUFFIX_INT
start_offset===
16
end_offset===
31
Python OUTPUT===
 static Pattern PATT_SUFFIX_INT = Pattern.compile("(\\d+)$"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String ts = new String(toupleSeperator);
red_line===
String
start_offset===
21
end_offset===
27
Python OUTPUT===
 String ts = new (toupleSeperator);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
ts = ts.replaceAll("\\\\","\\\\\\\\");
red_line===
replaceAll
start_offset===
14
end_offset===
24
Python OUTPUT===
ts = ts.replaceAll ( " \\\\", " \ \ \ \ \ \ \ \ " ); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
ts = ts.replaceAll("\\.","\\\\.");
red_line===
replaceAll
start_offset===
14
end_offset===
24
Python OUTPUT===
ts = ts.replaceAll ( " \\. " , " \\\\. " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
String[] touples = ptn.split(t.trim());
red_line===
t.trim().split(toupleSeperator);
start_offset===
47
end_offset===
79
Python OUTPUT===
 String[] touples = ptn.split(t.trim()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String ts = new String(coordSeperator);
red_line===
String
start_offset===
22
end_offset===
28
Python OUTPUT===
 String ts = new (coordSeperator);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
ts = ts.replaceAll("\\\\","\\\\\\\\");
red_line===
replaceAll
start_offset===
15
end_offset===
25
Python OUTPUT===
ts = ts.replaceAll ( " \\\\", " \ \ \ \ \ \ \ \ " ); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
ts = ts.replaceAll("\\.","\\\\.");
red_line===
replaceAll
start_offset===
15
end_offset===
25
Python OUTPUT===
ts = ts.replaceAll ( " \\. " , " \\\\. " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
String[] coords = ptn.split(touples[i]);
red_line===
touples[i].split(coordSeperator);
start_offset===
49
end_offset===
82
Python OUTPUT===
 String[] coords = ptn.split(touples[i]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this \"for\" loop with a \"while\" loop.
scn.ruleId===
1264
scn.suspCodeStr===
for(;dimIndex<dim;)cs.setOrdinate(i,dimIndex++,Double.NaN);
red_line===
for
start_offset===
5
end_offset===
8
Python OUTPUT===
while ( ; dimIndex < dim ; ) cs.setOrdinate ( i , dimIndex ++ , Double.NaN ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove the unboxing from \"Double\".
scn.ruleId===
2153
scn.suspCodeStr===
c.x = axis[0].doubleValue();
red_line===
axis[0].doubleValue()
start_offset===
10
end_offset===
31
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove the unboxing from \"Double\".
scn.ruleId===
2153
scn.suspCodeStr===
if(axis.length>1)
					c.y = axis[1].doubleValue();
red_line===
axis[1].doubleValue()
start_offset===
11
end_offset===
32
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unboxing from \"Double\".
scn.ruleId===
2153
scn.suspCodeStr===
t = t.replaceAll("\\s*,\\s*", ",");
red_line===
eplaceAll("\\s*,\\s*"
start_offset===
11
end_offset===
32
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Cannot create a linear ring without atleast four coordinates or one coordinate sequence\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
if(arg.children.size()!=1 && arg.children.size()<4)
					throw new SAXException("Cannot create a linear ring without atleast four coordinates or one coordinate sequence");
red_line===
"Cannot create a linear ring without atleast four coordinates or one coordinate sequence"
start_offset===
28
end_offset===
117
Python OUTPUT===
 if(arg.children.size()!=1 && arg.children.size()<4) throw new SAXException("Cannot create a linear ring without atleast four coordinates or one coordinate sequence"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Cannot create a linestring without atleast two coordinates or one coordinate sequence\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
if(arg.children.size()<1)
					throw new SAXException("Cannot create a linestring without atleast two coordinates or one coordinate sequence");
red_line===
"Cannot create a linestring without atleast two coordinates or one coordinate sequence"
start_offset===
28
end_offset===
115
Python OUTPUT===
 if(arg.children.size()<1) throw new SAXException("Cannot create a linestring without atleast two coordinates or one coordinate sequence"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"gc\".
scn.ruleId===
1488
scn.suspCodeStr===
GeometryCollection gc = gf.createGeometryCollection(geoms);
red_line===
gf.createGeometryCollection(geoms)
start_offset===
28
end_offset===
62
Python OUTPUT===
 GeometryCollection gc = gf.createGeometryCollection(geoms); 
isFixed===
false
==================
RuleType===
VULNERABILITY
scn.errorMessage===
Disable access to external entities in XML parsing.
scn.ruleId===
2755
scn.suspCodeStr===
SAXParserFactory fact = SAXParserFactory.newInstance();
red_line===
newInstance
start_offset===
43
end_offset===
54
Python OUTPUT===
 SAXParserFactory fact = SAXParserFactory.newInstance(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List children = null;
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List children = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
if (children == null)
				children = new LinkedList();
red_line===
LinkedList
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (children == null) children = new LinkedList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Stack stack = new Stack();
red_line===
Stack
start_offset===
9
end_offset===
14
Python OUTPUT===
 private Stack stack = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
protected StringBuffer text = null;
red_line===
StringBuffer
start_offset===
12
end_offset===
24
Python OUTPUT===
protected StringBuilder text = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".
scn.ruleId===
1149
scn.suspCodeStr===
private Stack stack = new Stack();
red_line===
Stack
start_offset===
9
end_offset===
14
Python OUTPUT===
private Deque stack = new Deque ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (h.children.size() < 1)
			return false;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (h.children.size() < 1) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary null check; \"instanceof\" returns false for nulls.
scn.ruleId===
4201
scn.suspCodeStr===
if (delegate != null && delegate instanceof ContentHandler)
			((ContentHandler) delegate).setDocumentLocator(locator);
red_line===
delegate != null
start_offset===
6
end_offset===
22
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
is.read(buf);
red_line===
read
start_offset===
7
end_offset===
11
Python OUTPUT===
 is.read(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (geoms.size() < limit) return false;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (geoms.size() < limit) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (isStrictParsing || geoms.size() == 0)
        throw ex;
red_line===
geoms.size() == 0
start_offset===
29
end_offset===
46
Python OUTPUT===
 if (isStrictParsing || geoms.size() == 0) throw ex; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Unable to create DecimalFormat for Locale.US");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException("Unable to create DecimalFormat for Locale.US"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DEFAULT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static OrdinateFormat DEFAULT = new OrdinateFormat();
red_line===
DEFAULT
start_offset===
31
end_offset===
38
Python OUTPUT===
 public static OrdinateFormat DDEFAULT= new OrdinateFormat(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make DEFAULT a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static OrdinateFormat DEFAULT = new OrdinateFormat();
red_line===
DEFAULT
start_offset===
31
end_offset===
38
Python OUTPUT===
public static final OrdinateFormat DEFAULT = new OrdinateFormat ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"precisionModel\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private PrecisionModel precisionModel = null;
red_line===
precisionModel
start_offset===
25
end_offset===
39
Python OUTPUT===
 private PrecisionModel p= null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"precisionModel\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private PrecisionModel precisionModel = null;
red_line===
precisionModel
start_offset===
25
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!Double.isNaN(seq.getZ(i)))
          outputOrdinates.add(Ordinate.Z);
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!Double.isNaN(seq.getZ(i))) outputOrdinates.add(Ordinate.Z); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!Double.isNaN(seq.getM(i)))
          outputOrdinates.add(Ordinate.M);
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!Double.isNaN(seq.getM(i))) outputOrdinates.add(Ordinate.M); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"formatter\".
scn.ruleId===
1488
scn.suspCodeStr===
OrdinateFormat formatter = createFormatter(pm);
red_line===
createFormatter(pm)
start_offset===
31
end_offset===
50
Python OUTPUT===
 OrdinateFormat formatter = createFormatter(pm); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Unexpected IOException caught: " + ex.getMessage());
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException("Unexpected IOException caught: " + ex.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SRID\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private int SRID = 0;
red_line===
SRID
start_offset===
14
end_offset===
18
Python OUTPUT===
 private int SSRID= 0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"hasSRID\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private boolean hasSRID = false;
red_line===
hasSRID
start_offset===
18
end_offset===
25
Python OUTPUT===
 private boolean h= false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"SRID\" which hides the field declared at line 109.
scn.ruleId===
1117
scn.suspCodeStr===
int SRID = 0;
red_line===
SRID
start_offset===
8
end_offset===
12
Python OUTPUT===
 int SRISRID0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"SRID\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int SRID = 0;
red_line===
SRID
start_offset===
14
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int SRID = 0;
red_line===
SRID
start_offset===
8
end_offset===
12
Python OUTPUT===
 int SRID = 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"g\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry g = readGeometry();
red_line===
readGeometry()
start_offset===
17
end_offset===
31
Python OUTPUT===
 Geometry g = readGeometry(); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Prevent \"int\" promotion by adding \"\u0026 0xff\" to this expression.
scn.ruleId===
3034
scn.suspCodeStr===
byte b = (byte) ((nib1 << 4) + (byte) nib0);
red_line===
(byte) nib0
start_offset===
37
end_offset===
48
Python OUTPUT===
 byte b = (byte) ((nib1 << 4) + (byte) nib0); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"holes\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
holes[i] = readLinearRing();
red_line===
holes
start_offset===
6
end_offset===
11
Python OUTPUT===
 holes[i] = readLinearRing(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbXDR = 0;
red_line===
wkbXDR
start_offset===
6
end_offset===
12
Python OUTPUT===
 int wkbXDR = 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbNDR = 1;
red_line===
wkbNDR
start_offset===
6
end_offset===
12
Python OUTPUT===
 int wkbNDR = 1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbPoint = 1;
red_line===
wkbPoint
start_offset===
6
end_offset===
14
Python OUTPUT===
 int wkbPoint = 1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbLineString = 2;
red_line===
wkbLineString
start_offset===
6
end_offset===
19
Python OUTPUT===
 int wkbLineString = 2; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbPolygon = 3;
red_line===
wkbPolygon
start_offset===
6
end_offset===
16
Python OUTPUT===
 int wkbPolygon = 3; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbMultiPoint = 4;
red_line===
wkbMultiPoint
start_offset===
6
end_offset===
19
Python OUTPUT===
 int wkbMultiPoint = 4; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbMultiLineString = 5;
red_line===
wkbMultiLineString
start_offset===
6
end_offset===
24
Python OUTPUT===
 int wkbMultiLineString = 5; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbMultiPolygon = 6;
red_line===
wkbMultiPolygon
start_offset===
6
end_offset===
21
Python OUTPUT===
 int wkbMultiPolygon = 6; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
int wkbGeometryCollection = 7;
red_line===
wkbGeometryCollection
start_offset===
6
end_offset===
27
Python OUTPUT===
 int wkbGeometryCollection = 7; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List<Coordinate> coordinateList = new ArrayList();
red_line===
ArrayList
start_offset===
46
end_offset===
55
Python OUTPUT===
 List<Coordinate> coordinateList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"INDENT_SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final int INDENT_SIZE = 2;
red_line===
INDENT_SIZE
start_offset===
20
end_offset===
31
Python OUTPUT===
 private final int IINDENT_SIZE= 2; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ALTITUDE_MODE_CLAMPTOGROUND\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String ALTITUDE_MODE_CLAMPTOGROUND = "clampToGround ";
red_line===
ALTITUDE_MODE_CLAMPTOGROUND
start_offset===
23
end_offset===
50
Python OUTPUT===
 public static String AALTITUDE_MODE_CLAMPTOGROUND= "clampToGround "; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ALTITUDE_MODE_RELATIVETOGROUND\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String ALTITUDE_MODE_RELATIVETOGROUND  = "relativeToGround  ";
red_line===
ALTITUDE_MODE_RELATIVETOGROUND
start_offset===
23
end_offset===
53
Python OUTPUT===
 public static String AALTITUDE_MODE_RELATIVETOGROUND= "relativeToGround "; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ALTITUDE_MODE_ABSOLUTE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String ALTITUDE_MODE_ABSOLUTE = "absolute";
red_line===
ALTITUDE_MODE_ABSOLUTE
start_offset===
23
end_offset===
45
Python OUTPUT===
 public static String AALTITUDE_MODE_ABSOLUTE= "absolute"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"maxCoordinatesPerLine\".
scn.ruleId===
1854
scn.suspCodeStr===
maxCoordinatesPerLine = 1;
red_line===
= 1
start_offset===
28
end_offset===
31
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make ALTITUDE_MODE_CLAMPTOGROUND a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String ALTITUDE_MODE_CLAMPTOGROUND = "clampToGround ";
red_line===
ALTITUDE_MODE_CLAMPTOGROUND
start_offset===
23
end_offset===
50
Python OUTPUT===
public static final String ALTITUDE_MODE_CLAMPTOGROUND = " clampToGround  " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make ALTITUDE_MODE_RELATIVETOGROUND a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String ALTITUDE_MODE_RELATIVETOGROUND  = "relativeToGround  ";
red_line===
ALTITUDE_MODE_RELATIVETOGROUND
start_offset===
23
end_offset===
53
Python OUTPUT===
public static final String ALTITUDE_MODE_RELATIVETOGROUND = " relativeToGround  " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make ALTITUDE_MODE_ABSOLUTE a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String ALTITUDE_MODE_ABSOLUTE = "absolute";
red_line===
ALTITUDE_MODE_ABSOLUTE
start_offset===
23
end_offset===
45
Python OUTPUT===
public static final String ALTITUDE_MODE_ABSOLUTE = " absolute " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList coordinates = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList coordinates = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList coordinates = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList coordinates = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList coordinates = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList coordinates = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList coordinates = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList coordinates = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList points = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList points = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList holes = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList holes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList lineStrings = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList lineStrings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList polygons = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList polygons = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList geometries = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (sequences == null || sequences.size() == 0)
      return csFactory.create(0, toDimension(ordinateFlags));
red_line===
sequences.size() == 0
start_offset===
29
end_offset===
50
Python OUTPUT===
 if (sequences == null || sequences.size() == 0) return csFactory.create(0, toDimension(ordinateFlags)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"point\".
scn.ruleId===
1488
scn.suspCodeStr===
Point point = geometryFactory.createPoint(getCoordinateSequence(tokenizer, ordinateFlags));
red_line===
geometryFactory.createPoint(getCoordinateSequence(tokenizer, ordinateFlags))
start_offset===
18
end_offset===
94
Python OUTPUT===
 Point point = geometryFactory.createPoint(getCoordinateSequence(tokenizer, ordinateFlags)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List geoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (geoms.size() < limit) return false;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (geoms.size() < limit) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(geom);
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
if (isEmpty) 
        return new ArrayList();
red_line===
ArrayList
start_offset===
19
end_offset===
28
Python OUTPUT===
 if (isEmpty) return new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator geomi = new GeometryCollectionIterator((GeometryCollection) geom);
red_line===
Iterator
start_offset===
6
end_offset===
14
Python OUTPUT===
 Iterator geomi = new GeometryCollectionIterator((GeometryCollection) geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public RobustLineIntersector() {
  }
red_line===
RobustLineIntersector
start_offset===
9
end_offset===
30
Python OUTPUT===
 public RobustLineIntersector() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(   "DD in env = " + isIn + "  --------------------- " + intPtDD);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println( "DD in env = " + isIn + " --------------------- " + intPtDD); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Distance = " + intPt.distance(intPtDD));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Distance = " + intPt.distance(intPtDD)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"minDist\".
scn.ruleId===
1854
scn.suspCodeStr===
minDist = dist;
red_line===
= dist
start_offset===
14
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int Pq1 = Orientation.index(p1, p2, q1);
red_line===
Pq1
start_offset===
8
end_offset===
11
Python OUTPUT===
 int Pq1 = Orientation.index(p1, p2, q1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int Pq2 = Orientation.index(p1, p2, q2);
red_line===
Pq2
start_offset===
8
end_offset===
11
Python OUTPUT===
 int Pq2 = Orientation.index(p1, p2, q2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int Qp1 = Orientation.index(q1, q2, p1);
red_line===
Qp1
start_offset===
8
end_offset===
11
Python OUTPUT===
 int Qp1 = Orientation.index(q1, q2, p1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int Qp2 = Orientation.index(q1, q2, p2);
red_line===
Qp2
start_offset===
8
end_offset===
11
Python OUTPUT===
 int Qp2 = Orientation.index(q1, q2, p2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this expression which always evaluates to \"true\"
scn.ruleId===
2589
scn.suspCodeStr===
return q1.equals(p1) && !p1q2p2 && !q1p2q2 ? POINT_INTERSECTION : COLLINEAR_INTERSECTION;
red_line===
!q1p2q2
start_offset===
41
end_offset===
48
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"measure\".
scn.ruleId===
1488
scn.suspCodeStr===
double measure = 1 - distance / envSize;
red_line===
1 - distance / envSize
start_offset===
19
end_offset===
41
Python OUTPUT===
 double measure = 1 - distance / envSize; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"envSize\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
double measure = 1 - distance / envSize;
red_line===
envSize
start_offset===
34
end_offset===
41
Python OUTPUT===
final double measure = 1 - distance envSize ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
4
end_offset===
11
Python OUTPUT===
 ret
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if ( y1 == scanY && y0 < scanY )
        return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if ( y1 == scanY && y0 < scanY ) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if ( y > env.getMaxY() )
        return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if ( y > env.getMaxY() ) return false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if ( p0.getY() < y && p1.getY() < y )
        return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if ( p0.getY() < y && p1.getY() < y ) return false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> crossings = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
\u003c\u003e crossings = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (crossings.size() == 0) return;
red_line===
crossings.size() == 0
start_offset===
10
end_offset===
31
Python OUTPUT===
 if (crossings.size() == 0) return; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x\".
scn.ruleId===
1488
scn.suspCodeStr===
double x = x0 + ((Y - p0.getY()) / m);
red_line===
x0 + ((Y - p0.getY()) / m)
start_offset===
17
end_offset===
43
Python OUTPUT===
 double x = x0 + ((Y - p0.getY()) / m); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"scanLineY\".
scn.ruleId===
1488
scn.suspCodeStr===
double scanLineY = avg(hiY, loY);
red_line===
avg(hiY, loY)
start_offset===
25
end_offset===
38
Python OUTPUT===
 double scanLineY = avg(hiY, loY); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"y\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
public double x,y,w;
red_line===
y
start_offset===
18
end_offset===
19
Python OUTPUT===
 public double x,y,w; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make x a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double x,y,w;
red_line===
x
start_offset===
16
end_offset===
17
Python OUTPUT===
public static final double x , y , w ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"minPtIndex\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int minPtIndex;
red_line===
minPtIndex
start_offset===
14
end_offset===
24
Python OUTPUT===
 private int m 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"boundary\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Geometry boundary;
red_line===
boundary
start_offset===
19
end_offset===
27
Python OUTPUT===
 private Geometry b 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"dist\".
scn.ruleId===
1488
scn.suspCodeStr===
double dist = obstacleDistance.distance(p);
red_line===
obstacleDistance.distance(p)
start_offset===
18
end_offset===
46
Python OUTPUT===
 double dist = obstacleDistance.distance(p); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isOverlapSignificant\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isOverlapSignificant = cell.getMaxDistance() > tolerance;
red_line===
cell.getMaxDistance() > tolerance
start_offset===
37
end_offset===
70
Python OUTPUT===
 boolean isOverlapSignificant = cell.getMaxDistance() > tolerance; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator geomi = new GeometryCollectionIterator((GeometryCollection) geom);
red_line===
Iterator
start_offset===
6
end_offset===
14
Python OUTPUT===
 Iterator geomi = new GeometryCollectionIterator((GeometryCollection) geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Coordinate P = lowestPoint(pts);
red_line===
P
start_offset===
13
end_offset===
14
Python OUTPUT===
 Coordinate P = lowestPoint(pts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Coordinate Q = pointWitMinAngleWithX(pts, P);
red_line===
Q
start_offset===
13
end_offset===
14
Python OUTPUT===
 Coordinate Q = pointWitMinAngleWithX(pts, P); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Coordinate R = pointWithMinAngleWithSegment(pts, P, Q);
red_line===
R
start_offset===
14
end_offset===
15
Python OUTPUT===
 Coordinate R = pointWithMinAngleWithSegment(pts, P, Q); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Do not forget to remove this deprecated code someday.
scn.ruleId===
1133
scn.suspCodeStr===
public static final int CLOCKWISE = -1;
red_line===
CLOCKWISE
start_offset===
26
end_offset===
35
Python OUTPUT===
 public static final int CLOCKWISE = -1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Do not forget to remove this deprecated code someday.
scn.ruleId===
1133
scn.suspCodeStr===
public static final int RIGHT = CLOCKWISE;
red_line===
RIGHT
start_offset===
26
end_offset===
31
Python OUTPUT===
 public static final int RIGHT = CLOCKWISE; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Do not forget to remove this deprecated code someday.
scn.ruleId===
1133
scn.suspCodeStr===
public static final int COUNTERCLOCKWISE = 1;
red_line===
COUNTERCLOCKWISE
start_offset===
26
end_offset===
42
Python OUTPUT===
 public static final int COUNTERCLOCKWISE = 1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Do not forget to remove this deprecated code someday.
scn.ruleId===
1133
scn.suspCodeStr===
public static final int LEFT = COUNTERCLOCKWISE;
red_line===
LEFT
start_offset===
26
end_offset===
30
Python OUTPUT===
 public static final int LEFT = COUNTERCLOCKWISE; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Do not forget to remove this deprecated code someday.
scn.ruleId===
1133
scn.suspCodeStr===
public static final int COLLINEAR = 0;
red_line===
COLLINEAR
start_offset===
26
end_offset===
35
Python OUTPUT===
 public static final int COLLINEAR = 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Do not forget to remove this deprecated code someday.
scn.ruleId===
1133
scn.suspCodeStr===
public static final int STRAIGHT = COLLINEAR;
red_line===
STRAIGHT
start_offset===
26
end_offset===
34
Python OUTPUT===
 public static final int STRAIGHT = COLLINEAR; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double r_num = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);
red_line===
r_num
start_offset===
15
end_offset===
20
Python OUTPUT===
 double r_num = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double s_num = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);
red_line===
s_num
start_offset===
15
end_offset===
20
Python OUTPUT===
 double s_num = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Stack cHS = grahamScan(sortedPts);
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
 Stack cHS = grahamScan(sortedPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
TreeSet reducedSet = new TreeSet();
red_line===
TreeSet
start_offset===
4
end_offset===
11
Python OUTPUT===
 TreeSet reducedSet = new TreeSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Stack ps = new Stack();
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
 Stack ps = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList cleanedRing = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList cleanedRing = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".
scn.ruleId===
1149
scn.suspCodeStr===
Stack cHS = grahamScan(sortedPts);
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
Deque cHS = grahamScan ( sortedPts ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".
scn.ruleId===
1149
scn.suspCodeStr===
Stack ps = new Stack();
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
Deque ps = new Deque ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
reducedSet.add(polyPts[i]);
red_line===
reducedSet.add(polyPts[i]);
start_offset===
6
end_offset===
33
Python OUTPUT===
 reducedSet.add(polyPts[i]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int DONT_INTERSECT = 0;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int DONT_INTERSECT = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int DO_INTERSECT = 1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int DO_INTERSECT = 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int COLLINEAR = 2;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int COLLINEAR = 2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int NO_INTERSECTION = 0;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NO_INTERSECTION = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int POINT_INTERSECTION = 1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int POINT_INTERSECTION = 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int COLLINEAR_INTERSECTION = 2;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int COLLINEAR_INTERSECTION = 2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = -1.0;
red_line===
= -1.0
start_offset===
16
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isInteriorIntersection(1)) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (isInteriorIntersection(1)) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"dist\".
scn.ruleId===
1488
scn.suspCodeStr===
double dist = computeEdgeDistance(intPt[intIndex], inputLines[segmentIndex][0],
        inputLines[segmentIndex][1]);
red_line===
computeEdgeDistanc
start_offset===
18
end_offset===
36
Python OUTPUT===
 double dist = computeEdgeDistance(intPt[intIndex], inputLines[segmentIndex][0], inputLines[segmentIndex][1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double r_num = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);
red_line===
r_num
start_offset===
15
end_offset===
20
Python OUTPUT===
 double r_num = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double s_num = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);
red_line===
s_num
start_offset===
15
end_offset===
20
Python OUTPUT===
 double s_num = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"euclideanDist\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private DistanceToPoint euclideanDist = new DistanceToPoint();
red_line===
euclideanDist
start_offset===
28
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public DistanceToPoint() {
  }
red_line===
DistanceToPoint
start_offset===
9
end_offset===
24
Python OUTPUT===
 public DistanceToPoint() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (li.hasIntersection())
      return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (li.hasIntersection()) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double origin = 0.0;
red_line===
origin
start_offset===
30
end_offset===
36
Python OUTPUT===
 private static final double origin = 0.0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"node\".
scn.ruleId===
1488
scn.suspCodeStr===
Node node = new Node(key.getInterval(), key.getLevel());
red_line===
new Node(key.getInterval(), key.getLevel())
start_offset===
16
end_offset===
59
Python OUTPUT===
 Node node = new Node(key.getInterval(), key.getLevel()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List items = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List items = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public List getItems() { return items; }
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 public List getItems() { return items; } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public NodeBase() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List foundItems = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List foundItems = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List foundItems = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List foundItems = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"level\".
scn.ruleId===
1488
scn.suspCodeStr===
int level = DoubleBits.exponent(dx) + 1;
red_line===
DoubleBits.exponent(dx) + 1
start_offset===
16
end_offset===
43
Python OUTPUT===
 int level = DoubleBits.exponent(dx) + 1; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"max\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
public double min, max;
red_line===
max
start_offset===
21
end_offset===
24
Python OUTPUT===
 public double min, max; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make min a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double min, max;
red_line===
min
start_offset===
16
end_offset===
19
Python OUTPUT===
public static final double min , max ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List items = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List items = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public List getItems() { return items; }
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 public List getItems() { return items; } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public NodeBase() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make \"items\" transient or serializable.
scn.ruleId===
1948
scn.suspCodeStr===
protected List items = new ArrayList();
red_line===
items
start_offset===
17
end_offset===
22
Python OUTPUT===
protected final List items = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List foundItems = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List foundItems = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"level\".
scn.ruleId===
1488
scn.suspCodeStr===
int level = DoubleBits.exponent(dMax) + 1;
red_line===
DoubleBits.exponent(dMax) + 1
start_offset===
16
end_offset===
45
Python OUTPUT===
 int level = DoubleBits.exponent(dMax) + 1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"exp\".
scn.ruleId===
1488
scn.suspCodeStr===
int exp = signExp & 0x07ff;
red_line===
signExp & 0x07ff
start_offset===
14
end_offset===
30
Python OUTPUT===
 int exp = signExp & 0x07ff; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
long expBias = exp + EXPONENT_BIAS;
red_line===
+
start_offset===
23
end_offset===
24
Python OUTPUT===
 long expBias = exp + EXPONENT_BIAS;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"node\".
scn.ruleId===
1488
scn.suspCodeStr===
Node node = new Node(key.getEnvelope(), key.getLevel());
red_line===
new Node(key.getEnvelope(), key.getLevel())
start_offset===
16
end_offset===
59
Python OUTPUT===
 Node node = new Node(key.getEnvelope(), key.getLevel()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 2-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
return env.intersects(searchEnv);
red_line===
return env.intersects(searchEnv);
start_offset===
4
end_offset===
37
Python OUTPUT===
 return env.intersects(searchEnv); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"item\"
scn.ruleId===
1700
scn.suspCodeStr===
private Object item;
red_line===
item
start_offset===
17
end_offset===
21
Python OUTPUT===
 private Object iitem 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
if (! totalExtent.intersects(searchEnv)) 
      return new ArrayList();
red_line===
ArrayList
start_offset===
17
end_offset===
26
Python OUTPUT===
 if (! totalExtent.intersects(searchEnv)) return new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DEFAULT_NODE_CAPACITY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static int DEFAULT_NODE_CAPACITY = 16;
red_line===
DEFAULT_NODE_CAPACITY
start_offset===
21
end_offset===
42
Python OUTPUT===
 private static int DDEFAULT_NODE_CAPACITY= 16; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(fact.toGeometry(env));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(fact.toGeometry(env)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<Item> items = new ArrayList<Item>();
red_line===
<Item>
start_offset===
42
end_offset===
48
Python OUTPUT===
\u003c\u003e > items = new ArrayList < Item > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> layerIndexList = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
48
end_offset===
57
Python OUTPUT===
\u003c\u003e layerIndexList = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List mcList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List mcList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"end\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private int start, end;
red_line===
end
start_offset===
21
end_offset===
24
Python OUTPUT===
 private int start, end; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Coordinate coord[] = new Coordinate[end - start + 1];
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
 Coordinate coord[] = new Coordinate[end - start + 1]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if( maxp < minq - overlapTolerance )
        return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if( maxp < minq - overlapTolerance ) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List children = ((AbstractNode) bndComposite).getChildBoundables();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List children = ((AbstractNode) bndComposite).getChildBoundables(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList sortedChildBoundables = new ArrayList(childBoundables);
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList sortedChildBoundables = new ArrayList(childBoundables); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List parentBoundables = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List parentBoundables = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator i = childBoundables.iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator i = childBoundables.iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
slices[j] = new ArrayList();
red_line===
ArrayList
start_offset===
22
end_offset===
31
Python OUTPUT===
 slices[j] = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
PriorityQueue priQ = new PriorityQueue();
red_line===
PriorityQueue
start_offset===
4
end_offset===
17
Python OUTPUT===
 PriorityQueue priQ = new PriorityQueue(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
PriorityQueue priQ = new PriorityQueue();
red_line===
PriorityQueue
start_offset===
4
end_offset===
17
Python OUTPUT===
 PriorityQueue priQ = new PriorityQueue(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
PriorityQueue priQ = new PriorityQueue();
red_line===
PriorityQueue
start_offset===
4
end_offset===
17
Python OUTPUT===
 PriorityQueue priQ = new PriorityQueue(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
PriorityQueue kNearestNeighbors = new PriorityQueue();
red_line===
PriorityQueue
start_offset===
4
end_offset===
17
Python OUTPUT===
 PriorityQueue kNearestNeighbors = new PriorityQueue(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
if (isEmpty()) return null;
red_line===
null
start_offset===
26
end_offset===
30
Python OUTPUT===
 if (isEmpty()) return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
if (isEmpty() || tree.isEmpty()) return null;
red_line===
null
start_offset===
44
end_offset===
48
Python OUTPUT===
 if (isEmpty() || tree.isEmpty()) return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
if (minPair == null) 
      return null;
red_line===
null
start_offset===
13
end_offset===
17
Python OUTPUT===
 if (minPair == null) return null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this expression which always evaluates to \"true\"
scn.ruleId===
2589
scn.suspCodeStr===
if (distanceUpperBound <= maxDistance)
          return true;
red_line===
distanceUpperBound <= maxDistance
start_offset===
12
end_offset===
45
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList itemBoundables = new ArrayList();
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList itemBoundables = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList parentBoundables = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList parentBoundables = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList sortedChildBoundables = new ArrayList(childBoundables);
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList sortedChildBoundables = new ArrayList(childBoundables); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List parentBoundables = createParentBoundables(boundablesOfALevel, level + 1);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List parentBoundables = createParentBoundables(boundablesOfALevel, level + 1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList matches = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList matches = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List childBoundables = node.getChildBoundables();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List childBoundables = node.getChildBoundables(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List childBoundables = node.getChildBoundables();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List childBoundables = node.getChildBoundables(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List valuesTree = itemsTree(root);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List valuesTree = itemsTree(root); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
if (valuesTree == null)
      return new ArrayList();
red_line===
ArrayList
start_offset===
17
end_offset===
26
Python OUTPUT===
 if (valuesTree == null) return new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List valuesTreeForNode = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List valuesTreeForNode = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List valuesTreeForChild = itemsTree((AbstractNode) childBoundable);
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List valuesTreeForChild = itemsTree((AbstractNode) childBoundable); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList boundables = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList boundables = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected abstract Comparator getComparator();
red_line===
Comparator
start_offset===
21
end_offset===
31
Python OUTPUT===
 protected abstract Comparator getComparator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty collection instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
if (valuesTreeForNode.size() <= 0) 
      return null;
red_line===
null
start_offset===
13
end_offset===
17
Python OUTPUT===
 if (valuesTreeForNode.size() <= 0) return null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
4
end_offset===
11
Python OUTPUT===
 ret
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if ( ((ItemBoundable) childBoundable).getItem() == item)
          childToRemove = childBoundable;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if ( ((ItemBoundable) childBoundable).getItem() == item) childToRemove = childBoundable; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make \"bounds\" transient or serializable.
scn.ruleId===
1948
scn.suspCodeStr===
private Object bounds;
red_line===
bounds
start_offset===
17
end_offset===
23
Python OUTPUT===
private final Object bounds ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make \"item\" transient or serializable.
scn.ruleId===
1948
scn.suspCodeStr===
private Object item;
red_line===
item
start_offset===
17
end_offset===
21
Python OUTPUT===
private final Object item ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList childBoundables = new ArrayList();
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList childBoundables = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make \"bounds\" transient or serializable.
scn.ruleId===
1948
scn.suspCodeStr===
private Object bounds = null;
red_line===
bounds
start_offset===
17
end_offset===
23
Python OUTPUT===
private final Object bounds = null ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
final List result = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 final List result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (root == null)
      return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (root == null) return true; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"leafNode\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
leafNode.setLeft(node);
red_line===
leafNode.setLeft
start_offset===
6
end_offset===
22
Python OUTPUT===
 leafNode.setLeft(node); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List leaves = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List leaves = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List src = leaves;
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List src = leaves; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List temp = null;
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List temp = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List dest = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List dest = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(WKTWriter.toLineString(new Coordinate(node.min, level), new Coordinate(node.max, level)));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(WKTWriter.toLineString(new Coordinate(node.min, level), new Coordinate(node.max, level))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (leaves.size() == 0) return;
red_line===
leaves.size() == 0
start_offset===
8
end_offset===
26
Python OUTPUT===
 if (leaves.size() == 0) return; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List events = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List events = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public SweepLineIndex() {
  }
red_line===
SweepLineIndex
start_offset===
9
end_offset===
23
Python OUTPUT===
 public SweepLineIndex() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"max\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private double min, max;
red_line===
max
start_offset===
22
end_offset===
25
Python OUTPUT===
 private double min, max; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList items = new ArrayList();
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList items = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList shapes = new ArrayList();
red_line===
ArrayList
start_offset===
12
end_offset===
21
Python OUTPUT===
 private ArrayList shapes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public GeometryCollectionShape() {
    }
red_line===
GeometryCollectionShape
start_offset===
11
end_offset===
34
Python OUTPUT===
 public GeometryCollectionShape() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Method contains() not yet implemented.\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new java.lang.UnsupportedOperationException(
            "Method contains() not yet implemented.");
red_line===
"Method contains() not yet implemented."
start_offset===
12
end_offset===
52
Python OUTPUT===
 throw new java.lang.UnsupportedOperationException( "Method contains() not yet implemented."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 3-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
double prevx = Double.NaN;
red_line===
double prevx = Double.NaN;
start_offset===
4
end_offset===
30
Python OUTPUT===
 double prevx = Double.NaN; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"java.awt.geom.Path2D\" for \"WIND_EVEN_ODD\".
scn.ruleId===
3252
scn.suspCodeStr===
ringPath = new GeneralPath(GeneralPath.WIND_EVEN_ODD);
red_line===
WIND_EVEN_ODD
start_offset===
45
end_offset===
58
Python OUTPUT===
 ringPath = new GeneralPath(GeneralPath.WIND_EVEN_ODD); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"java.awt.geom.Path2D\" for \"WIND_EVEN_ODD\".
scn.ruleId===
3252
scn.suspCodeStr===
GeneralPath path = new GeneralPath(GeneralPath.WIND_EVEN_ODD, coordinates.length);
red_line===
WIND_EVEN_ODD
start_offset===
53
end_offset===
66
Python OUTPUT===
 GeneralPath path = new GeneralPath(GeneralPath.WIND_EVEN_ODD, coordinates.length); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Iterator shapeIterator;
red_line===
Iterator
start_offset===
12
end_offset===
20
Python OUTPUT===
 private Iterator shapeIterator; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public void next() {
            }
red_line===
next
start_offset===
24
end_offset===
28
Python OUTPUT===
 public void next() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pathPtSeq = toCoordinates(pathIt);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List pathPtSeq = toCoordinates(pathIt); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List holes = new ArrayList();
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List holes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List coordArrays = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List coordArrays = new ArrayList(); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"coordList\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
coordList.closeRing();
red_line===
coordList.closeRing
start_offset===
8
end_offset===
27
Python OUTPUT===
 coordList.closeRing(); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"coordList\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
return coordList.toCoordinateArray();
red_line===
coordList.toCoordinateArray
start_offset===
11
end_offset===
38
Python OUTPUT===
 return coordList.toCoordinateArray(); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"coordList\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
coordList.add(new Coordinate(pathPt[0], pathPt[1]));
red_line===
coordList.add
start_offset===
8
end_offset===
21
Python OUTPUT===
 coordList.add(new Coordinate(pathPt[0], pathPt[1])); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List edges = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List edges = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List pts = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List pts = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList holes = new ArrayList();
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList holes = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
abstract public DirectedEdge getNext(DirectedEdge de);
red_line===
public
start_offset===
11
end_offset===
17
Python OUTPUT===
public abstract final DirectedEdge getNext ( DirectedEdge de ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
abstract public void setEdgeRing(DirectedEdge de, EdgeRing er);
red_line===
public
start_offset===
11
end_offset===
17
Python OUTPUT===
public abstract final void setEdgeRing ( DirectedEdge de , EdgeRing er ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"label\" which hides the field declared at line 44.
scn.ruleId===
1117
scn.suspCodeStr===
Label label = de.getLabel();
red_line===
label
start_offset===
12
end_offset===
17
Python OUTPUT===
 Label labellabel.getLabel(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
6
end_offset===
13
Python OUTPUT===
 retur
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
pts.add(edgePts[i]);
red_line===
pts.add(edgePts[i]);
start_offset===
8
end_offset===
28
Python OUTPUT===
 pts.add(edgePts[i]); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"shell\" which hides the field declared at line 47.
scn.ruleId===
1117
scn.suspCodeStr===
LinearRing shell = getLinearRing();
red_line===
shell
start_offset===
15
end_offset===
20
Python OUTPUT===
 LinearRing sheshellgetLinearRing(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon poly = geometryFactory.createPolygon(getLinearRing(), holeLR);
red_line===
geometryFactory.createPolygon(getLinearRing(), holeLR)
start_offset===
19
end_offset===
73
Python OUTPUT===
 Polygon poly = geometryFactory.createPolygon(getLinearRing(), holeLR); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (depth[position] != depthVal)
        throw new TopologyException("assigned depths do not match", getCoordinate());
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if (depth[position] != depthVal) throw new TopologyException("assigned depths do not match", getCoordinate()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map nodeMap = new TreeMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map nodeMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator it = iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator it = iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List resultAreaEdgeList;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List resultAreaEdgeList; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = getEdges();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = getEdges(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public DirectedEdgeStar() {
  }
red_line===
DirectedEdgeStar
start_offset===
9
end_offset===
25
Python OUTPUT===
 public DirectedEdgeStar() { } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"nonHorizontalEdge\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
DirectedEdge nonHorizontalEdge = null;
red_line===
nonHorizontalEdge
start_offset===
19
end_offset===
36
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"label\" which hides the field declared at line 43.
scn.ruleId===
1117
scn.suspCodeStr===
Label label = de.getLabel();
red_line===
label
start_offset===
12
end_offset===
17
Python OUTPUT===
 Label labellabel.getLabel(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map lineEdgeMap = new HashMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map lineEdgeMap = new HashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Collection boundaryNodes;
red_line===
Collection
start_offset===
10
end_offset===
20
Python OUTPUT===
 private Collection boundaryNodes; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection coll = getBoundaryNodes();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection coll = getBoundaryNodes(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"loc\".
scn.ruleId===
1854
scn.suspCodeStr===
int loc = Location.NONE;
red_line===
= Location.NONE
start_offset===
12
end_offset===
27
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 3-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
Coordinate[] coord = CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());
red_line===
Coordinate[] coord = CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());
start_offset===
4
end_offset===
84
Python OUTPUT===
 Coordinate[] coord = CoordinateArrays.removeRepeatedPoints(lr.getCoordinates()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public SimpleEdgeSetIntersector() {
  }
red_line===
SimpleEdgeSetIntersector
start_offset===
9
end_offset===
33
Python OUTPUT===
 public SimpleEdgeSetIntersector() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public EdgeSetIntersector() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (isBoundaryPointInternal(li, bdyNodes[1])) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (isBoundaryPointInternal(li, bdyNodes[1])) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isSelfIntersection\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private boolean isSelfIntersection;
red_line===
isSelfIntersection
start_offset===
18
end_offset===
36
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make numTests a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int numTests = 0;
red_line===
numTests
start_offset===
13
end_offset===
21
Python OUTPUT===
public static final int numTests = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List events = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List events = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"p1\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private Coordinate p0, p1;
red_line===
p1
start_offset===
25
end_offset===
27
Python OUTPUT===
 private Coordinate p0, p1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public SimpleSweepLineIntersector() {
  }
red_line===
SimpleSweepLineIntersector
start_offset===
9
end_offset===
35
Python OUTPUT===
 public SimpleSweepLineIntersector() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List startIndexList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List startIndexList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public MonotoneChainIndexer() {
  }
red_line===
MonotoneChainIndexer
start_offset===
9
end_offset===
29
Python OUTPUT===
 public MonotoneChainIndexer() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"startIndex\".
scn.ruleId===
1488
scn.suspCodeStr===
int[] startIndex = toIntArray(startIndexList);
red_line===
toIntArray(startIndexList)
start_offset===
23
end_offset===
49
Python OUTPUT===
 int[] startIndex = toIntArray(startIndexList); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List events = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List events = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List edges = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List edges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map ocaMap = new TreeMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map ocaMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public List getEdges() { return edges; }
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 public List getEdges() { return edges; } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public Iterator iterator() { return edges.iterator(); }
red_line===
Iterator
start_offset===
9
end_offset===
17
Python OUTPUT===
 public Iterator iterator() { return edges.iterator(); } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public EdgeList() {
  }
red_line===
EdgeList
start_offset===
9
end_offset===
17
Python OUTPUT===
 public EdgeList() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"matchEdge\".
scn.ruleId===
1488
scn.suspCodeStr===
Edge matchEdge = (Edge) ocaMap.get(oca);
red_line===
(Edge) ocaMap.get(oca)
start_offset===
21
end_offset===
43
Python OUTPUT===
 Edge matchEdge = (Edge) ocaMap.get(oca); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
int location[];
red_line===
[]
start_offset===
14
end_offset===
16
Python OUTPUT===
 int location[]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
location[i] = gl.location[i];
red_line===
location[i] = gl.location[i];
start_offset===
8
end_offset===
37
Python OUTPUT===
 location[i] = gl.location[i]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map nodeMap = new TreeMap();
red_line===
Map
start_offset===
2
end_offset===
5
Python OUTPUT===
 Map nodeMap = new TreeMap(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"nodeMap\"
scn.ruleId===
1700
scn.suspCodeStr===
Map nodeMap = new TreeMap();
red_line===
nodeMap
start_offset===
6
end_offset===
13
Python OUTPUT===
 Map nnodeMap= new TreeMap(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\".
scn.ruleId===
3824
scn.suspCodeStr===
Node node = (Node) nodeMap.get(coord);
red_line===
nodeMap.get(coord)
start_offset===
23
end_offset===
41
Python OUTPUT===
Node node = ( Node ) nodeMap.get ( coord ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public GraphComponent() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection segStrings = new ArrayList();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection segStrings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int NULL_VALUE = -1;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final int NULL_VALUE = - 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"depth\"
scn.ruleId===
1700
scn.suspCodeStr===
private int[][] depth = new int[2][3];
red_line===
depth
start_offset===
18
end_offset===
23
Python OUTPUT===
 private int[][] ddepth= new int[2][3]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (segmentIndex == maxSegmentIndex) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (segmentIndex == maxSegmentIndex) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make coord a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Coordinate coord;
red_line===
coord
start_offset===
20
end_offset===
25
Python OUTPUT===
public static final Coordinate coord ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make segmentIndex a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int segmentIndex;
red_line===
segmentIndex
start_offset===
13
end_offset===
25
Python OUTPUT===
public static final int segmentIndex ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make dist a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double dist;
red_line===
dist
start_offset===
16
end_offset===
20
Python OUTPUT===
public static final double dist ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
TopologyLocation elt[] = new TopologyLocation[2];
red_line===
[]
start_offset===
22
end_offset===
24
Python OUTPUT===
 TopologyLocation elt[] = new TopologyLocation[2]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List edges        = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List edges = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List edgeEndList  = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List edgeEndList = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public Iterator getEdgeIterator() { return edges.iterator(); }
red_line===
Iterator
start_offset===
9
end_offset===
17
Python OUTPUT===
 public Iterator getEdgeIterator() { return edges.iterator(); } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public Collection getEdgeEnds() { return edgeEndList; }
red_line===
Collection
start_offset===
9
end_offset===
19
Python OUTPUT===
 public Collection getEdgeEnds() { return edgeEndList; } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public Iterator getNodeIterator() { return nodes.iterator(); }
red_line===
Iterator
start_offset===
9
end_offset===
17
Python OUTPUT===
 public Iterator getNodeIterator() { return nodes.iterator(); } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public Collection getNodes() { return nodes.values(); }
red_line===
Collection
start_offset===
9
end_offset===
19
Python OUTPUT===
 public Collection getNodes() { return nodes.values(); } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (label != null && label.getLocation(geomIndex) == Location.BOUNDARY) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (label != null && label.getLocation(geomIndex) == Location.BOUNDARY) return true; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (pts[0].equals(pts[2]) ) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (pts[0].equals(pts[2]) ) return true; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Coordinate newPts[] = new Coordinate[2];
red_line===
[]
start_offset===
21
end_offset===
23
Python OUTPUT===
 Coordinate newPts[] = new Coordinate[2]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"edge \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
builder.append("edge " + name + ": ");
red_line===
"edge "
start_offset===
19
end_offset===
26
Python OUTPUT===
 builder.append("edge " + name + ": "); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"newe\".
scn.ruleId===
1488
scn.suspCodeStr===
Edge newe = new Edge(newPts, Label.toLineLabel(label));
red_line===
new Edge(newPts, Label.toLineLabel(label))
start_offset===
16
end_offset===
58
Python OUTPUT===
 Edge newe = new Edge(newPts, Label.toLineLabel(label)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected Map edgeMap = new TreeMap();
red_line===
Map
start_offset===
12
end_offset===
15
Python OUTPUT===
 protected Map edgeMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List edgeList;
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List edgeList; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator it = iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator it = iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
edgeList = new ArrayList(edgeMap.values());
red_line===
ArrayList
start_offset===
21
end_offset===
30
Python OUTPUT===
 edgeList = new ArrayList(edgeMap.values()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = getEdges();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = getEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"loc\".
scn.ruleId===
1854
scn.suspCodeStr===
int loc = Location.NONE;
red_line===
= Location.NONE
start_offset===
18
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("EdgeEndStar:   " + getCoordinate());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("EdgeEndStar: " + getCoordinate()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (edges.size() <= 0)
      return true;
red_line===
edges.size() <= 0
start_offset===
8
end_offset===
25
Python OUTPUT===
 if (edges.size() <= 0) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"d\".
scn.ruleId===
1488
scn.suspCodeStr===
double d = pbdDotNormal / normal.length();
red_line===
pbdDotNormal / normal.length()
start_offset===
13
end_offset===
43
Python OUTPUT===
 double d = pbdDotNormal / normal.length(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double ABx = B.x - A.x;
red_line===
ABx
start_offset===
9
end_offset===
12
Python OUTPUT===
 double ABx = B.x - A.x; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double ABy = B.y - A.y;
red_line===
ABy
start_offset===
9
end_offset===
12
Python OUTPUT===
 double ABy = B.y - A.y; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double ABz = B.getZ() - A.getZ();
red_line===
ABz
start_offset===
9
end_offset===
12
Python OUTPUT===
 double ABz = B.getZ() - A.getZ(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double CDx = D.x - C.x;
red_line===
CDx
start_offset===
9
end_offset===
12
Python OUTPUT===
 double CDx = D.x - C.x; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double CDy = D.y - C.y;
red_line===
CDy
start_offset===
9
end_offset===
12
Python OUTPUT===
 double CDy = D.y - C.y; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double CDz = D.getZ() - C.getZ();
red_line===
CDz
start_offset===
9
end_offset===
12
Python OUTPUT===
 double CDz = D.getZ() - C.getZ(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
if ( a[maxElementRow][i] == 0.0 )
        return null;
red_line===
null
start_offset===
15
end_offset===
19
Python OUTPUT===
 if ( a[maxElementRow][i] == 0.0 ) return null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Return a non null object.
scn.ruleId===
2225
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
13
end_offset===
17
Python OUTPUT===
 return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"h\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double H, h, S, s, e, f;
red_line===
h
start_offset===
14
end_offset===
15
Python OUTPUT===
 double H, h, S, s, e, f; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"h\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double H, h, T, t, S, s, e, f;
red_line===
h
start_offset===
14
end_offset===
15
Python OUTPUT===
 double H, h, T, t, S, s, e, f; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tx\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double hx, tx, hy, ty, C, c;
red_line===
tx
start_offset===
15
end_offset===
17
Python OUTPUT===
 double hx, tx, hy, ty, C, c; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tc\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double hc, tc, hy, ty, C, c, U, u;
red_line===
tc
start_offset===
15
end_offset===
17
Python OUTPUT===
 double hc, tc, hy, ty, C, c, U, u; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tc\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double hc, tc, hy, ty, C, c, U, u;
red_line===
tc
start_offset===
15
end_offset===
17
Python OUTPUT===
 double hc, tc, hy, ty, C, c, U, u; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tc\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double  hc, tc, hy, ty, C, c, U, u;
red_line===
tc
start_offset===
16
end_offset===
18
Python OUTPUT===
 double hc, tc, hy, ty, C, c, U, u; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove these useless parentheses.
scn.ruleId===
1110
scn.suspCodeStr===
c = ((((1.0-U)-u))-C*lo)/hi;
red_line===
(
start_offset===
10
end_offset===
11
Python OUTPUT===
 c = ((((10-U)-u))-C*lo) / hi; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"det\".
scn.ruleId===
1488
scn.suspCodeStr===
DD det = x1.multiply(y2).selfSubtract(y1.multiply(x2));
red_line===
x1.multiply(y2).selfSubtract(y1.multiply(x2))
start_offset===
13
end_offset===
58
Python OUTPUT===
 DD det = x1.multiply(y2).selfSubtract(y1.multiply(x2)); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double d = ch - '0';
red_line===
-
start_offset===
22
end_offset===
23
Python OUTPUT===
 double d = ch - '0 ';
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map linestringMap;
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map linestringMap; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
linestringMap = new HashMap();
red_line===
HashMap
start_offset===
24
end_offset===
31
Python OUTPUT===
 linestringMap = new HashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map linestringMap;
red_line===
Map
start_offset===
12
end_offset===
15
Python OUTPUT===
 private Map linestringMap; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = (new LineStringTransformer(linestringMap)).transform(inputGeom);
red_line===
(new LineStringTransformer(linestringMap)).transform(inputGeom)
start_offset===
22
end_offset===
85
Python OUTPUT===
 Geometry result = (new LineStringTransformer(linestringMap)).transform(inputGeom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List itemsFound = visitor.getItems();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List itemsFound = visitor.getItems(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList items = new ArrayList();
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList items = new ArrayList(); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"seg\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
pts[pts.length - 1] = seg.p1;
red_line===
seg.p1
start_offset===
26
end_offset===
32
Python OUTPUT===
 pts[pts.length - 1] = seg.p1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"minArea\".
scn.ruleId===
1854
scn.suspCodeStr===
double minArea = tolerance;
red_line===
= tolerance
start_offset===
19
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MAX_AREA\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static double MAX_AREA = Double.MAX_VALUE;
red_line===
MAX_AREA
start_offset===
25
end_offset===
33
Python OUTPUT===
 public static double MAXMAX_AREADouble.MAX_VALUE; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make MAX_AREA a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static double MAX_AREA = Double.MAX_VALUE;
red_line===
MAX_AREA
start_offset===
25
end_offset===
33
Python OUTPUT===
public static final double MAX_AREA = Double . MAX_VALUE ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"simplifyVertex()\".
scn.ruleId===
2259
scn.suspCodeStr===
minArea = simplifyVertex(vwLine);
red_line===
simplifyVertex
start_offset===
16
end_offset===
30
Python OUTPUT===
 minArea = simplifyVertex(vwLine); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
if (removeDegenerateRings && ! (simpResult instanceof LinearRing))
  		return null;
red_line===
;
start_offset===
16
end_offset===
17
Python OUTPUT===
 if (removeDegenrateRings && ! (simpResult instanceof LinearRing)) return null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List querySegs = outputIndex.query(candidateSeg);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List querySegs = outputIndex.query(candidateSeg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List querySegs = inputIndex.query(candidateSeg);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List querySegs = inputIndex.query(candidateSeg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (hasBadInputIntersection(parentLine, sectionIndex, candidateSeg)) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (hasBadInputIntersection(parentLine, sectionIndex, candidateSeg)) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (segIndex >= sectionIndex[0] && segIndex < sectionIndex[1])
      return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (segIndex >= sectionIndex[0] && segIndex < sectionIndex[1]) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected Set edges = new HashSet();
red_line===
Set
start_offset===
12
end_offset===
15
Python OUTPUT===
 protected Set edges = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected Set dirEdges = new HashSet();
red_line===
Set
start_offset===
12
end_offset===
15
Python OUTPUT===
 protected Set dirEdges = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
public Collection getNodes()  {    return nodeMap.values();  }
red_line===
Collection
start_offset===
9
end_offset===
19
Python OUTPUT===
 public Collection getNodes() { return nodeMap.values(); } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List outEdges = node.getOutEdges().getEdges();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List outEdges = node.getOutEdges().getEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List nodesFound = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List nodesFound = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List subgraphs = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List subgraphs = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Stack nodeStack = new Stack();
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
 Stack nodeStack = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".
scn.ruleId===
1149
scn.suspCodeStr===
Stack nodeStack = new Stack();
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
Deque nodeStack = new Deque ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected Set edges = new HashSet();
red_line===
Set
start_offset===
12
end_offset===
15
Python OUTPUT===
 protected Set edges = new HashSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List dirEdges = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List dirEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges0 = DirectedEdge.toEdges(node0.getOutEdges().getEdges());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges0 = DirectedEdge.toEdges(node0.getOutEdges().getEdges()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Set commonEdges = new HashSet(edges0);
red_line===
Set
start_offset===
4
end_offset===
7
Python OUTPUT===
 Set commonEdges = new HashSet(edges0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges1 = DirectedEdge.toEdges(node1.getOutEdges().getEdges());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges1 = DirectedEdge.toEdges(node1.getOutEdges().getEdges()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map nodeMap = new TreeMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map nodeMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"nodeMap\"
scn.ruleId===
1700
scn.suspCodeStr===
private Map nodeMap = new TreeMap();
red_line===
nodeMap
start_offset===
14
end_offset===
21
Python OUTPUT===
 private Map nnodeMap= new TreeMap(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected List outEdges = new ArrayList();
red_line===
List
start_offset===
12
end_offset===
16
Python OUTPUT===
 protected List outEdges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Iterator it = iterator();
red_line===
Iterator
start_offset===
4
end_offset===
12
Python OUTPUT===
 Iterator it = iterator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"p1\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
protected Coordinate p0, p1;
red_line===
p1
start_offset===
27
end_offset===
29
Python OUTPUT===
 protected Coordinate p0, p1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public GraphComponent() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList items;
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList items; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
items = new ArrayList();
red_line===
ArrayList
start_offset===
16
end_offset===
25
Python OUTPUT===
 items = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"minItem\".
scn.ruleId===
1488
scn.suspCodeStr===
Object minItem = items.get(1);
red_line===
items.get(1)
start_offset===
21
end_offset===
33
Python OUTPUT===
 Object minItem = items.get(1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public UniqueCoordinateArrayFilter() { }
red_line===
UniqueCoordinateArrayFilter
start_offset===
9
end_offset===
36
Python OUTPUT===
 public UniqueCoordinateArrayFilter() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Set<Coordinate> coordSet = new HashSet<Coordinate>();
red_line===
<Coordinate>
start_offset===
48
end_offset===
60
Python OUTPUT===
\u003c\u003e > coordSet = new HashSet < Coordinate > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<Coordinate> list = new ArrayList<Coordinate>();
red_line===
<Coordinate>
start_offset===
47
end_offset===
59
Python OUTPUT===
\u003c\u003e > list = new ArrayList < Coordinate > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"totalTime\" which hides the field declared at line 24.
scn.ruleId===
1117
scn.suspCodeStr===
long totalTime = getTime();
red_line===
totalTime
start_offset===
9
end_offset===
18
Python OUTPUT===
 long tottotalTimegetTime(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList tokenList = new ArrayList();
red_line===
ArrayList
start_offset===
3
end_offset===
12
Python OUTPUT===
 ArrayList tokenList = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String NEWLINE = System.getProperty("line.separator");
red_line===
static
start_offset===
14
end_offset===
20
Python OUTPUT===
public static final String NEWLINE = System . getProperty ( " line.separator " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
stackTrace += lineNumberReader.readLine() + NEWLINE;
red_line===
stackTrace
start_offset===
13
end_offset===
23
Python OUTPUT===
 stackTrace += lineNumberReader.readLine() + NEWLINE; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ipt\".
scn.ruleId===
1854
scn.suspCodeStr===
pts[ipt++] = new Coordinate(pts[0]);
red_line===
ipt++
start_offset===
8
end_offset===
13
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"iPt\".
scn.ruleId===
1854
scn.suspCodeStr===
pts[iPt++] = coord(centreX, centreY);
red_line===
iPt++
start_offset===
8
end_offset===
13
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double XsegLen = dim.getEnvelope().getWidth() / nSide;
red_line===
XsegLen
start_offset===
11
end_offset===
18
Python OUTPUT===
 double XsegLen = dim.getEnvelope().getWidth() + nSide; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double YsegLen = dim.getEnvelope().getHeight() / nSide;
red_line===
YsegLen
start_offset===
11
end_offset===
18
Python OUTPUT===
 double YsegLen = dim.getEnvelope().getHeight() + nSide; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make base a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Coordinate base;
red_line===
base
start_offset===
22
end_offset===
26
Python OUTPUT===
public static final Coordinate base ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make centre a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Coordinate centre;
red_line===
centre
start_offset===
22
end_offset===
28
Python OUTPUT===
public static final Coordinate centre ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make width a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double width;
red_line===
width
start_offset===
18
end_offset===
23
Python OUTPUT===
public static final double width ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make height a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double height;
red_line===
height
start_offset===
18
end_offset===
24
Python OUTPUT===
public static final double height ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class cls = obj.getClass();
red_line===
Class
start_offset===
6
end_offset===
11
Python OUTPUT===
 Class cls = obj.getClass(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DEBUG_PROPERTY_NAME\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String DEBUG_PROPERTY_NAME = "jts.debug";
red_line===
DEBUG_PROPERTY_NAME
start_offset===
23
end_offset===
42
Python OUTPUT===
 public static String DDEBUG_PROPERTY_NAME= "jts.debug"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DEBUG_PROPERTY_VALUE_ON\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String DEBUG_PROPERTY_VALUE_ON = "on";
red_line===
DEBUG_PROPERTY_VALUE_ON
start_offset===
23
end_offset===
46
Python OUTPUT===
 public static String DDEBUG_PROPERTY_VALUE_ON= "on"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DEBUG_PROPERTY_VALUE_TRUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String DEBUG_PROPERTY_VALUE_TRUE = "true";
red_line===
DEBUG_PROPERTY_VALUE_TRUE
start_offset===
23
end_offset===
48
Python OUTPUT===
 public static String DDEBUG_PROPERTY_VALUE_TRUE= "true"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("JTS Debugging is " +
                       (debugOn ? "ON" : "OFF") );
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("JTS Debugging is " + (debugOn ? "ON" : "OFF") ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
4
end_offset===
11
Python OUTPUT===
 ret
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"p1\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private Coordinate p0, p1;
red_line===
p1
start_offset===
27
end_offset===
29
Python OUTPUT===
 private Coordinate p0, p1; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
out = System.out;
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 out = System.out; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make DEBUG_PROPERTY_NAME a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String DEBUG_PROPERTY_NAME = "jts.debug";
red_line===
DEBUG_PROPERTY_NAME
start_offset===
23
end_offset===
42
Python OUTPUT===
public static final String DEBUG_PROPERTY_NAME = " jts.debug " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make DEBUG_PROPERTY_VALUE_ON a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String DEBUG_PROPERTY_VALUE_ON = "on";
red_line===
DEBUG_PROPERTY_VALUE_ON
start_offset===
23
end_offset===
46
Python OUTPUT===
public static final String DEBUG_PROPERTY_VALUE_ON = " on " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make DEBUG_PROPERTY_VALUE_TRUE a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String DEBUG_PROPERTY_VALUE_TRUE = "true";
red_line===
DEBUG_PROPERTY_VALUE_TRUE
start_offset===
23
end_offset===
48
Python OUTPUT===
public static final String DEBUG_PROPERTY_VALUE_TRUE = " true " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map counts = new HashMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map counts = new HashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public ObjectCounter() {
  }
red_line===
ObjectCounter
start_offset===
9
end_offset===
22
Python OUTPUT===
 public ObjectCounter() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public CoordinateCountFilter() { }
red_line===
CoordinateCountFilter
start_offset===
9
end_offset===
30
Python OUTPUT===
 public CoordinateCountFilter() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = geom0.intersection(geom1);
red_line===
geom0.intersection(geom1)
start_offset===
24
end_offset===
49
Python OUTPUT===
 Geometry result = geom0.intersection(geom1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = geom0.union(geom1);
red_line===
geom0.union(geom1)
start_offset===
24
end_offset===
42
Python OUTPUT===
 Geometry result = geom0.union(geom1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = geom0.difference(geom1);
red_line===
geom0.difference(geom1)
start_offset===
24
end_offset===
47
Python OUTPUT===
 Geometry result = geom0.difference(geom1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = geom0.symDifference(geom1);
red_line===
geom0.symDifference(geom1)
start_offset===
24
end_offset===
50
Python OUTPUT===
 Geometry result = geom0.symDifference(geom1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = geom.buffer(distance);
red_line===
geom.buffer(distance)
start_offset===
24
end_offset===
45
Python OUTPUT===
 Geometry result = geom.buffer(distance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"reducePW\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry reducePW = reducePointwise(geom);
red_line===
reducePointwise(geom)
start_offset===
24
end_offset===
45
Python OUTPUT===
 Geometry reducePW = reducePointwise(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geomEdit\".
scn.ruleId===
1488
scn.suspCodeStr===
GeometryEditor geomEdit = new GeometryEditor(newFactory);
red_line===
new GeometryEditor(newFactory)
start_offset===
29
end_offset===
59
Python OUTPUT===
 GeometryEditor geomEdit = new GeometryEditor(newFactory); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Geometry geom[] = new Geometry[2];
red_line===
[]
start_offset===
17
end_offset===
19
Python OUTPUT===
 Geometry geom[] = new Geometry[2]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geom\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry geom = cbr.removeCommonBits(geom0.copy());
red_line===
cbr.removeCommonBits(geom0.copy())
start_offset===
20
end_offset===
54
Python OUTPUT===
 Geometry geom = cbr.removeCommonBits(geom0.copy()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public CommonBits() {
  }
red_line===
CommonBits
start_offset===
9
end_offset===
19
Python OUTPUT===
 public CommonBits() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"commonMantissaBitsCount\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int commonMantissaBitsCount = 53;
red_line===
commonMantissaBitsCount
start_offset===
14
end_offset===
37
Python OUTPUT===
 private int c= 53; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"zeroed\".
scn.ruleId===
1488
scn.suspCodeStr===
long zeroed = bits & mask;
red_line===
bits & mask
start_offset===
18
end_offset===
29
Python OUTPUT===
 long zeroed = bits & mask; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"commonBits\"
scn.ruleId===
1700
scn.suspCodeStr===
private long commonBits = 0;
red_line===
commonBits
start_offset===
15
end_offset===
25
Python OUTPUT===
 private long ccommonBits= 0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List lines = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"validPts\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate[] validPts = new Coordinate[] { pts[0], pts[0]};
red_line===
new Coordinate[] { pts[0], pts[0]}
start_offset===
28
end_offset===
62
Python OUTPUT===
 Coordinate[] validPts = new Coordinate[] { pts[0], pts[0]}; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (segmentFraction < 0.0 || segmentFraction > 1.0)
      return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (segmentFraction < 0.0 || segmentFraction > 1.0) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return 0.0;
red_line===
0.0
start_offset===
11
end_offset===
14
Python OUTPUT===
 return 0.0
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"loc\".
scn.ruleId===
1488
scn.suspCodeStr===
LinearLocation loc = new LinearLocation(minComponentIndex, minSegmentIndex, minFrac);
red_line===
new LinearLocation(minComponentIndex, minSegmentIndex, minFrac)
start_offset===
25
end_offset===
88
Python OUTPUT===
 LinearLocation loc = new LinearLocation(minComponentIndex, minSegmentIndex, minFrac); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (vertexIndex < currentLine.getNumPoints() - 1)
      return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (vertexIndex < currentLine.getNumPoints() - 1) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List lines = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection edges = graph.getVertexEdges();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection edges = graph.getVertexEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Stack nodeEdgeStack = new Stack();
red_line===
Stack
start_offset===
10
end_offset===
15
Python OUTPUT===
 private Stack nodeEdgeStack = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".
scn.ruleId===
1149
scn.suspCodeStr===
private Stack nodeEdgeStack = new Stack();
red_line===
Stack
start_offset===
10
end_offset===
15
Python OUTPUT===
private Deque nodeEdgeStack = new Deque ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dest\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate dest = dest();
red_line===
= dest()
start_offset===
20
end_offset===
28
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"orig\" which hides the field declared at line 68.
scn.ruleId===
1117
scn.suspCodeStr===
Coordinate orig = orig();
red_line===
orig
start_offset===
15
end_offset===
19
Python OUTPUT===
 Coordinate oriorigorig(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"comp\".
scn.ruleId===
1488
scn.suspCodeStr===
int comp = compareAngularDirection(e);
red_line===
compareAngularDirection(e)
start_offset===
15
end_offset===
41
Python OUTPUT===
 int comp = compareAngularDirection(e); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"ePrev\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
ePrev.insertAfter(eAdd);
red_line===
ePrev.insertAfter
start_offset===
4
end_offset===
21
Python OUTPUT===
 ePrev.insertAfter(eAdd); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map vertexMap = new HashMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map vertexMap = new HashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public EdgeGraph() {
  }
red_line===
EdgeGraph
start_offset===
9
end_offset===
18
Python OUTPUT===
 public EdgeGraph() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"e\".
scn.ruleId===
1488
scn.suspCodeStr===
HalfEdge e = insert(orig, dest, eAdj);
red_line===
insert(orig, dest, eAdj)
start_offset===
17
end_offset===
41
Python OUTPUT===
 HalfEdge e = insert(orig, dest, eAdj); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(CURRENT_VERSION);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(CURRENT_VERSION); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this expression which always evaluates to \"true\"
scn.ruleId===
2589
scn.suspCodeStr===
if (RELEASE_INFO != null && RELEASE_INFO.length() > 0)
      return ver + " " + RELEASE_INFO;
red_line===
RELEASE_INFO != null
start_offset===
8
end_offset===
28
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TestPerfDistanceGeomSet() {
  }
red_line===
TestPerfDistanceGeomSet
start_offset===
9
end_offset===
32
Python OUTPUT===
 public TestPerfDistanceGeomSet() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (verbose) System.out.println("Running with " + num + " points");
red_line===
System.out
start_offset===
17
end_offset===
27
Python OUTPUT===
 if (verbose) System.out.println("Running with " + num + " points"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (! verbose) System.out.print(num + ", ");
red_line===
System.out
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (! verbose) System.out.print(num + ", "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (! verbose) System.out.println(sw.getTimeString());
red_line===
System.out
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (! verbose) System.out.println(sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Finished in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("       (Distance = " + dist + ")");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(" (Distance = " + dist + ")"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = geom[i].distance(geom[j]);
red_line===
= geom[i].distance(geom[j])
start_offset===
19
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
int nPts = (int) (nPtsRange * Math.random()) + nPtsMin;
red_line===
Math.random
start_offset===
36
end_offset===
47
Python OUTPUT===
 int nPts = (int) (nPtsRange * Math.random()) + nPtsMin; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"g\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon g = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
16
end_offset===
34
Python OUTPUT===
 Polygon g = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TestPerfDistanceGeomPair() {
  }
red_line===
TestPerfDistanceGeomPair
start_offset===
9
end_offset===
33
Python OUTPUT===
 public TestPerfDistanceGeomPair() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (verbose) System.out.println("Running with " + nPts + " points");
red_line===
System.out
start_offset===
17
end_offset===
27
Python OUTPUT===
 if (verbose) System.out.println("Running with " + nPts + " points"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (! verbose) System.out.print(nPts + ": ");
red_line===
System.out
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (! verbose) System.out.print(nPts + ": "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist2\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist2 = 0.0;
red_line===
= 0.0
start_offset===
17
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (! verbose) System.out.println(sw.getTimeString());
red_line===
System.out
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (! verbose) System.out.println(sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Finished in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("       (Distance = " + dist + ")");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(" (Distance = " + dist + ")"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"fastDist\".
scn.ruleId===
1854
scn.suspCodeStr===
IndexedFacetDistance fastDist = new IndexedFacetDistance(geom[0]);
red_line===
= new IndexedFacetDistance(geom[0])
start_offset===
34
end_offset===
69
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist2\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist2 = 0.0;
red_line===
= 0.0
start_offset===
17
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = 0.0;
red_line===
= 0.0
start_offset===
16
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
dist = geom[0].distance(geom[1].getFactory().createPoint(p));
red_line===
= geom[0].distance(geom[1].getFactory().createPoint(p))
start_offset===
11
end_offset===
66
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TestStressEnvelopeMinMaxDistance() {
  }
red_line===
TestStressEnvelopeMinMaxDistance
start_offset===
9
end_offset===
41
Python OUTPUT===
 public TestStressEnvelopeMinMaxDistance() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("distance: " + distance
        + "   minMaxDist: " + minMaxDistance);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("distance: " + distance + " minMaxDist: " + minMaxDistance); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ERROR - distance: " + distance
          + "   minMaxDist: " + minMaxDistance);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("ERROR - distance: " + distance + " minMaxDist: " + minMaxDistance); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = loadWKT("C:\\data\\martin\\proj\\jts\\sandbox\\jts\\testdata\\world.wkt");
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = loadWKT("C:\\data\\martin\\proj\\jts\\sandbox\\jts\\testdata\\world.wkt"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TestPerfFastDistanceFile() {
  }
red_line===
TestPerfFastDistanceFile
start_offset===
9
end_offset===
33
Python OUTPUT===
 public TestPerfFastDistanceFile() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Count = " + maxToScan
        + "   Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Count = " + maxToScan + " Finished in " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = CachedFastDistance.getDistance(g1, g2);
red_line===
= CachedFastDistance.getDistance(g1, g2)
start_offset===
20
end_offset===
60
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = g1.distance(g2);
red_line===
= g1.distance(g2)
start_offset===
18
end_offset===
35
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"MAX_GEOMS\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final int MAX_GEOMS = 40;
red_line===
MAX_GEOMS
start_offset===
27
end_offset===
36
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = loadWKT(file);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = loadWKT(file); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TestPerfDistanceLinesPoints() {
  }
red_line===
TestPerfDistanceLinesPoints
start_offset===
9
end_offset===
36
Python OUTPUT===
 public TestPerfDistanceLinesPoints() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Query points = " + pts.length 
        + "     Target points = " + target.getNumPoints());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Query points = " + pts.length + " Target points = " + target.getNumPoints()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = 0.0;
red_line===
= 0.0
start_offset===
16
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (! verbose) System.out.println(sw.getTimeString());
red_line===
System.out
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (! verbose) System.out.println(sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(name + " - Run time: " + sw.getTimeString());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(name + " - Run time: " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = bbd.distance(pts[i]);
red_line===
= bbd.distance(pts[i])
start_offset===
20
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = geom.distance(pts[i]);
red_line===
= geom.distance(pts[i])
start_offset===
19
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Envelope bcEnv_Albers = new Envelope(-45838, 1882064, 255756, 1733287);
red_line===
bcEnv_Albers
start_offset===
13
end_offset===
25
Python OUTPUT===
 Envelope bcEnv_Albers = new Envelope(-45838, 1882064, 255756, 1733287); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\nRunning with " + nPts + " points (size-product = " + nPts * nPts2);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("\nRunning with " + nPts + " points (size-product = " + nPts * nPts2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = DistanceOp.distance(geom1, geom2);
red_line===
= DistanceOp.distance(geom1, geom2)
start_offset===
16
end_offset===
51
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = IndexedFacetDistance.distance(geom1, geom2);
red_line===
= IndexedFacetDistance.distance(geom1, geom2)
start_offset===
16
end_offset===
61
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = DistanceOp.distance(geom1, pt2);
red_line===
= DistanceOp.distance(geom1, pt2)
start_offset===
16
end_offset===
49
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = IndexedFacetDistance.distance(geom1, pt2);
red_line===
= IndexedFacetDistance.distance(geom1, pt2)
start_offset===
16
end_offset===
59
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dist\".
scn.ruleId===
1854
scn.suspCodeStr===
double dist = CachedFastDistance.getDistance(geom1, pt2);
red_line===
= CachedFastDistance.getDistance(geom1, pt2)
start_offset===
16
end_offset===
60
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"g2\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry g2 = gsf.createSineStar().getBoundary();
red_line===
gsf.createSineStar().getBoundary()
start_offset===
18
end_offset===
52
Python OUTPUT===
 Geometry g2 = gsf.createSineStar().getBoundary(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public BufferCorrectnessTest() {  }
red_line===
BufferCorrectnessTest
start_offset===
9
end_offset===
30
Python OUTPUT===
 public BufferCorrectnessTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public IteratedBufferStressTest() {  }
red_line===
IteratedBufferStressTest
start_offset===
9
end_offset===
33
Python OUTPUT===
 public IteratedBufferStressTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("----------------------  " + totalSW.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("---------------------- " + totalSW.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Buffering with dist = " + dist);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("Buffering with dist = " + dist); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Buffer result has " + buf.getNumPoints() + " vertices");
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("Buffer result has " + buf.getNumPoints() + " vertices"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iter # " + iter++);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Iter # " + iter++); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public OffsetCurveCorrectnessTest() {  }
red_line===
OffsetCurveCorrectnessTest
start_offset===
9
end_offset===
35
Python OUTPUT===
 public OffsetCurveCorrectnessTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(curve);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(curve); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"curve\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry curve = g.getFactory().createLineString(curvePts);
red_line===
g.getFactory().createLineString(curvePts)
start_offset===
21
end_offset===
62
Python OUTPUT===
 Geometry curve = g.getFactory().createLineString(curvePts); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
segFrac = midIndex / numPts;
red_line===
/
start_offset===
23
end_offset===
24
Python OUTPUT===
 segFrac = midIndex  /  numPts;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("FAILS!");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException("FAILS!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs = createRandomDepthSegments(100);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segs = createRandomDepthSegments(100); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs = createRandomDepthSegments(100);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segs = createRandomDepthSegments(100); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segs = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running with size " + size);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Running with size " + size); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iter # " + iter++);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Iter # " + iter++); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iter # " + iter++);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Iter # " + iter++); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("FAILS!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("FAILS!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(seg1 + " " + seg2 + " " + seg3);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(seg1 + " " + seg2 + " " + seg3); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
return (int) (max * Math.random());
red_line===
Math.random
start_offset===
24
end_offset===
35
Python OUTPUT===
 return (int) (max * Math.random()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"scale\".
scn.ruleId===
1854
scn.suspCodeStr===
double scale = 10;
red_line===
= 10
start_offset===
17
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"scale\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double ang = 2 * Math.PI * Math.random();
red_line===
ang =
start_offset===
11
end_offset===
16
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (seg2.maxY() <= seg1.minY()) return false;
red_line===
if
start_offset===
6
end_offset===
8
Python OUTPUT===
 if (seg2.maxY() <= seg1.minY()) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"leftDepth\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int leftDepth;
red_line===
leftDepth
start_offset===
16
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this expression which always evaluates to \"true\"
scn.ruleId===
2589
scn.suspCodeStr===
if (orientIndex == 0)
        orientIndex = -1 * other.upwardSeg.orientationIndex(upwardSeg);
red_line===
orientIndex == 0
start_offset===
10
end_offset===
26
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public RandomLineBufferStressTest() {  }
red_line===
RandomLineBufferStressTest
start_offset===
9
end_offset===
35
Python OUTPUT===
 public RandomLineBufferStressTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(line);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(line); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Input: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Input: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(g);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Buffer: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Buffer: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(buf);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(buf); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = fileRdr.read();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = fileRdr.read(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MAX_FEATURE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int MAX_FEATURE = 1;
red_line===
MAX_FEATURE
start_offset===
13
end_offset===
24
Python OUTPUT===
 static int MMAX_FEATURE= 1; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"sw\".
scn.ruleId===
1854
scn.suspCodeStr===
Stopwatch sw = new Stopwatch();
red_line===
= new Stopwatch()
start_offset===
16
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(msg);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(WKTWriter.toPoint(validator.getErrorLocation()));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(WKTWriter.toPoint(validator.getErrorLocation())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(g);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
if (! buf.isValid()) throw new RuntimeException("buffer not valid!");
red_line===
RuntimeException
start_offset===
35
end_offset===
51
Python OUTPUT===
 if (! buf.isValid()) throw new RuntimeException("buffer not valid!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public PolygonBufferStressTest() {
  }
red_line===
PolygonBufferStressTest
start_offset===
9
end_offset===
32
Python OUTPUT===
 public PolygonBufferStressTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"shapeFact\".
scn.ruleId===
1854
scn.suspCodeStr===
GeometricShapeFactory shapeFact = new GeometricShapeFactory(fact);
red_line===
= new GeometricShapeFactory(fact)
start_offset===
36
end_offset===
69
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"geomStr\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String geomStr;
red_line===
geomStr
start_offset===
11
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(g);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
ex.printStackTrace();
red_line===
  ex.print
start_offset===
4
end_offset===
14
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("FAILED!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("FAILED!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iter: " + i + " --------------------------------------------------------");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Iter: " + i + " --------------------------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Buffer (" + dist + ")");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Buffer (" + dist + ")"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iter: " + i + " --------------------------------------------------------");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Iter: " + i + " --------------------------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Pos Buffer (" + dist + ")");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Pos Buffer (" + dist + ")"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Neg Buffer (" + -dist + ")");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Neg Buffer (" + -dist + ")"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = fileRdr.read();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = fileRdr.read(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public FileBufferPerfTest() {
  }
red_line===
FileBufferPerfTest
start_offset===
9
end_offset===
27
Python OUTPUT===
 public FileBufferPerfTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
ex.printStackTrace();
red_line===
printStackTrace();
start_offset===
9
end_offset===
27
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Geom count = " + polys.size() + "   distance = " + distance);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Geom count = " + polys.size() + " distance = " + distance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("   Time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Time = " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\nRunning with # pts " + sineStar.getNumPoints() );
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("\nRunning with # pts " + sineStar.getNumPoints() ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"NUM_GEOMS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int NUM_GEOMS = 100;
red_line===
NUM_GEOMS
start_offset===
13
end_offset===
22
Python OUTPUT===
 static int NNUM_GEOMS= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geom\" which hides the field declared at line 45.
scn.ruleId===
1117
scn.suspCodeStr===
Geometry geom = TestShapeFactory.createExtentWithHoles(ellipses);
red_line===
geom
start_offset===
13
end_offset===
17
Python OUTPUT===
 Geometry geogeomTestShapeFactory.createExtentWithHoles(ellipses); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\nRunning Slanted Ellipses: # geoms = " + NUM_GEOMS + ", # pts " + npts );
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("\nRunning Slanted Ellipses: # geoms = " + NUM_GEOMS + ", # pts " + npts ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List rings = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List rings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List rings = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List rings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List results = quadtree.query(innerRing.getEnvelopeInternal());
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List results = quadtree.query(innerRing.getEnvelopeInternal()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static int SIZE = 10000;
red_line===
SIZE
start_offset===
20
end_offset===
24
Python OUTPUT===
 public static int SSIZE= 10000; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public ValidStressTest() {
  }
red_line===
ValidStressTest
start_offset===
9
end_offset===
24
Python OUTPUT===
 public ValidStressTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(geom);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running " + name);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Running " + name); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Is Valid = " + isValid 
        + "           Time: " + sw.getTimeString() );
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Is Valid = " + isValid + " Time: " + sw.getTimeString() ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ipts\".
scn.ruleId===
1854
scn.suspCodeStr===
pts[ipts++] = new Coordinate(pts[0]);
red_line===
ipts++
start_offset===
5
end_offset===
11
Python OUTPUT===
 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"mp\".
scn.ruleId===
1488
scn.suspCodeStr===
MultiPolygon mp = geomFact.createMultiPolygon(new Polygon[] { comb1, comb2 } );
red_line===
geomFact.createMultiPolygon(new Polygon[] { comb1, comb2 } )
start_offset===
22
end_offset===
82
Python OUTPUT===
 MultiPolygon mp = geomFact.createMultiPolygon(new Polygon[] { comb1, comb2 } ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make SIZE a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static int SIZE = 10000;
red_line===
SIZE
start_offset===
20
end_offset===
24
Python OUTPUT===
public static final int SIZE = 10000 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static SIZE\" field final
scn.ruleId===
1444
scn.suspCodeStr===
t.printStackTrace();
red_line===
ace(
start_offset===
20
end_offset===
24
Python OUTPUT===
final t . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
private PrintStream outStream = System.out;
red_line===
System.out
start_offset===
34
end_offset===
44
Python OUTPUT===
 private PrintStream outStream = System.out; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Number of geoms read: " + geoms.size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Number of geoms read: " + geoms.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Number of geoms filtered: " + geomsFilt.size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Number of geoms filtered: " + geomsFilt.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Number of cases output: " + caseCount);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Number of cases output: " + caseCount); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry result = OverlayNG.overlay(geom, geom1, OverlayNG.INTERSECTION);
red_line===
= OverlayNG.overlay(geom, geom1, OverlayNG.INTERSECTION)
start_offset===
22
end_offset===
78
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> flat = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
39
end_offset===
49
Python OUTPUT===
\u003c\u003e flat = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> filt = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
39
end_offset===
49
Python OUTPUT===
\u003c\u003e filt = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_X\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_X = 100;
red_line===
ORG_X
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_X= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_Y\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_Y = ORG_X;
red_line===
ORG_Y
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_Y= ORG_X; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double SIZE = 2 * ORG_X;
red_line===
SIZE
start_offset===
16
end_offset===
20
Python OUTPUT===
 static double SSIZE= 2 * ORG_X; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"N_ARMS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int N_ARMS = 6;
red_line===
N_ARMS
start_offset===
13
end_offset===
19
Python OUTPUT===
 static int NN_ARMS= 6; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ARM_RATIO\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ARM_RATIO = 0.3;
red_line===
ARM_RATIO
start_offset===
16
end_offset===
25
Python OUTPUT===
 static double AARM_RATIO= 0.3; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"GRID_SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int GRID_SIZE = 20;
red_line===
GRID_SIZE
start_offset===
13
end_offset===
22
Python OUTPUT===
 static int GGRID_SIZE= 20; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"GRID_CELL_SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double GRID_CELL_SIZE = SIZE / GRID_SIZE;
red_line===
GRID_CELL_SIZE
start_offset===
16
end_offset===
30
Python OUTPUT===
 static double GGRID_CELL_SIZE= SIZE + GRID_SIZE; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"NUM_CASES\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int NUM_CASES = GRID_SIZE * GRID_SIZE;
red_line===
NUM_CASES
start_offset===
13
end_offset===
22
Python OUTPUT===
 static int NNUM_CASES= GRID_SIZE * GRID_SIZE; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"iter\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 private int i= 0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("OverlaySR perf test");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("OverlaySR perf test"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# Iterations: " + N_ITER);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# Iterations: " + N_ITER); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# B geoms: " + NUM_CASES);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# B geoms: " + NUM_CASES); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Precision scale: " + PREC_SCALE_FACTOR);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Precision scale: " + PREC_SCALE_FACTOR); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\n-------  Running with A: # pts = " + npts + "   B # pts = " +  nptsB);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("\n------- Running with A: # pts = " + npts + " B # pts = " + nptsB); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(geomA);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(geomA); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(g);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"iter\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polyList = PolygonExtracter.getPolygons(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polyList = PolygonExtracter.getPolygons(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SCALE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double SCALE = 100000000;
red_line===
SCALE
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double SSCALE= 100000000; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(msg);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
System.out.printf("Running %d tests\n", N_TESTS);
red_line===
System.out.printf("Running %d tests\n", N_TESTS)
start_offset===
4
end_offset===
52
Python OUTPUT===
 System.out.printf("Running %d tests\n", N_TESTS); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\n============================");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("\n============================"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
System.out.printf("Tests: %d  Errors: %d\n", N_TESTS, errCount);
red_line===
System.out.printf("Tests: %d  Errors: %d\n", N_TESTS, errCount)
start_offset===
4
end_offset===
67
Python OUTPUT===
 System.out.printf("Tests: %d Errors: %d\n", N_TESTS, errCount); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(stats());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(stats()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.printf("ERROR - %s\n", ex.getMessage());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.printf("ERROR - %s\n", ex.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(poly1);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(poly1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(poly2);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(poly2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
return String.format("\nTest %d: %s   (# errs: %d = %d%%)\n", testIndex, testDesc, 
        errCount, (int) (100 * errCount) / testIndex );
red_line===
String.format("\nTest %d: %s   (# errs: %d 
start_offset===
11
end_offset===
54
Python OUTPUT===
 return String.format("\nTest %d: %s (# errs: %d = %d%%)\n", testIndex, testDesc, errCount, (int) (100 * errCount) / testIndex ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"int\".
scn.ruleId===
1905
scn.suspCodeStr===
return String.format("\nTest %d: %s   (# errs: %d = %d%%)\n", testIndex, testDesc, 
        errCount, (int) (100 * errCount) / testIndex );
red_line===
int
start_offset===
19
end_offset===
22
Python OUTPUT===
 return String.form"\nTest %d: %s (# errs: %d = %d%%)\n", testIndex, testDesc, errCount, (int) (100 * errCount)  /  testIndex ); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("INVALID!");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("INVALID!"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(poly);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(poly); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
int index = (int) (selection.size() * Math.random());
red_line===
Math.random
start_offset===
44
end_offset===
55
Python OUTPUT===
 int index = (int) (selection.size() * Math.random()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> selection = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
44
end_offset===
54
Python OUTPUT===
\u003c\u003e selection = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = cellsSelect.union();
red_line===
cellsSelect.union()
start_offset===
20
end_offset===
39
Python OUTPUT===
 Geometry poly = cellsSelect.union(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"diagram\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry diagram = builder.getDiagram( sitesGeom.getFactory() );
red_line===
builder.getDiagram( sitesGeom.getFactory() )
start_offset===
23
end_offset===
67
Python OUTPUT===
 Geometry diagram = builder.getDiagram( sitesGeom.getFactory() ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_X\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_X = 100;
red_line===
ORG_X
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_X= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_Y\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_Y = 100;
red_line===
ORG_Y
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_Y= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double SIZE = 100;
red_line===
SIZE
start_offset===
16
end_offset===
20
Python OUTPUT===
 static double SSIZE= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"N_ARMS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int N_ARMS = 20;
red_line===
N_ARMS
start_offset===
13
end_offset===
19
Python OUTPUT===
 static int NN_ARMS= 20; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ARM_RATIO\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ARM_RATIO = 0.3;
red_line===
ARM_RATIO
start_offset===
16
end_offset===
25
Python OUTPUT===
 static double AARM_RATIO= 0.3; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"iter\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 private int i= 0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("OverlayNG Snap-Rounding perf test");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("OverlayNG Snap-Rounding perf test"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# Iterations: " + N_ITER);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# Iterations: " + N_ITER); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
System.out.format("\n# pts = %d, Scale = %f\n", npts, scale);
red_line===
System.out.format("\n# pts = %d, Scale = %f\n", npts, scale)
start_offset===
4
end_offset===
64
Python OUTPUT===
 System.out.format("\n# pts = %d, Scale = %f\n", npts, scale); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (npts <= 1000) System.out.println(sineStar);
red_line===
System.out
start_offset===
22
end_offset===
32
Python OUTPUT===
 if (npts <= 1000) System.out.println(sineStar); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry result = OverlayNG.overlay(sineStar,  sineStar2, OverlayNG.INTERSECTION, pm);
red_line===
= OverlayNG.overlay(sineStar,  sineStar2, OverlayNG.INTERSECTION, pm)
start_offset===
20
end_offset===
89
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry result = OverlayNGRobust.overlay(sineStar,  sineStar2, OverlayNG.INTERSECTION);
red_line===
= OverlayNGRobust.overlay(sineStar,  sineStar2, OverlayNG.INTERSECTION)
start_offset===
20
end_offset===
91
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry result = sineStar.intersection(sineStar2);
red_line===
= sineStar.intersection(sineStar2)
start_offset===
20
end_offset===
54
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"iter\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = fileRdr.read();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = fileRdr.read(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public FileUnionPerfTest() {
  }
red_line===
FileUnionPerfTest
start_offset===
9
end_offset===
26
Python OUTPUT===
 public FileUnionPerfTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
ex.printStackTrace();
red_line===
printStackTrace()
start_offset===
9
end_offset===
26
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List polys;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List polys; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# items: " + polys.size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# items: " + polys.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"union\".
scn.ruleId===
1854
scn.suspCodeStr===
union = unionCascaded(polys);
red_line===
= unionCascaded(polys)
start_offset===
12
end_offset===
34
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"union\".
scn.ruleId===
1854
scn.suspCodeStr===
union = unionAllSimple(polys);
red_line===
= unionAllSimple(polys)
start_offset===
14
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"union\".
scn.ruleId===
1854
scn.suspCodeStr===
union = unionAllBuffer(polys);
red_line===
= unionAllBuffer(polys)
start_offset===
14
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("======= Union Algorithm: " + testName + " ===========");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("======= Union Algorithm: " + testName + " ==========="); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"sw\" which hides the field declared at line 56.
scn.ruleId===
1117
scn.suspCodeStr===
Stopwatch sw = new Stopwatch();
red_line===
sw
start_offset===
14
end_offset===
16
Python OUTPUT===
 Stopwatch sw swnew Stopwatch(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"union\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
Geometry union = null;
red_line===
union
start_offset===
14
end_offset===
19
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Finished in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(writer.writeFormatted(geom));
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(writer.writeFormatted(geom)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(factory.toGeometry(itemEnv));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(factory.toGeometry(itemEnv)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"unionAll\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry unionAll = gColl.buffer(0.0);
red_line===
gColl.buffer(0.0)
start_offset===
23
end_offset===
40
Python OUTPUT===
 Geometry unionAll = gColl.buffer(0.0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = createPolys(nItems, size, nPts);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = createPolys(nItems, size, nPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public PolygonUnionPerfTest() {
  }
red_line===
PolygonUnionPerfTest
start_offset===
9
end_offset===
29
Python OUTPUT===
 public PolygonUnionPerfTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("---------------------------------------------------------");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("---------------------------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# pts/item: " + nPts);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# pts/item: " + nPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
20
end_offset===
38
Python OUTPUT===
 Geometry poly = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List rectList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List rectList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public RectangleIntersectsPerfTest() {
  }
red_line===
RectangleIntersectsPerfTest
start_offset===
9
end_offset===
36
Python OUTPUT===
 public RectangleIntersectsPerfTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"rect\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry rect = createRectangle(origin, 5);
red_line===
= createRectangle(origin, 5)
start_offset===
18
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"maxCount\".
scn.ruleId===
1854
scn.suspCodeStr===
int maxCount = MAX_ITER;
red_line===
= MAX_ITER
start_offset===
17
end_offset===
27
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"sw\" which hides the field declared at line 43.
scn.ruleId===
1117
scn.suspCodeStr===
Stopwatch sw = new Stopwatch();
red_line===
sw
start_offset===
14
end_offset===
16
Python OUTPUT===
 Stopwatch sw swnew Stopwatch(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"count\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int count = 0;
red_line===
count
start_offset===
8
end_offset===
13
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Finished in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int nSide =  1 + (int)Math.sqrt((double) nRect);
red_line===
double
start_offset===
37
end_offset===
43
Python OUTPUT===
 int nSide = 1 + (int)Math.sqrt((doubect); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"g\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry g = gsf.createRectangle();
red_line===
gsf.createRectangle()
start_offset===
17
end_offset===
38
Python OUTPUT===
 Geometry g = gsf.createRectangle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
18
end_offset===
38
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection output = polygonizer.getPolygons();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection output = polygonizer.getPolygons(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running with size " + num);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Running with size " + num); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"output\".
scn.ruleId===
1854
scn.suspCodeStr===
Collection output = polygonizer.getPolygons();
red_line===
= polygonizer.getPolygons()
start_offset===
22
end_offset===
49
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Polygon> polys = new ArrayList<Polygon>();
red_line===
<Polygon>
start_offset===
39
end_offset===
48
Python OUTPUT===
\u003c\u003e polys = new ArrayList < Polygon > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Random rand = new Random((long) (Math.PI * 10e8));
red_line===
) (Math.P
start_offset===
39
end_offset===
48
Python OUTPUT===
\u003c\u003e ( long ) ( Math.PI * 10e8 ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iter: " + i
					+ "  Noding failure count = " + failureCount);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Iter: " + i + " Noding failure count = " + failureCount); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intTrial\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry intTrial = base.intersection(testGeom);
red_line===
= base.intersection(testGeom)
start_offset===
21
end_offset===
50
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Star:");
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("Star:"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(base);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(base); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Rectangle:");
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("Rectangle:"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(testGeom);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(testGeom); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Intersection:");
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("Intersection:"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(intersection);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(intersection); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"PI_OVER_2\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static double PI_OVER_2 = Math.PI / 2;
red_line===
PI_OVER_2
start_offset===
23
end_offset===
32
Python OUTPUT===
 private static double PI_OVER_2 = Math.PI + 2; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"r\".
scn.ruleId===
1488
scn.suspCodeStr===
double r = rand.nextDouble();
red_line===
rand.nextDouble()
start_offset===
14
end_offset===
31
Python OUTPUT===
 double r = rand.nextDouble(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon poly = fact.createPolygon(fact.createLinearRing(pts), null);
red_line===
fact.createPolygon(fact.createLinearRing(pts), null)
start_offset===
17
end_offset===
69
Python OUTPUT===
 Polygon poly = fact.createPolygon(fact.createLinearRing(pts), null); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Line size: " + line2.getNumPoints());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Line size: " + line2.getNumPoints()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print("Time factors: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.print("Time factors: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
printArray(timeFactor, System.out);
red_line===
System.out
start_offset===
27
end_offset===
37
Python OUTPUT===
 printArray(timeFactor, System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"lineDense\".
scn.ruleId===
1488
scn.suspCodeStr===
LineString lineDense = (LineString) Densifier.densify(line, distanceTolerance);
red_line===
(LineString) Densifier.densify(line, distanceTolerance)
start_offset===
27
end_offset===
82
Python OUTPUT===
 LineString lineDense = (LineString) Densifier.densify(line, distanceTolerance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Constructor ctor = clz.getConstructor(String.class);
red_line===
Constructor
start_offset===
6
end_offset===
17
Python OUTPUT===
 Constructor ctor = clz.getConstructor(String.class); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List runMeths = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List runMeths = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(runMethod[i].getName()
              + " : " + sw.getTimeString());
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(runMethod[i].getName() + " : " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.getTargetException().printStackTrace();
red_line===
tTargetExc
start_offset===
10
end_offset===
20
Python OUTPUT===
 e.getTargetException().printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTr
start_offset===
10
end_offset===
20
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Method meth[] = clz.getDeclaredMethods();
red_line===
[]
start_offset===
15
end_offset===
17
Python OUTPUT===
 Method meth[] = clz.getDeclaredMethods(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"INIT_METHOD\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String INIT_METHOD = "init";
red_line===
INIT_METHOD
start_offset===
30
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("----- Tree size: " + size);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("----- Tree size: " + size); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Build time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Build time = " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Total query result items = " + visitor.count);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Total query result items = " + visitor.count); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List envList = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List envList = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public EnvelopeList() {
  }
red_line===
EnvelopeList
start_offset===
9
end_offset===
21
Python OUTPUT===
 public EnvelopeList() { } 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List items = IndexTester.createRandomBoxes(n);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List items = IndexTester.createRandomBoxes(n); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List queries = IndexTester.createRandomBoxes(n);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List queries = IndexTester.createRandomBoxes(n); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList indexResults = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList indexResults = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("----------------------------------------------");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("----------------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Dummy run to ensure classes are loaded before real run");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Dummy run to ensure classes are loaded before real run"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("----------------------------------------------");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("----------------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("----------------------------------------------");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("----------------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Real run");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Real run"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("----------------------------------------------");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("----------------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# items = " + items.size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# items = " + items.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List hprResult = null;
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List hprResult = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List strResult = null;
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List strResult = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Build time: " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Build time: " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Query time: " + sw2.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Query time: " + sw2.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Result size: HPR = " + hprResult.size() 
    + " - STR = " + strResult.size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Result size: HPR = " + hprResult.size() + " - STR = " + strResult.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Result sizes are not equal: HPR = " + hprResult.size() 
      + " - STR = " + strResult.size());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Result sizes are not equal: HPR = " + hprResult.size() + " - STR = " + strResult.size()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
return x * Math.random();
red_line===
turn x * M
start_offset===
6
end_offset===
16
Python OUTPUT===
 return x * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
return x1 + del * Math.random();
red_line===
turn x1 + 
start_offset===
6
end_offset===
16
Python OUTPUT===
 return x1 + del * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"env\".
scn.ruleId===
1488
scn.suspCodeStr===
Envelope env = new Envelope(x, x + sizeX, y, y + sizeY);
red_line===
new Envelope(x, x + sizeX, y, y + sizeY)
start_offset===
19
end_offset===
59
Python OUTPUT===
 Envelope env = new Envelope(x, x + sizeX, y, y + sizeY); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make count a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int count = 0;
red_line===
count
start_offset===
13
end_offset===
18
Python OUTPUT===
public static final int count = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("----- Tree size: " + size);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("----- Tree size: " + size); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Build time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Build time = " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Total query result items = " + visitor.count);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Total query result items = " + visitor.count); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List query(Envelope searchEnv);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List query(Envelope searchEnv); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList items = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList items = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList items = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList items = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List list = index.query(env);
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List list = index.query(env); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(index.toString() + "           ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.print(index.toString() + " "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Don\u0027t try to be smarter than the JVM, remove this call to run the garbage collector.
scn.ruleId===
1215
scn.suspCodeStr===
System.gc();
red_line===
gc
start_offset===
11
end_offset===
13
Python OUTPUT===
 System.gc(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Don\u0027t try to be smarter than the JVM, remove this call to run the garbage collector.
scn.ruleId===
1215
scn.suspCodeStr===
System.gc();
red_line===
gc
start_offset===
11
end_offset===
13
Python OUTPUT===
 System.gc(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Load Time = " + loadTime + "  Query Time = " + queryTime);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Load Time = " + loadTime + " Query Time = " + queryTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int gridSize = (int) Math.sqrt((double) nGridCells);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int gridSize = (int) Math.sqrt((douGridCells); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Avg query size = " + querySize / queries.size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Avg query size = " + querySize / queries.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int cellSize = (int) Math.sqrt((double) NUM_ITEMS);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int cellSize = (int) Math.sqrt((douUM_ITEMS); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int gridSize = (int) Math.sqrt((double) nGridCells);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int gridSize = (int) Math.sqrt((douGridCells); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make indexName a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String indexName;
red_line===
indexName
start_offset===
18
end_offset===
27
Python OUTPUT===
public static final String indexName ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make loadMilliseconds a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public long loadMilliseconds;
red_line===
loadMilliseconds
start_offset===
16
end_offset===
32
Python OUTPUT===
public static final long loadMilliseconds ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make queryMilliseconds a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public long queryMilliseconds;
red_line===
queryMilliseconds
start_offset===
16
end_offset===
33
Python OUTPUT===
public static final long queryMilliseconds ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"pmFixed_1\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
PrecisionModel pmFixed_1 = new PrecisionModel(1.0);
red_line===
pmFixed_1
start_offset===
16
end_offset===
25
Python OUTPUT===
 PrecisionModel pmFixed_1 = new PrecisionModel(1.0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public PointInAreaPerfTest() {
	}
red_line===
PointInAreaPerfTest
start_offset===
8
end_offset===
27
Python OUTPUT===
 public PointInAreaPerfTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(area);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(area); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Overall time: " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Overall time: " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (useSegInt) System.out.println("Using Segment Intersector");
red_line===
System.out
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (useSegInt) System.out.println("Using Segment Intersector"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (useSideInt) System.out.println("Using Side Intersector");
red_line===
System.out
start_offset===
20
end_offset===
30
Python OUTPUT===
 if (useSideInt) System.out.println("Using Side Intersector"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# pts: " + pts.length);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# pts: " + pts.length); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Finished in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (li.hasIntersection()) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (li.hasIntersection()) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"numPts\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int numPts = 1000;
red_line===
numPts
start_offset===
14
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (segResult != sideResult)
            throw new IllegalStateException("Seg and Side values do not match");
red_line===
if
start_offset===
10
end_offset===
12
Python OUTPUT===
 if (segResult != sideResult) throw new IllegalStateException("Seg and Side values do not match"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_X\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_X = 100;
red_line===
ORG_X
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_X= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_Y\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_Y = 100;
red_line===
ORG_Y
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_Y= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double SIZE = 100;
red_line===
SIZE
start_offset===
16
end_offset===
20
Python OUTPUT===
 static double SSIZE= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"N_ARMS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int N_ARMS = 20;
red_line===
N_ARMS
start_offset===
13
end_offset===
19
Python OUTPUT===
 static int NN_ARMS= 20; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ARM_RATIO\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ARM_RATIO = 0.3;
red_line===
ARM_RATIO
start_offset===
16
end_offset===
25
Python OUTPUT===
 static double AARM_RATIO= 0.3; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"iter\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 private int i= 0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"sineStar\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Geometry sineStar;
red_line===
sineStar
start_offset===
19
end_offset===
27
Python OUTPUT===
 private Geometry s 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Interior Point Area perf test");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Interior Point Area perf test"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# Iterations: " + N_ITER);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# Iterations: " + N_ITER); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\nRunning with # pts " + sinePolyCrinkly.getNumPoints() );
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("\nRunning with # pts " + sinePolyCrinkly.getNumPoints() ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"iter\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List mcs = index.query(rayEnv);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List mcs = index.query(rayEnv); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(geom);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr);
red_line===
List
start_offset===
5
end_offset===
9
Python OUTPUT===
 List segChains = MonotoneChainBuilder.getChains(segStr.getCoordinates(), segStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"areaGeom\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Geometry areaGeom;
red_line===
areaGeom
start_offset===
18
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public LineIntersectorBenchmark() {
  }
red_line===
LineIntersectorBenchmark
start_offset===
9
end_offset===
33
Python OUTPUT===
 public LineIntersectorBenchmark() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(lineIntersector.getClass().getName());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(lineIntersector.getClass().getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Milliseconds elapsed: " + (end.getTime() - start.getTime()));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Milliseconds elapsed: " + (end.getTime() - start.getTime())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"x\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate x = new Coordinate(15, 15);
red_line===
= new Coordinate(15, 15)
start_offset===
17
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"orientOL\".
scn.ruleId===
1854
scn.suspCodeStr===
int orientOL = runDD("On-line case", ptOnLine);
red_line===
= runDD("On-line case", ptOnLine)
start_offset===
17
end_offset===
50
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"orientSC\".
scn.ruleId===
1854
scn.suspCodeStr===
int orientSC = runDD("Scaled case", ptsScale);
red_line===
= runDD("Scaled case", ptsScale)
start_offset===
17
end_offset===
49
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(desc + " --------------");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(desc + " --------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD: " + orientDD);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DD: " + orientDD); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
static Random randGen = new Random(123456);
red_line===
atic Rando
start_offset===
4
end_offset===
14
Python OUTPUT===
 static Random randGen = new Random(123456); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\nIncident angle factor = " + incidentAngleFactor);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("\nIncident angle factor = " + incidentAngleFactor); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Average distance from lines");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Average distance from lines"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(key + " : " + avg );
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(key + " : " + avg ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Double> distMap = new HashMap<String, Double>();
red_line===
<String, Double>
start_offset===
43
end_offset===
59
Python OUTPUT===
\u003c\u003e = new HashMap < String , Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = CGAlgorithmsDD.intersection(p0, p1, q0, q1);
red_line===
= CGAlgorithmsDD.intersection(p0, p1, q0, q1)
start_offset===
21
end_offset===
66
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = IntersectionAlgorithms.intersectionDDWithFilter(p0, p1, q0, q1);
red_line===
= IntersectionAlgorithms.intersectionDDWithFilter(p0, p1, q0, q1)
start_offset===
21
end_offset===
86
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = IntersectionAlgorithms.intersectionCB(p0, p1, q0, q1);
red_line===
= IntersectionAlgorithms.intersectionCB(p0, p1, q0, q1)
start_offset===
21
end_offset===
76
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = Intersection.intersection(p0, p1, q0, q1);
red_line===
= Intersection.intersection(p0, p1, q0, q1)
start_offset===
21
end_offset===
64
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = IntersectionAlgorithms.intersectionBasic(a0, a1, b0, b1);
red_line===
= IntersectionAlgorithms.intersectionBasic(a0, a1, b0, b1)
start_offset===
21
end_offset===
79
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = Intersection.intersection(a0, a1, b0, b1);
red_line===
= Intersection.intersection(a0, a1, b0, b1)
start_offset===
21
end_offset===
64
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = CGAlgorithmsDD.intersection(a0, a1, b0, b1);
red_line===
= CGAlgorithmsDD.intersection(a0, a1, b0, b1)
start_offset===
21
end_offset===
66
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"intPt\".
scn.ruleId===
1854
scn.suspCodeStr===
Coordinate intPt = IntersectionAlgorithms.intersectionDDWithFilter(a0, a1, b0, b1);
red_line===
= IntersectionAlgorithms.intersectionDDWithFilter(a0, a1, b0, b1)
start_offset===
21
end_offset===
86
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running with size " + num);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Running with size " + num); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
Random rand = new Random(1324);
red_line===
Random ran
start_offset===
4
end_offset===
14
Python OUTPUT===
 Random rand = new Random(1324); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"grid\" which hides the field declared at line 35.
scn.ruleId===
1117
scn.suspCodeStr===
Geometry grid = ml.buffer(lineWidth);
red_line===
grid
start_offset===
11
end_offset===
15
Python OUTPUT===
 Geometry ggrid= ml.buffer(lineWidth); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"grid\" which hides the field declared at line 35.
scn.ruleId===
1117
scn.suspCodeStr===
rand = new Random(seed);
red_line===
ew R
start_offset===
11
end_offset===
15
Python OUTPUT===
 rand = newgriddom(seed); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"grid\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry grid = ml.buffer(lineWidth);
red_line===
ml.buffer(lineWidth)
start_offset===
18
end_offset===
38
Python OUTPUT===
 Geometry grid = ml.buffer(lineWidth); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"ord\".
scn.ruleId===
1488
scn.suspCodeStr===
double ord = geomFactory.getPrecisionModel().makePrecise(randNum * gridWidth);
red_line===
geomFactory.getPrecisionModel().makePrecise(randNum * gridWidth)
start_offset===
15
end_offset===
79
Python OUTPUT===
 double ord = geomFactory.getPrecisionModel().makePrecise(randNum * gridWidth); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(polygon);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(polygon); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(nrVertices + "   orig err: " + eps 
          + "    acc err: " + eps2);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(nrVertices + " orig err: " + eps + " acc err: " + eps2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Time: " + (System.currentTimeMillis() - start) / 1000.0);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Time: " + (System.currentTimeMillis() - start) / 1000.0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test completed in " + sw.getTimeString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("Test completed in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
4
end_offset===
16
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Tests: " + testCount + "   Failures: " + failureCount);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Tests: " + testCount + " Failures: " + failureCount); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Tests: " + testCount + "   Failures: " + failureCount);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Tests: " + testCount + " Failures: " + failureCount); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
return (int) (Math.random() * max);
red_line===
Math.random
start_offset===
18
end_offset===
29
Python OUTPUT===
 return (int) (Math.random() * max); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (Orientation.LEFT == Orientation.index(ring[i], ring[i + 1], p)) 
            winding++;
red_line===
if
start_offset===
10
end_offset===
12
Python OUTPUT===
 if (Orientation.LEFT == Orientation.index(ring[i], ring[i + 1], p)) winding++; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (Orientation.RIGHT == Orientation.index(ring[i], ring[i + 1], p)) 
            winding--;
red_line===
if
start_offset===
10
end_offset===
12
Python OUTPUT===
 if (Orientation.RIGHT == Orientation.index(ring[i], ring[i + 1], p)) winding--; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"pmFixed_1\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
PrecisionModel pmFixed_1 = new PrecisionModel(1.0);
red_line===
pmFixed_1
start_offset===
16
end_offset===
25
Python OUTPUT===
 PrecisionModel pmFixed_1 = new PrecisionModel(1.0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# failed = " + failCount + " out of " + n);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# failed = " + failCount + " out of " + n); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
static Random randGen = new Random(123456);
red_line===
atic Rando
start_offset===
4
end_offset===
14
Python OUTPUT===
 static Random randGen = new Random(123456); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"pmFixed_1\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
PrecisionModel pmFixed_1 = new PrecisionModel(1.0);
red_line===
pmFixed_1
start_offset===
16
end_offset===
25
Python OUTPUT===
 PrecisionModel pmFixed_1 = new PrecisionModel(1.0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"pmFixed_1\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
ex.printStackTrace();
red_line===
kTrace();
start_offset===
16
end_offset===
25
Python OUTPUT===
 ex.printStackTrpmFixed_1
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
int n = (int) ( 10000 * Math.random());
red_line===
Math.random
start_offset===
28
end_offset===
39
Python OUTPUT===
 int n = (int) ( 10000 * Math.random()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing " + nPts + " random points.  Radius = " + radius);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing " + nPts + " random points. Radius = " + radius); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double x = 100 * Math.random();
red_line===
double x =
start_offset===
4
end_offset===
14
Python OUTPUT===
 double x = 100 * Math.random(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double y = 100 * Math.random();
red_line===
double y =
start_offset===
4
end_offset===
14
Python OUTPUT===
 double y = 100 * Math.random(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test completed in " + sw.getTimeString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("Test completed in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_X\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_X = 100;
red_line===
ORG_X
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_X= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ORG_Y\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ORG_Y = 100;
red_line===
ORG_Y
start_offset===
16
end_offset===
21
Python OUTPUT===
 static double OORG_Y= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double SIZE = 100;
red_line===
SIZE
start_offset===
16
end_offset===
20
Python OUTPUT===
 static double SSIZE= 100; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"N_ARMS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static int N_ARMS = 20;
red_line===
N_ARMS
start_offset===
13
end_offset===
19
Python OUTPUT===
 static int NN_ARMS= 20; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ARM_RATIO\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static double ARM_RATIO = 0.3;
red_line===
ARM_RATIO
start_offset===
16
end_offset===
25
Python OUTPUT===
 static double AARM_RATIO= 0.3; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"iter\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 private int i= 0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Geometry Precision Reducer perf test");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Geometry Precision Reducer perf test"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# Iterations: " + N_ITER);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("# Iterations: " + N_ITER); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
System.out.format("\n# pts = %d, Scale = %f\n", npts, scale);
red_line===
System.out.format("\n# pts = %d, Scale = %f\n", npts, scale)
start_offset===
4
end_offset===
64
Python OUTPUT===
 System.out.format("\n# pts = %d, Scale = %f\n", npts, scale); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (npts <= 1000) System.out.println(sineStar);
red_line===
System.out
start_offset===
22
end_offset===
32
Python OUTPUT===
 if (npts <= 1000) System.out.println(sineStar); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"sinePolyCrinkly\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry sinePolyCrinkly = GeometryPrecisionReducer.reduce(sineStar, pm);
red_line===
= GeometryPrecisionReducer.reduce(sineStar, pm)
start_offset===
29
end_offset===
76
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"iter\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int iter = 0;
red_line===
iter
start_offset===
14
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = randomPointsInGrid(nPts, BASE_OFFSET, BASE_OFFSET);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = randomPointsInGrid(nPts, BASE_OFFSET, BASE_OFFSET); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
final static GeometryFactory geomFact = new GeometryFactory();
red_line===
static
start_offset===
7
end_offset===
13
Python OUTPUT===
static final GeometryFactory geomFact = new GeometryFactory ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
final static double SIDE_LEN = 1.0;
red_line===
static
start_offset===
8
end_offset===
14
Python OUTPUT===
static final double SIDE_LEN = 1.0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
final static double BASE_OFFSET = 1.0e7;
red_line===
static
start_offset===
8
end_offset===
14
Python OUTPUT===
static final double BASE_OFFSET = 1.0e7 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Base offset: " + BASE_OFFSET);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Base offset: " + BASE_OFFSET); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# pts: " + pts.size());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("# pts: " + pts.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  --  Time: " + sw.getTimeString()
				+ "  Mem: " + Memory.usedTotalString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(" -- Time: " + sw.getTimeString() + " Mem: " + Memory.usedTotalString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double x = basex + i * SIDE_LEN + SIDE_LEN * Math.random();
red_line===
		double x
start_offset===
2
end_offset===
12
Python OUTPUT===
 double x = basex + i * SIDE_LEN + SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double y = basey + j * SIDE_LEN + SIDE_LEN * Math.random();
red_line===
		double y
start_offset===
2
end_offset===
12
Python OUTPUT===
 double y = basey + j * SIDE_LEN + SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double x = SIDE_LEN * Math.random();
red_line===
		double x
start_offset===
2
end_offset===
12
Python OUTPUT===
 double x = SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double y = SIDE_LEN * Math.random();
red_line===
		double y
start_offset===
2
end_offset===
12
Python OUTPUT===
 double y = SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = randomPoints(nPts);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = randomPoints(nPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
final static GeometryFactory geomFact = new GeometryFactory();
red_line===
static
start_offset===
7
end_offset===
13
Python OUTPUT===
static final GeometryFactory geomFact = new GeometryFactory ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
final static double SIDE_LEN = 10.0;
red_line===
static
start_offset===
7
end_offset===
13
Python OUTPUT===
static final double SIDE_LEN = 10.0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# pts: " + pts.size());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("# pts: " + pts.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  --  Time: " + sw.getTimeString()
				+ "  Mem: " + Memory.usedTotalString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(" -- Time: " + sw.getTimeString() + " Mem: " + Memory.usedTotalString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double x = i * SIDE_LEN + SIDE_LEN * Math.random();
red_line===
		double x
start_offset===
2
end_offset===
12
Python OUTPUT===
 double x = i * SIDE_LEN + SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double y = j * SIDE_LEN + SIDE_LEN * Math.random();
red_line===
		double y
start_offset===
2
end_offset===
12
Python OUTPUT===
 double y = j * SIDE_LEN + SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double x = SIDE_LEN * Math.random();
red_line===
		double x
start_offset===
2
end_offset===
12
Python OUTPUT===
 double x = SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double y = SIDE_LEN * Math.random();
red_line===
		double y
start_offset===
2
end_offset===
12
Python OUTPUT===
 double y = SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = randomPoints(nPts);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = randomPoints(nPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
final static GeometryFactory geomFact = new GeometryFactory();
red_line===
static
start_offset===
7
end_offset===
13
Python OUTPUT===
static final GeometryFactory geomFact = new GeometryFactory ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
final static double SIDE_LEN = 10.0;
red_line===
static
start_offset===
7
end_offset===
13
Python OUTPUT===
static final double SIDE_LEN = 10.0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"g\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry g = builder.getEdges(geomFact);
red_line===
= builder.getEdges(geomFact)
start_offset===
13
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("# pts: " + pts.size() + "  --  " + sw.getTimeString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("# pts: " + pts.size() + " -- " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double x = i * SIDE_LEN + SIDE_LEN * Math.random();
red_line===
		double x
start_offset===
2
end_offset===
12
Python OUTPUT===
 double x = i * SIDE_LEN + SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double y = j * SIDE_LEN + SIDE_LEN * Math.random();
red_line===
		double y
start_offset===
2
end_offset===
12
Python OUTPUT===
 double y = j * SIDE_LEN + SIDE_LEN * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(threadIndex);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(threadIndex); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
20
end_offset===
40
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running with size " + nPts);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Running with size " + nPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iterations per run = " + NUM_ITER);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Iterations per run = " + NUM_ITER); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Point> geoms = new ArrayList<Point>();
red_line===
<Point>
start_offset===
36
end_offset===
43
Python OUTPUT===
\u003c\u003e geoms = new ArrayList < Point > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
18
end_offset===
38
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = builder.createTestGeoms(target.getEnvelopeInternal(), 
    		NUM_LINES, 1.0, NUM_LINE_PTS);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = builder.createTestGeoms(target.getEnvelopeInternal(), NUM_LINES, 1.0, NUM_LINE_PTS); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public PreparedLineIntersectsPerfTest() {
  }
red_line===
PreparedLineIntersectsPerfTest
start_offset===
9
end_offset===
39
Python OUTPUT===
 public PreparedLineIntersectsPerfTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"sw\" which hides the field declared at line 39.
scn.ruleId===
1117
scn.suspCodeStr===
Stopwatch sw = new Stopwatch();
red_line===
sw
start_offset===
14
end_offset===
16
Python OUTPUT===
 Stopwatch sw swnew Stopwatch(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Count of intersections = " + count);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Count of intersections = " + count); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Finished in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Using original JTS algorithm");
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Using original JTS algorithm"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Using cached Prepared Geometry");
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Using cached Prepared Geometry"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Using NON-CACHED Prepared Geometry");
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Using NON-CACHED Prepared Geometry"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = createLines(target.getEnvelopeInternal(), NUM_LINES, 1.0, NUM_LINE_PTS);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = createLines(target.getEnvelopeInternal(), NUM_LINES, 1.0, NUM_LINE_PTS); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List geoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public PreparedPolygonIntersectsPerfTest() {
  }
red_line===
PreparedPolygonIntersectsPerfTest
start_offset===
9
end_offset===
42
Python OUTPUT===
 public PreparedPolygonIntersectsPerfTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"sw\" which hides the field declared at line 46.
scn.ruleId===
1117
scn.suspCodeStr===
Stopwatch sw = new Stopwatch();
red_line===
sw
start_offset===
14
end_offset===
16
Python OUTPUT===
 Stopwatch sw swnew Stopwatch(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Count of intersections = " + count);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Count of intersections = " + count); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Finished in " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Finished in " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (iter == 0) System.out.println("Using original JTS algorithm");
red_line===
System.out
start_offset===
18
end_offset===
28
Python OUTPUT===
 if (iter == 0) System.out.println("Using original JTS algorithm"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (iter == 0) System.out.println("Using cached Prepared Geometry");
red_line===
System.out
start_offset===
18
end_offset===
28
Python OUTPUT===
 if (iter == 0) System.out.println("Using cached Prepared Geometry"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (iter == 0) System.out.println("Using NON-CACHED Prepared Geometry");
red_line===
System.out
start_offset===
18
end_offset===
28
Python OUTPUT===
 if (iter == 0) System.out.println("Using NON-CACHED Prepared Geometry"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"circle\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry circle = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
20
end_offset===
38
Python OUTPUT===
 Geometry circle = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
18
end_offset===
38
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This line will not be executed conditionally; only the first line of this 2-line block will be. The rest will execute unconditionally.
scn.ruleId===
2681
scn.suspCodeStr===
PreparedGeometryFactory pgFact = new PreparedGeometryFactory();
red_line===
PreparedGeometryFactory pgFact = new PreparedGeometryFactory();
start_offset===
4
end_offset===
67
Python OUTPUT===
 PreparedGeometryFactory pgFact = new PreparedGeometryFactory(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List geoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"testDim\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int testDim = 1;
red_line===
testDim
start_offset===
13
end_offset===
20
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"geomFact\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private GeometryFactory geomFact = new GeometryFactory();
red_line===
geomFact
start_offset===
26
end_offset===
34
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"testDim\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int testDim = 1;
red_line===
testDim
start_offset===
13
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"circle\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry circle = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
20
end_offset===
38
Python OUTPUT===
 Geometry circle = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
18
end_offset===
38
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List geoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(geoms.size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(geoms.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running with size " + size);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Running with size " + size); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test 1 : Iter # " + iter++);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Test 1 : Iter # " + iter++); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test 2 : Iter # " + iter++);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Test 2 : Iter # " + iter++); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public DDExpressionPerf() { }
red_line===
DDExpressionPerf
start_offset===
8
end_offset===
24
Python OUTPUT===
 public DDExpressionPerf() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("BigDecimal VS double performance factor = " + bigDecTime/doubleTime);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("BigDecimal VS double performance factor = " + bigDecTime/doubleTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("BigDecimal VS DD performance factor = " + bigDecTime/ddTime);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("BigDecimal VS DD performance factor = " + bigDecTime/ddTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD VS double performance factor = " + ddTime/doubleTime);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("DD VS double performance factor = " + ddTime/doubleTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD-Self VS double performance factor = " + ddSelfTime/doubleTime);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("DD-Self VS double performance factor = " + ddSelfTime/doubleTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"det\".
scn.ruleId===
1854
scn.suspCodeStr===
double det = a * a - aMul * aDiv;
red_line===
= a * a - aMul * aDiv
start_offset===
14
end_offset===
35
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("double:          nIter = " + nIter 
				+ "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("double: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use \"BigDecimal.valueOf\" instead.
scn.ruleId===
2111
scn.suspCodeStr===
BigDecimal a = (new BigDecimal(9.0)).setScale(20);
red_line===
new BigDecimal(9.0)
start_offset===
22
end_offset===
41
Python OUTPUT===
 BigDecimal a = (new BigDecimal(9.0)).setScale(20); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use \"BigDecimal.valueOf\" instead.
scn.ruleId===
2111
scn.suspCodeStr===
BigDecimal factor = (new BigDecimal(10.0)).setScale(20);
red_line===
new BigDecimal(10.0)
start_offset===
27
end_offset===
47
Python OUTPUT===
 BigDecimal factor = (new BigDecimal(10.0)).setScale(20); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"divide\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
BigDecimal aDiv = a.divide(factor, BigDecimal.ROUND_HALF_UP);
red_line===
divide
start_offset===
23
end_offset===
29
Python OUTPUT===
 BigDecimal aDiv = a.diactor, BigDecimal.ROUND_HALF_UP); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"ROUND_HALF_UP\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
BigDecimal aDiv = a.divide(factor, BigDecimal.ROUND_HALF_UP);
red_line===
ROUND_HALF_UP
start_offset===
49
end_offset===
62
Python OUTPUT===
 BigDecimal aDiv = a.divide(factor, BigDecimal.RO 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"det\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
BigDecimal det = a.multiply(a)
					.subtract(aMul.multiply(aDiv));
red_line===
det
start_offset===
14
end_offset===
17
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("BigDecimal:      nIter = " + nIter 
				+ "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("BigDecimal: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"det\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
DD det = a.multiply(a)
          .subtract(aMul.multiply(aDiv));
red_line===
det
start_offset===
9
end_offset===
12
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD:              nIter = " + nIter 
        + "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DD: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"det\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
DD det = a.multiply(a)
          .subtract(aMul.multiply(aDiv));
red_line===
det
start_offset===
9
end_offset===
12
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD:              nIter = " + nIter 
        + "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DD: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"det\".
scn.ruleId===
1854
scn.suspCodeStr===
DD det = a2;
red_line===
= a2
start_offset===
10
end_offset===
14
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD-Self:         nIter = " + nIter 
				+ "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("DD-Self: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public InCirclePerf() { }
red_line===
InCirclePerf
start_offset===
8
end_offset===
20
Python OUTPUT===
 public InCirclePerf() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("InCircle perf");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("InCircle perf"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD VS double performance factor      = " + ddTime/doubleTime);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DD VS double performance factor = " + ddTime/doubleTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DDSelf VS double performance factor  = " + ddSelfTime/doubleTime);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DDSelf VS double performance factor = " + ddSelfTime/doubleTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DDSelf2 VS double performance factor = " + ddSelf2Time/doubleTime);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DDSelf2 VS double performance factor = " + ddSelf2Time/doubleTime); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("double:   nIter = " + nIter 
				+ "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("double: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD:       nIter = " + nIter 
        + "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DD: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD-Self:  nIter = " + nIter 
        + "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DD-Self: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("DD-Self2: nIter = " + nIter 
        + "   time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("DD-Self2: nIter = " + nIter + " time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(WKTWriter.toLineString(new CoordinateArraySequence(
        new Coordinate[] { a, b, c, p })));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(WKTWriter.toLineString(new CoordinateArraySequence( new Coordinate[] { a, b, c, p }))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Circumcentre = " + WKTWriter.toPoint(circumCentre)
        + " radius = " + a.distance(circumCentre));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Circumcentre = " + WKTWriter.toPoint(circumCentre) + " radius = " + a.distance(circumCentre)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("p radius diff a = "
        + Math.abs(p.distance(circumCentre)/a.distance(circumCentre) - 1));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("p radius diff a = " + Math.abs(p.distance(circumCentre)/a.distance(circumCentre) - 1)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("p radius diff b = "
        + Math.abs(p.distance(circumCentre)/b.distance(circumCentre) - 1));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("p radius diff b = " + Math.abs(p.distance(circumCentre)/b.distance(circumCentre) - 1)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("p radius diff c = "
        + Math.abs(p.distance(circumCentre)/c.distance(circumCentre) - 1));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("p radius diff c = " + Math.abs(p.distance(circumCentre)/c.distance(circumCentre) - 1)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isInCircle\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isInCircle = sum.doubleValue() > 0;
red_line===
sum.doubleValue() > 0
start_offset===
25
end_offset===
46
Python OUTPUT===
 boolean isInCircle = sum.doubleValue() > 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isInCircle\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isInCircle = sum.doubleValue() > 0;
red_line===
sum.doubleValue() > 0
start_offset===
25
end_offset===
46
Python OUTPUT===
 boolean isInCircle = sum.doubleValue() > 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isInCircle\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isInCircle = sum.doubleValue() > 0;
red_line===
sum.doubleValue() > 0
start_offset===
25
end_offset===
46
Python OUTPUT===
 boolean isInCircle = sum.doubleValue() > 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection data;
red_line===
Collection
start_offset===
2
end_offset===
12
Python OUTPUT===
 Collection data; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection mergedColl = merger.getMergedLineStrings();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection mergedColl = merger.getMergedLineStrings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Loading data...");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Loading data..."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry result = dis.getResult();
red_line===
= dis.getResult()
start_offset===
20
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(Memory.allString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(Memory.allString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry result = dissolveLines(data);
red_line===
= dissolveLines(data)
start_offset===
20
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(Memory.allString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(Memory.allString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"merged\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry merged = lines.getFactory().buildGeometry(mergedColl);
red_line===
lines.getFactory().buildGeometry(mergedColl)
start_offset===
22
end_offset===
66
Python OUTPUT===
 Geometry merged = lines.getFactory().buildGeometry(mergedColl); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"factory\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
return factory.buildGeometry(geoms);
red_line===
factory.buildGeometry
start_offset===
11
end_offset===
32
Python OUTPUT===
 return factory.buildGeometry(geoms); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List envelopes = sourceData();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List envelopes = sourceData(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList envelopes = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList envelopes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public STRtreeDemo() {
  }
red_line===
STRtreeDemo
start_offset===
9
end_offset===
20
Python OUTPUT===
 public STRtreeDemo() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
PrintStream printStream = System.out;
red_line===
System.out
start_offset===
30
end_offset===
40
Python OUTPUT===
 PrintStream printStream = System.out; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double width = MIN_ITEM_EXTENT + ((MAX_ITEM_EXTENT-MIN_ITEM_EXTENT) * Math.random());
red_line===
TENT + ((M
start_offset===
30
end_offset===
40
Python OUTPUT===
 double width = MIN_ITEM_EXTENT + ((MAX_ITEM_EXTENT-MIN_ITEM_EXTENT) * Math.random()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double height = MIN_ITEM_EXTENT + ((MAX_ITEM_EXTENT-MIN_ITEM_EXTENT) * Math.random());
red_line===
XTENT + ((
start_offset===
30
end_offset===
40
Python OUTPUT===
 double height = MIN_ITEM_EXTENT + ((MAX_ITEM_EXTENT-MIN_ITEM_EXTENT) * Math.random()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double bottom = EXTENT * Math.random();
red_line===
ath.random
start_offset===
30
end_offset===
40
Python OUTPUT===
 double bottom = EXTENT * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
double left = EXTENT * Math.random();
red_line===
h.random()
start_offset===
30
end_offset===
40
Python OUTPUT===
 double left = EXTENT * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"HOLE_SIZE_FACTOR\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static double HOLE_SIZE_FACTOR = 0.8;
red_line===
HOLE_SIZE_FACTOR
start_offset===
24
end_offset===
40
Python OUTPUT===
 private static double HHOLE_SIZE_FACTOR= 0.8; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"g\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon g = gsf.createRectangle();
red_line===
gsf.createRectangle()
start_offset===
16
end_offset===
37
Python OUTPUT===
 Polygon g = gsf.createRectangle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
20
end_offset===
40
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"circle\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon circle = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
21
end_offset===
39
Python OUTPUT===
 Polygon circle = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Sine Star Creation Executed in " + totalTimeStr);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Sine Star Creation Executed in " + totalTimeStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("n Pts: " + nPts + "   Executed in " + totalTimeStr);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("n Pts: " + nPts + " Executed in " + totalTimeStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Sine Star Creation Executed in " + totalTimeStr);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Sine Star Creation Executed in " + totalTimeStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("n Pts: " + nPts);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("n Pts: " + nPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("   Executed in " + totalTimeStr);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(" Executed in " + totalTimeStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List objList = createData();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List objList = createData(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List objList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List objList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List inputList = (List) obj;
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List inputList = (List) obj; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public TestSerializable() {
  }
red_line===
TestSerializable
start_offset===
9
end_offset===
25
Python OUTPUT===
 public TestSerializable() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
public static final String FILENAME = "c:\\testSerial.txt";
red_line===
"c:\\testSerial.txt"
start_offset===
40
end_offset===
60
Python OUTPUT===
 public static final String FILENAME = "c:\\testSerial.txt"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Things not going as planned.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Things not going as planned."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Things not going as planned.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Things not going as planned."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("expected " + o1 + ", found " + o2);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("expected " + o1 + ", found " + o2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("expected " + o1 + ", found " + o2);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("expected " + o1 + ", found " + o2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (matched)
      System.out.println("found match for object");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 if (matched) System.out.println("found match for object"); 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
outStream = new FileOutputStream(file);
red_line===
new FileOutputStream(file)
start_offset===
18
end_offset===
44
Python OUTPUT===
 outStream = new FileOutputStream(file); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"ObjectOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
objStream = new ObjectOutputStream(outStream);
red_line===
new ObjectOutputStream(outStream)
start_offset===
18
end_offset===
51
Python OUTPUT===
 objStream = new ObjectOutputStream(outStream); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"ObjectInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
objStream = new ObjectInputStream(stream);
red_line===
new ObjectInputStream(stream)
start_offset===
18
end_offset===
47
Python OUTPUT===
 objStream = new ObjectInputStream(stream); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
stream = new FileInputStream(file);
red_line===
new FileInputStream(file)
start_offset===
15
end_offset===
40
Python OUTPUT===
 stream = new FileInputStream(file); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ipt\".
scn.ruleId===
1854
scn.suspCodeStr===
pts[ipt++] = new Coordinate(pts[0]);
red_line===
ipt++
start_offset===
8
end_offset===
13
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon poly = fact.createPolygon(ring, null);
red_line===
fact.createPolygon(ring, null)
start_offset===
19
end_offset===
49
Python OUTPUT===
 Polygon poly = fact.createPolygon(ring, null); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon poly = fact.createPolygon(ring, null);
red_line===
fact.createPolygon(ring, null)
start_offset===
19
end_offset===
49
Python OUTPUT===
 Polygon poly = fact.createPolygon(ring, null); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Polygon poly = fact.createPolygon(ring, null);
red_line===
fact.createPolygon(ring, null)
start_offset===
19
end_offset===
49
Python OUTPUT===
 Polygon poly = fact.createPolygon(ring, null); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_POINT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_POINT = "POINT (10 10)";
red_line===
WKT_POINT
start_offset===
23
end_offset===
32
Python OUTPUT===
 public static String WWKT_POINT= "POINT (10 10)"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_POINT_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_POINT_EMPTY = "POINT EMPTY";
red_line===
WKT_POINT_EMPTY
start_offset===
23
end_offset===
38
Python OUTPUT===
 public static String WWKT_POINT_EMPTY= "POINT EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_LINESTRING\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_LINESTRING = "LINESTRING (10 10, 20 20, 30 40)";
red_line===
WKT_LINESTRING
start_offset===
23
end_offset===
37
Python OUTPUT===
 public static String WWKT_LINESTRING= "LINESTRING (10 10, 20 20, 30 40)"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_LINESTRING_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_LINESTRING_EMPTY = "LINESTRING EMPTY";
red_line===
WKT_LINESTRING_EMPTY
start_offset===
23
end_offset===
43
Python OUTPUT===
 public static String WWKT_LINESTRING_EMPTY= "LINESTRING EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_LINEARRING\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_LINEARRING = "LINEARRING (10 10, 20 20, 30 40, 10 10)";
red_line===
WKT_LINEARRING
start_offset===
23
end_offset===
37
Python OUTPUT===
 public static String WWKT_LINEARRING= "LINEARRING (10 10, 20 20, 30 40, 10 10)"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_LINEARRING_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_LINEARRING_EMPTY = "LINEARRING EMPTY";
red_line===
WKT_LINEARRING_EMPTY
start_offset===
23
end_offset===
43
Python OUTPUT===
 public static String WWKT_LINEARRING_EMPTY= "LINEARRING EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_POLY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_POLY = "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))";
red_line===
WKT_POLY
start_offset===
23
end_offset===
31
Python OUTPUT===
 public static String WWKT_POLY= "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_POLY_HOLE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_POLY_HOLE = "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (70 130, 130 130, 130 70, 70 70, 70 130))";
red_line===
WKT_POLY_HOLE
start_offset===
23
end_offset===
36
Python OUTPUT===
 public static String WWKT_POLY_HOLE= "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (70 130, 130 130, 130 70, 70 70, 70 130))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_POLY_HOLE2\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_POLY_HOLE2 = "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (60 140, 90 140, 90 110, 60 110, 60 140), (110 90, 140 90, 140 60, 110 60, 110 90))";
red_line===
WKT_POLY_HOLE2
start_offset===
23
end_offset===
37
Python OUTPUT===
 public static String WWKT_POLY_HOLE2= "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (60 140, 90 140, 90 110, 60 110, 60 140), (110 90, 140 90, 140 60, 110 60, 110 90))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_POLY_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_POLY_EMPTY = "POLYGON EMPTY";
red_line===
WKT_POLY_EMPTY
start_offset===
23
end_offset===
37
Python OUTPUT===
 public static String WWKT_POLY_EMPTY= "POLYGON EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTIPOINT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTIPOINT = "MULTIPOINT ((10 10), (20 20))";
red_line===
WKT_MULTIPOINT
start_offset===
23
end_offset===
37
Python OUTPUT===
 public static String WWKT_MULTIPOINT= "MULTIPOINT ((10 10), (20 20))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTIPOINT_SINGLE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTIPOINT_SINGLE = "MULTIPOINT ((10 10))";
red_line===
WKT_MULTIPOINT_SINGLE
start_offset===
23
end_offset===
44
Python OUTPUT===
 public static String WWKT_MULTIPOINT_SINGLE= "MULTIPOINT ((10 10))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTIPOINT_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTIPOINT_EMPTY = "MULTIPOINT EMPTY";
red_line===
WKT_MULTIPOINT_EMPTY
start_offset===
23
end_offset===
43
Python OUTPUT===
 public static String WWKT_MULTIPOINT_EMPTY= "MULTIPOINT EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTILINESTRING\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTILINESTRING = "MULTILINESTRING ((10 10, 20 20), (15 15, 30 15))";
red_line===
WKT_MULTILINESTRING
start_offset===
23
end_offset===
42
Python OUTPUT===
 public static String WWKT_MULTILINESTRING= "MULTILINESTRING ((10 10, 20 20), (15 15, 30 15))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTILINESTRING_SINGLE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTILINESTRING_SINGLE = "MULTILINESTRING ((10 10, 20 20))";
red_line===
WKT_MULTILINESTRING_SINGLE
start_offset===
23
end_offset===
49
Python OUTPUT===
 public static String WWKT_MULTILINESTRING_SINGLE= "MULTILINESTRING ((10 10, 20 20))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTILINESTRING_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTILINESTRING_EMPTY = "MULTILINESTRING EMPTY";
red_line===
WKT_MULTILINESTRING_EMPTY
start_offset===
23
end_offset===
48
Python OUTPUT===
 public static String WWKT_MULTILINESTRING_EMPTY= "MULTILINESTRING EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTIPOLYGON\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTIPOLYGON = "MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10)), ((60 60, 70 70, 80 60, 60 60)))";
red_line===
WKT_MULTIPOLYGON
start_offset===
23
end_offset===
39
Python OUTPUT===
 public static String WWKT_MULTIPOLYGON= "MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10)), ((60 60, 70 70, 80 60, 60 60)))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTIPOLYGON_SINGLE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTIPOLYGON_SINGLE = "MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10)))";
red_line===
WKT_MULTIPOLYGON_SINGLE
start_offset===
23
end_offset===
46
Python OUTPUT===
 public static String WWKT_MULTIPOLYGON_SINGLE= "MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10)))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_MULTIPOLYGON_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_MULTIPOLYGON_EMPTY = "MULTIPOLYGON EMPTY";
red_line===
WKT_MULTIPOLYGON_EMPTY
start_offset===
23
end_offset===
45
Python OUTPUT===
 public static String WWKT_MULTIPOLYGON_EMPTY= "MULTIPOLYGON EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_GC\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_GC = "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250))";
red_line===
WKT_GC
start_offset===
23
end_offset===
29
Python OUTPUT===
 public static String WWKT_GC= "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_GC_ALP\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_GC_ALP = "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1))";
red_line===
WKT_GC_ALP
start_offset===
23
end_offset===
33
Python OUTPUT===
 public static String WWKT_GC_ALP= "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_GC_NESTED\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_GC_NESTED = "GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2), GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1)))";
red_line===
WKT_GC_NESTED
start_offset===
23
end_offset===
36
Python OUTPUT===
 public static String WWKT_GC_NESTED= "GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2), GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1)))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_GC_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static String WKT_GC_EMPTY = "GEOMETRYCOLLECTION EMPTY";
red_line===
WKT_GC_EMPTY
start_offset===
23
end_offset===
35
Python OUTPUT===
 public static String WWKT_GC_EMPTY= "GEOMETRYCOLLECTION EMPTY"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_POINT a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_POINT = "POINT (10 10)";
red_line===
WKT_POINT
start_offset===
23
end_offset===
32
Python OUTPUT===
public static final String WKT_POINT = " POINT (10 10) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_POINT_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_POINT_EMPTY = "POINT EMPTY";
red_line===
WKT_POINT_EMPTY
start_offset===
23
end_offset===
38
Python OUTPUT===
public static final String WKT_POINT_EMPTY = " POINT EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_LINESTRING a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_LINESTRING = "LINESTRING (10 10, 20 20, 30 40)";
red_line===
WKT_LINESTRING
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final String WKT_LINESTRING = " LINESTRING (10 10, 20 20, 30 40) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_LINESTRING_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_LINESTRING_EMPTY = "LINESTRING EMPTY";
red_line===
WKT_LINESTRING_EMPTY
start_offset===
23
end_offset===
43
Python OUTPUT===
public static final String WKT_LINESTRING_EMPTY = " LINESTRING EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_LINEARRING a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_LINEARRING = "LINEARRING (10 10, 20 20, 30 40, 10 10)";
red_line===
WKT_LINEARRING
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final String WKT_LINEARRING = " LINEARRING (10 10, 20 20, 30 40, 10 10) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_LINEARRING_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_LINEARRING_EMPTY = "LINEARRING EMPTY";
red_line===
WKT_LINEARRING_EMPTY
start_offset===
23
end_offset===
43
Python OUTPUT===
public static final String WKT_LINEARRING_EMPTY = " LINEARRING EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_POLY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_POLY = "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))";
red_line===
WKT_POLY
start_offset===
23
end_offset===
31
Python OUTPUT===
public static final String WKT_POLY = " POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_POLY_HOLE a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_POLY_HOLE = "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (70 130, 130 130, 130 70, 70 70, 70 130))";
red_line===
WKT_POLY_HOLE
start_offset===
23
end_offset===
36
Python OUTPUT===
public static final String WKT_POLY_HOLE = " POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (70 130, 130 130, 130 70, 70 70, 70 130)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_POLY_HOLE2 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_POLY_HOLE2 = "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (60 140, 90 140, 90 110, 60 110, 60 140), (110 90, 140 90, 140 60, 110 60, 110 90))";
red_line===
WKT_POLY_HOLE2
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final String WKT_POLY_HOLE2 = " POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50), (60 140, 90 140, 90 110, 60 110, 60 140), (110 90, 140 90, 140 60, 110 60, 110 90)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_POLY_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_POLY_EMPTY = "POLYGON EMPTY";
red_line===
WKT_POLY_EMPTY
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final String WKT_POLY_EMPTY = " POLYGON EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTIPOINT a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTIPOINT = "MULTIPOINT ((10 10), (20 20))";
red_line===
WKT_MULTIPOINT
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final String WKT_MULTIPOINT = " MULTIPOINT ((10 10), (20 20)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTIPOINT_SINGLE a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTIPOINT_SINGLE = "MULTIPOINT ((10 10))";
red_line===
WKT_MULTIPOINT_SINGLE
start_offset===
23
end_offset===
44
Python OUTPUT===
public static final String WKT_MULTIPOINT_SINGLE = " MULTIPOINT ((10 10)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTIPOINT_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTIPOINT_EMPTY = "MULTIPOINT EMPTY";
red_line===
WKT_MULTIPOINT_EMPTY
start_offset===
23
end_offset===
43
Python OUTPUT===
public static final String WKT_MULTIPOINT_EMPTY = " MULTIPOINT EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTILINESTRING a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTILINESTRING = "MULTILINESTRING ((10 10, 20 20), (15 15, 30 15))";
red_line===
WKT_MULTILINESTRING
start_offset===
23
end_offset===
42
Python OUTPUT===
public static final String WKT_MULTILINESTRING = " MULTILINESTRING ((10 10, 20 20), (15 15, 30 15)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTILINESTRING_SINGLE a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTILINESTRING_SINGLE = "MULTILINESTRING ((10 10, 20 20))";
red_line===
WKT_MULTILINESTRING_SINGLE
start_offset===
23
end_offset===
49
Python OUTPUT===
public static final String WKT_MULTILINESTRING_SINGLE = " MULTILINESTRING ((10 10, 20 20)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTILINESTRING_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTILINESTRING_EMPTY = "MULTILINESTRING EMPTY";
red_line===
WKT_MULTILINESTRING_EMPTY
start_offset===
23
end_offset===
48
Python OUTPUT===
public static final String WKT_MULTILINESTRING_EMPTY = " MULTILINESTRING EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTIPOLYGON a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTIPOLYGON = "MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10)), ((60 60, 70 70, 80 60, 60 60)))";
red_line===
WKT_MULTIPOLYGON
start_offset===
23
end_offset===
39
Python OUTPUT===
public static final String WKT_MULTIPOLYGON = " MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10)), ((60 60, 70 70, 80 60, 60 60))) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTIPOLYGON_SINGLE a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTIPOLYGON_SINGLE = "MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10)))";
red_line===
WKT_MULTIPOLYGON_SINGLE
start_offset===
23
end_offset===
46
Python OUTPUT===
public static final String WKT_MULTIPOLYGON_SINGLE = " MULTIPOLYGON (((10 10, 10 20, 20 20, 20 15, 10 10))) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_MULTIPOLYGON_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_MULTIPOLYGON_EMPTY = "MULTIPOLYGON EMPTY";
red_line===
WKT_MULTIPOLYGON_EMPTY
start_offset===
23
end_offset===
45
Python OUTPUT===
public static final String WKT_MULTIPOLYGON_EMPTY = " MULTIPOLYGON EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_GC a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_GC = "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250))";
red_line===
WKT_GC
start_offset===
23
end_offset===
29
Python OUTPUT===
public static final String WKT_GC = " GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_GC_ALP a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_GC_ALP = "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1))";
red_line===
WKT_GC_ALP
start_offset===
23
end_offset===
33
Python OUTPUT===
public static final String WKT_GC_ALP = " GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1)) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_GC_NESTED a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_GC_NESTED = "GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2), GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1)))";
red_line===
WKT_GC_NESTED
start_offset===
23
end_offset===
36
Python OUTPUT===
public static final String WKT_GC_NESTED = " GEOMETRYCOLLECTION (LINESTRING (1 1, 2 2), GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250), POINT (1 1))) " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make WKT_GC_EMPTY a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String WKT_GC_EMPTY = "GEOMETRYCOLLECTION EMPTY";
red_line===
WKT_GC_EMPTY
start_offset===
23
end_offset===
35
Python OUTPUT===
public static final String WKT_GC_EMPTY = " GEOMETRYCOLLECTION EMPTY " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(ex.getMessage());
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException(ex.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (chLow >= 'a' && chLow <= 'f') return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (chLow >= 'a' && chLow <= 'f') return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e.getMessage());
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException(e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e.getMessage());
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException(e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList(wkt.length);
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList geometries = new ArrayList(wkt.length); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList(wkt.length);
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList geometries = new ArrayList(wkt.length); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.format(CHECK_EQUAL_FAIL, expectedNorm, actualNorm );
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.format(CHECK_EQUAL_FAIL, expectedNorm, actualNorm ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.format(CHECK_EQUAL_FAIL, expectedNorm, actualNorm );
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.format(CHECK_EQUAL_FAIL, expectedNorm, actualNorm ); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"seq1\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
if (seq1.size() != seq2.size()) return false;
red_line===
seq1.size
start_offset===
8
end_offset===
17
Python OUTPUT===
 if (seq1.size() != seq2.size()) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(ex);
red_line===
RuntimeException
start_offset===
17
end_offset===
33
Python OUTPUT===
 throw new RuntimeException(ex); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList();
red_line===
ArrayList
start_offset===
6
end_offset===
15
Python OUTPUT===
 ArrayList geometries = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = fileRdr.read();
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List geoms = fileRdr.read(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = fileRdr.read();
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List geoms = fileRdr.read(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make reader a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static WKTReader reader = new WKTReader();
red_line===
reader
start_offset===
28
end_offset===
34
Python OUTPUT===
public static final WKTReader reader = new WKTReader ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"treeBytes\".
scn.ruleId===
1488
scn.suspCodeStr===
byte[] treeBytes = bos.toByteArray();
red_line===
bos.toByteArray()
start_offset===
23
end_offset===
40
Python OUTPUT===
 byte[] treeBytes = bos.toByteArray(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public IsValidTester() {
  }
red_line===
IsValidTester
start_offset===
9
end_offset===
22
Python OUTPUT===
 public IsValidTester() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(op.getValidationError().getMessage());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(op.getValidationError().getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("OK");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("OK"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((0 0, 0 50, 50 50, 50 0, 0 0))\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry bigPolygon = reader.read(
                "POLYGON ((0 0, 0 50, 50 50, 50 0, 0 0))");
red_line===
"POLYGON ((0 0, 0 50, 50 50, 50 0, 0 0))"
start_offset===
16
end_offset===
57
Python OUTPUT===
 Geometry bigPolygon = reader.read( "POLYGON ((0 0, 0 50, 50 50, 50 0, 0 0))"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((50 50, 50 0, 0 0, 0 50, 50 50))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry polygon2 = reader.read(
                "POLYGON ((50 50, 50 0, 0 0, 0 50, 50 50))");
red_line===
"POLYGON ((50 50, 50 0, 0 0, 0 50, 50 50))"
start_offset===
16
end_offset===
59
Python OUTPUT===
 Geometry polygon2 = reader.read( "POLYGON ((50 50, 50 0, 0 0, 0 50, 50 50))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON EMPTY\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry polygon = reader.read("POLYGON EMPTY");
red_line===
"POLYGON EMPTY"
start_offset===
39
end_offset===
54
Python OUTPUT===
 Geometry polygon = reader.read("POLYGON EMPTY"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"fact\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private GeometryFactory fact = new GeometryFactory();
red_line===
fact
start_offset===
26
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry result = a.intersection(b);
red_line===
= a.intersection(b)
start_offset===
20
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"seq\".
scn.ruleId===
1854
scn.suspCodeStr===
CoordinateSequence seq = factory.create(5, 2, 1);
red_line===
= factory.create(5, 2, 1)
start_offset===
29
end_offset===
54
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"M should be present\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue("M should be present", seq.hasM());
red_line===
"M should be present"
start_offset===
15
end_offset===
36
Python OUTPUT===
 assertTrue("M should be present", seq.hasM()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Z should be present\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue("Z should be present", seq.hasZ());
red_line===
"Z should be present"
start_offset===
15
end_offset===
36
Python OUTPUT===
 assertTrue("Z should be present", seq.hasZ()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public CoordinateSequenceTestBase(String name) { super(name); }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( String name ) { super ( name ) ; }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (coord.getZ() != seq.getZ(i)) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (coord.getZ() != seq.getZ(i)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (coord.getM() != seq.getM(i)) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (coord.getM() != seq.getM(i)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (coord.getOrdinate(2) != seq.getOrdinate(i, 2)) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (coord.getOrdinate(2) != seq.getOrdinate(i, 2)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (coord.getOrdinate(3) != seq.getOrdinate(i, 3)) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (coord.getOrdinate(3) != seq.getOrdinate(i, 3)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!isEqual(coords[i].getZ(),seq.getZ(i))) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!isEqual(coords[i].getZ(),seq.getZ(i))) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!isEqual(coords[i].getM(),seq.getM(i))) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!isEqual(coords[i].getM(),seq.getM(i))) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!isEqual(coords[i].getOrdinate(2),seq.getOrdinate(i, 2))) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!isEqual(coords[i].getOrdinate(2),seq.getOrdinate(i, 2))) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!isEqual(coords[i].getOrdinate(3),seq.getOrdinate(i, 3))) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!isEqual(coords[i].getOrdinate(3),seq.getOrdinate(i, 3))) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!isEqual(coords[i].getZ(),p.getZ())) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!isEqual(coords[i].getZ(),p.getZ())) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!isEqual(coords[i].getM(),p.getM())) return false;
red_line===
if
start_offset===
8
end_offset===
10
Python OUTPUT===
 if (!isEqual(coords[i].getM(),p.getM())) return false; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double base = 2 * 1;
red_line===
*
start_offset===
22
end_offset===
23
Python OUTPUT===
 double base = 2 * 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"clipped dimension 3\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals("clipped dimension 3", 3, sequence.getDimension());
red_line===
"clipped dimension 3"
start_offset===
17
end_offset===
38
Python OUTPUT===
 assertEquals("clipped dimension 3", 3, sequence.getDimension()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Triangle circumcentres are not equal!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Triangle circumcentres are not equal!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(WKTWriter.toPoint(cc1));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(WKTWriter.toPoint(cc1)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(WKTWriter.toPoint(cc2));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(WKTWriter.toPoint(cc2)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Parameters to checkIntersects have the same names but not the same order as the method arguments.
scn.ruleId===
2234
scn.suspCodeStr===
checkIntersects(a1x, a2y, a2x, a1y, b1x, b1y, b2x, b2y, expected);
red_line===
(a1x, a2y, a2x, a1y, b1x, b1y, b2x, b2y, expected)
start_offset===
17
end_offset===
67
Python OUTPUT===
 checkIntersects(a1x, a2y, a2x, a1y, b1x, b1y, b2x, b2y, expected); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Parameters to checkIntersects have the same names but not the same order as the method arguments.
scn.ruleId===
2234
scn.suspCodeStr===
checkIntersects(a1x, a1y, a2x, a2y, b1x, b2y, b2x, b1y, expected);
red_line===
(a1x, a1y, a2x, a2y, b1x, b2y, b2x, b1y, expected)
start_offset===
17
end_offset===
67
Python OUTPUT===
 checkIntersects(a1x, a1y, a2x, a2y, b1x, b2y, b2x, b1y, expected); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Parameters to checkIntersects have the same names but not the same order as the method arguments.
scn.ruleId===
2234
scn.suspCodeStr===
checkIntersects(a1x, a2y, a2x, a1y, b1x, b2y, b2x, b1y, expected);
red_line===
(a1x, a2y, a2x, a1y, b1x, b2y, b2x, b1y, expected)
start_offset===
17
end_offset===
67
Python OUTPUT===
 checkIntersects(a1x, a2y, a2x, a1y, b1x, b2y, b2x, b1y, expected); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_GC\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static String WKT_GC = "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250))";
red_line===
WKT_GC
start_offset===
16
end_offset===
22
Python OUTPUT===
 static String WWKT_GC= "GEOMETRYCOLLECTION (POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200)), LINESTRING (150 250, 250 250))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WKT_POLY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
static String WKT_POLY = "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))";
red_line===
WKT_POLY
start_offset===
16
end_offset===
24
Python OUTPUT===
 static String WWKT_POLY= "POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"b\".
scn.ruleId===
1854
scn.suspCodeStr===
final Geometry b = read(WKT_POLY);
red_line===
= read(WKT_POLY)
start_offset===
21
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 33.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1000), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1000), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 33.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 33.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING(1.111 2.222, 3.333 4.444)\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
LineString l1 = (LineString) reader.read("LINESTRING(1.111 2.222, 3.333 4.444)");
red_line===
"LINESTRING(1.111 2.222, 3.333 4.444)"
start_offset===
45
end_offset===
83
Python OUTPUT===
 LineString l1 = (LineString) reader.read("LINESTRING(1.111 2.222, 3.333 4.444)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING(1.111 2.222, 3.333 4.444, 5.555 6.666)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
LineString l1 = (LineString) reader.read("LINESTRING(1.111 2.222, 3.333 4.444, 5.555 6.666)");
red_line===
"LINESTRING(1.111 2.222, 3.333 4.444, 5.555 6.666)"
start_offset===
45
end_offset===
96
Python OUTPUT===
 LineString l1 = (LineString) reader.read("LINESTRING(1.111 2.222, 3.333 4.444, 5.555 6.666)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lineStringsAndLinearRings = GeometryExtracter.extract(gc, Geometry.TYPENAME_LINESTRING);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List lineStringsAndLinearRings = GeometryExtracter.extract(gc, Geometry.TYPENAME_LINESTRING); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List linearRings = GeometryExtracter.extract(gc, Geometry.TYPENAME_LINEARRING);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List linearRings = GeometryExtracter.extract(gc, Geometry.TYPENAME_LINEARRING); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List points = GeometryExtracter.extract(gc, Geometry.TYPENAME_POINT);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List points = GeometryExtracter.extract(gc, Geometry.TYPENAME_POINT); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Invalid result found");
red_line===
RuntimeException
start_offset===
15
end_offset===
31
Python OUTPUT===
 throw new RuntimeException("Invalid result found"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public StressTestHarness() {
  }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
double xOffset = width * Math.random();
red_line===
	doubl
start_offset===
2
end_offset===
8
Python OUTPUT===
protected = width * Math.random ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
double yOffset = env.getHeight() * Math.random();
red_line===
	doubl
start_offset===
2
end_offset===
8
Python OUTPUT===
protected = env.getHeight ( ) * Math.random ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"circle\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry circle = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
20
end_offset===
38
Python OUTPUT===
 Geometry circle = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
18
end_offset===
38
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"circle\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry circle = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
22
end_offset===
40
Python OUTPUT===
 Geometry circle = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Different results found for intersects() !");
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
 throw new RuntimeException("Different results found for intersects() !"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
double xOffset = width * Math.random();
red_line===
fset = width * M
start_offset===
13
end_offset===
29
Python OUTPUT===
 double xOffset = width * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
double yOffset = env.getHeight() * Math.random();
red_line===
fset = env.getHe
start_offset===
13
end_offset===
29
Python OUTPUT===
 double yOffset = env.getHeight() * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(line);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(line); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Slow = " + slowIntersects + ", Fast = " + fastIntersects);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Slow = " + slowIntersects + ", Fast = " + fastIntersects); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"circle\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry circle = gsf.createCircle();
red_line===
gsf.createCircle()
start_offset===
20
end_offset===
38
Python OUTPUT===
 Geometry circle = gsf.createCircle(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"poly\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry poly = gsf.createSineStar();
red_line===
gsf.createSineStar()
start_offset===
18
end_offset===
38
Python OUTPUT===
 Geometry poly = gsf.createSineStar(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"line\".
scn.ruleId===
1488
scn.suspCodeStr===
LineString line = createTestLine(basePt, size, nPts);
red_line===
createTestLine(basePt, size, nPts)
start_offset===
22
end_offset===
56
Python OUTPUT===
 LineString line = createTestLine(basePt, size, nPts); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! checkContains(target, test)) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (! checkContains(target, test)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List testGeoms = getTestGeometries();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List testGeoms = getTestGeometries(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List testGeoms = getTestGeometries();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List testGeoms = getTestGeometries(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List testGeoms = getTestGeometries();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List testGeoms = getTestGeometries(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List testGeoms = createTestGeometries(testEnv, 5, testGeomSize);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List testGeoms = createTestGeometries(testEnv, 5, testGeomSize); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List testGeoms = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List testGeoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(testGeom);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(testGeom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"rdr\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private WKTReader rdr = new WKTReader();
red_line===
rdr
start_offset===
20
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList list = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList list = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT(1.234 5.678)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Point p1 = (Point) reader.read("POINT(1.234 5.678)");
red_line===
"POINT(1.234 5.678)"
start_offset===
35
end_offset===
55
Python OUTPUT===
 Point p1 = (Point) reader.read("POINT(1.234 5.678)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
PrecisionModel pm_10 = new PrecisionModel(0.1);
red_line===
pm_10
start_offset===
18
end_offset===
23
Python OUTPUT===
 PrecisionModel pm_10 = new PrecisionModel(0.1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"A\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static int A = Dimension.A;
red_line===
A
start_offset===
21
end_offset===
22
Python OUTPUT===
 private static int AA= Dimension.A; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"L\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static int L = Dimension.L;
red_line===
L
start_offset===
21
end_offset===
22
Python OUTPUT===
 private static int LL= Dimension.L; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"P\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static int P = Dimension.P;
red_line===
P
start_offset===
21
end_offset===
22
Python OUTPUT===
 private static int PP= Dimension.P; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"2*2***2**\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue((new IntersectionMatrix("2*2***2**")).isOverlaps(P,P));
red_line===
"2*2***2**"
start_offset===
39
end_offset===
50
Python OUTPUT===
 assertTrue((new IntersectionMatrix("2*2***2**")).isOverlaps(P,P)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"012*TF012\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
i.set("012*TF012");
red_line===
"012*TF012"
start_offset===
10
end_offset===
21
Python OUTPUT===
 i.set("012*TF012"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"2FFF1FFF2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(! (new IntersectionMatrix("2FFF1FFF2")).isOverlaps(A,A));
red_line===
"2FFF1FFF2"
start_offset===
41
end_offset===
52
Python OUTPUT===
 assertTrue(! (new IntersectionMatrix("2FFF1FFF2")).isOverlaps(A,A)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"FT*******\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue((new IntersectionMatrix("FT*******")).isTouches(P,A));
red_line===
"FT*******"
start_offset===
39
end_offset===
50
Python OUTPUT===
 assertTrue((new IntersectionMatrix("FT*******")).isTouches(P,A)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"0FFFFFFF2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(! (new IntersectionMatrix("0FFFFFFF2")).isOverlaps(P,P));
red_line===
"0FFFFFFF2"
start_offset===
41
end_offset===
52
Python OUTPUT===
 assertTrue(! (new IntersectionMatrix("0FFFFFFF2")).isOverlaps(P,P)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"1FFF0FFF2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(! (new IntersectionMatrix("1FFF0FFF2")).isOverlaps(L,L));
red_line===
"1FFF0FFF2"
start_offset===
41
end_offset===
52
Python OUTPUT===
 assertTrue(! (new IntersectionMatrix("1FFF0FFF2")).isOverlaps(L,L)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing scrolling of closed ring");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing scrolling of closed ring"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing scrolling of circular string");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing scrolling of circular string"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing indexOf");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing indexOf"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing minCoordinateIndex");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing minCoordinateIndex"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing isRing");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing isRing"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing copy");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing copy"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing reverse");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing reverse"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ordinates.toString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(ordinates.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("sequence has a size of " + sequence.size() + ". Execution of this test needs a sequence "+
              "with more than 6 coordinates.");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("sequence has a size of " + sequence.size() + ". Execution of this test needs a sequence "+ "with more than 6 coordinates."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("sequence has a size of " + sequence.size() + ". Execution of this test needs a sequence "+
              "with more than 5 coordinates.");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("sequence has a size of " + sequence.size() + ". Execution of this test needs a sequence "+ "with more than 5 coordinates."); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
for (int j = 2; j < dimension; j++ )
        sequence.setOrdinate(i, j, Math.pow(10, j-1)*i);
red_line===
-
start_offset===
49
end_offset===
50
Python OUTPUT===
 for (int j = 2; j < dimension; j++ ) sequence.setOrdinate (i, j, Math.pow (10, j-1 )*i );
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ROOT2\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static double ROOT2 = Math.sqrt(2);
red_line===
ROOT2
start_offset===
24
end_offset===
29
Python OUTPUT===
 private static double RROOT2= Math.sqrt(2); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (Math.abs(p0.y - p1.y) > tolerance) return false;
red_line===
if
start_offset===
3
end_offset===
5
Python OUTPUT===
 if (Math.abs(p0.y - p1.y) > tolerance) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
Object DATA = new Integer(999);
red_line===
Integer
start_offset===
22
end_offset===
29
Python OUTPUT===
 Object DATA = new Int9); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int SRID = 123;
red_line===
SRID
start_offset===
8
end_offset===
12
Python OUTPUT===
 int SRID = 123; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Object DATA = new Integer(999);
red_line===
DATA
start_offset===
11
end_offset===
15
Python OUTPUT===
 Object DATA = new Integer(999); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
int j = i;
red_line===
g1 instanceof MultiLineString ? numGeometries - i - 1 : i;
start_offset===
19
end_offset===
77
Python OUTPUT===
 int j = i; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (!(Double.isNaN(c1.getOrdinate(i, k)) && Double.isNaN(c2.getOrdinate(j, k))))
            return false;
red_line===
if
start_offset===
10
end_offset===
12
Python OUTPUT===
 if (!(Double.isNaN(c1.getOrdinate(i, k)) && Double.isNaN(c2.getOrdinate(j, k)))) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int SRID = 123;
red_line===
SRID
start_offset===
8
end_offset===
12
Python OUTPUT===
 int SRID = 123; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Comparator comp = new CoordinateArrays.BidirectionalComparator();
red_line===
Comparator
start_offset===
4
end_offset===
14
Python OUTPUT===
 Comparator comp = new CoordinateArrays.BidirectionalComparator(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"COORDS_1\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Coordinate[] COORDS_1 = new Coordinate[] { new Coordinate(1, 1), new Coordinate(2, 2), new Coordinate(3, 3) };
red_line===
COORDS_1
start_offset===
30
end_offset===
38
Python OUTPUT===
 private static Coordinate[] CCOORDS_1= new Coordinate[] { new Coordinate(1, 1), new Coordinate(2, 2), new Coordinate(3, 3) }; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"COORDS_EMPTY\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Coordinate[] COORDS_EMPTY = new Coordinate[0];
red_line===
COORDS_EMPTY
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static Coordinate[] CCOORDS_EMPTY= new Coordinate[0]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
Coordinate[] scrolled = createCircularString(new Coordinate(20, 20), 7d,
      0.1, 22);
red_line===
;
start_offset===
15
end_offset===
16
Python OUTPUT===
 Coordinate[] srolled = createCircularString(new Coordinate(20, 20), 7d, 0.1, 22); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
Coordinate fixed[] = CoordinateArrays.enforceConsistency(array2,2,0);
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
 Coordinate fixed[] = CoordinateArrays.enforceConsistency(array2,2,0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"c2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
Coordinate c1 = seq1[pos1], c2 = seq2[pos2];
red_line===
c2
start_offset===
32
end_offset===
34
Python OUTPUT===
 Coordinate c1 = seq1[pos1], c2 = seq2[pos2]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING(1 1 0, 2 1 0, 1 2 10)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkInterpolateZ("LINESTRING(1 1 0, 2 1 0, 1 2 10)", new Coordinate(1.5,
        1.5), 5);
red_line===
"LINESTRING(1 1 0, 2 1 0, 1 2 10)"
start_offset===
22
end_offset===
56
Python OUTPUT===
 checkInterpolateZ("LINESTRING(1 1 0, 2 1 0, 1 2 10)", new Coordinate(1.5, 1.5), 5); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON((10 10, 20 10, 15 20, 10 10))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkAcute("POLYGON((10 10, 20 10, 15 20, 10 10))", true);
red_line===
"POLYGON((10 10, 20 10, 15 20, 10 10))"
start_offset===
15
end_offset===
54
Python OUTPUT===
 checkAcute("POLYGON((10 10, 20 10, 15 20, 10 10))", true); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON((10 10, 20 10, 20 20, 10 10))\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkArea("POLYGON((10 10, 20 10, 20 20, 10 10))", -50);
red_line===
"POLYGON((10 10, 20 10, 20 20, 10 10))"
start_offset===
14
end_offset===
53
Python OUTPUT===
 checkArea("POLYGON((10 10, 20 10, 20 20, 10 10))", -50); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON((10 10, 20 20, 20 10, 10 10))\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkArea("POLYGON((10 10, 20 20, 20 10, 10 10))", 50);
red_line===
"POLYGON((10 10, 20 20, 20 10, 10 10))"
start_offset===
14
end_offset===
53
Python OUTPUT===
 checkArea("POLYGON((10 10, 20 20, 20 10, 10 10))", 50); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT (30 30)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Point point = (Point) reader.read("POINT (30 30)");
red_line===
"POINT (30 30)"
start_offset===
38
end_offset===
53
Python OUTPUT===
 Point point = (Point) reader.read("POINT (30 30)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (200 240, 140 160, 80 160, 160 80, 80 80)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
LineString l = (LineString) reader.read(
          "LINESTRING (200 240, 140 160, 80 160, 160 80, 80 80)");
red_line===
"LINESTRING (200 240, 140 160, 80 160, 160 80, 80 80)"
start_offset===
10
end_offset===
64
Python OUTPUT===
 LineString l = (LineString) reader.read( "LINESTRING (200 240, 140 160, 80 160, 160 80, 80 80)"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (20 20, 160 40, 160 100, 100 120, 60 60)\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
LineString l = (LineString) reader.read(
          "LINESTRING (20 20, 160 40, 160 100, 100 120, 60 60)");
red_line===
"LINESTRING (20 20, 160 40, 160 100, 100 120, 60 60)"
start_offset===
10
end_offset===
63
Python OUTPUT===
 LineString l = (LineString) reader.read( "LINESTRING (20 20, 160 40, 160 100, 100 120, 60 60)"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList geometries = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING EMPTY\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
doTest(new String[]{"LINESTRING EMPTY", "LINESTRING EMPTY"},
      new String[]{});
red_line===
"LINESTRING EMPTY"
start_offset===
24
end_offset===
42
Python OUTPUT===
 doTest(new String[]{"LINESTRING EMPTY", "LINESTRING EMPTY"}, new String[]{}); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List inputGeoms = fromWKT(inputWKT);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List inputGeoms = fromWKT(inputWKT); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geomList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geomList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isCorrect\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
boolean isCorrect = false;
red_line===
isCorrect
start_offset===
12
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ERROR - Expected: " + expected);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("ERROR - Expected: " + expected); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("          Actual: " + result);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(" Actual: " + result); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
ex.printStackTrace();
red_line===
ex.printSt
start_offset===
8
end_offset===
18
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e.toString());
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
 throw new RuntimeException(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e.toString());
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
 throw new RuntimeException(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e.toString());
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
 throw new RuntimeException(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e.toString());
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
 throw new RuntimeException(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lineStrings = Arrays.asList(new Object[] {a, b});
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lineStrings = Arrays.asList(new Object[] {a, b}); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
List lineStrings = Arrays.asList(new Object[] {a, b});
red_line===
new Object[] {a, b}
start_offset===
37
end_offset===
56
Python OUTPUT===
 List lineStrings = Arrays.asList(new
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"rdr\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private WKTReader rdr = new WKTReader(fact);
red_line===
rdr
start_offset===
20
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"imStr\".
scn.ruleId===
1854
scn.suspCodeStr===
String imStr = im.toString();
red_line===
= im.toString()
start_offset===
17
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"F01FF0102\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
runRelateTest(a, b,  BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE,   "F01FF0102"    );
red_line===
"F01FF0102"
start_offset===
67
end_offset===
78
Python OUTPUT===
 runRelateTest(a, b, BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE, "F01FF0102" ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"imStr\".
scn.ruleId===
1854
scn.suspCodeStr===
String imStr = im.toString();
red_line===
= im.toString()
start_offset===
17
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geoms = createDiscs(5, 0.7);
red_line===
Collection
start_offset===
3
end_offset===
13
Python OUTPUT===
 Collection geoms = createDiscs(5, 0.7); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geoms = createDiscs(5, 0.55);
red_line===
Collection
start_offset===
3
end_offset===
13
Python OUTPUT===
 Collection geoms = createDiscs(5, 0.55); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = new ArrayList();
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
 List geoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geoms = readList(inputWKT);
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection geoms = readList(inputWKT); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public CascadedPolygonUnionTester() {
  }
red_line===
CascadedPolygonUnionTester
start_offset===
9
end_offset===
35
Python OUTPUT===
 public CascadedPolygonUnionTester() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
public static final double MIN_SIMILARITY_MEAURE = 0.999999;
red_line===
;
start_offset===
61
end_offset===
62
Python OUTPUT===
 public static final double MIN_SIMILARITY_MEAURE = 0.999999;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geoms = IOUtil.readWKTFile(filename);
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection geoms = IOUtil.readWKTFile(filename); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geoms = IOUtil.readWKTFile(new InputStreamReader(is));
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection geoms = IOUtil.readWKTFile(new InputStreamReader(is)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List expected = readList(expectedWKT);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List expected = readList(expectedWKT); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection actual = polygonizer.getPolygons();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection actual = polygonizer.getPolygons(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ex.printStackTrace();
red_line===
  ex.print
start_offset===
4
end_offset===
14
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List rings = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 private List rings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((9 2, 9 1, 8 1, 8 2, 9 2))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POLYGON ((9 2, 9 1, 8 1, 8 2, 9 2))");
red_line===
"POLYGON ((9 2, 9 1, 8 1, 8 2, 9 2))"
start_offset===
22
end_offset===
59
Python OUTPUT===
 Geometry b = read("POLYGON ((9 2, 9 1, 8 1, 8 2, 9 2))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (50 150, 150 150)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("LINESTRING (50 150, 150 150)");
red_line===
"LINESTRING (50 150, 150 150)"
start_offset===
22
end_offset===
52
Python OUTPUT===
 Geometry a = read("LINESTRING (50 150, 150 150)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((1 2, 1 1, 9 1, 1 2))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("POLYGON ((1 2, 1 1, 9 1, 1 2))");
red_line===
"POLYGON ((1 2, 1 1, 9 1, 1 2))"
start_offset===
22
end_offset===
54
Python OUTPUT===
 Geometry a = read("POLYGON ((1 2, 1 1, 9 1, 1 2))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((3 2, 1 2, 2 5, 3 2))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry expected = read("POLYGON ((3 2, 1 2, 2 5, 3 2))");
red_line===
"POLYGON ((3 2, 1 2, 2 5, 3 2))"
start_offset===
29
end_offset===
61
Python OUTPUT===
 Geometry expected = read("POLYGON ((3 2, 1 2, 2 5, 3 2))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))\" 11 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))");
red_line===
"POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))"
start_offset===
22
end_offset===
79
Python OUTPUT===
 Geometry a = read("POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))");
red_line===
"MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))"
start_offset===
22
end_offset===
95
Python OUTPUT===
 Geometry a = read("MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((1 0, 1 2, 2 2, 2 0, 1 0))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POLYGON ((1 0, 1 2, 2 2, 2 0, 1 0))");
red_line===
"POLYGON ((1 0, 1 2, 2 2, 2 0, 1 0))"
start_offset===
22
end_offset===
59
Python OUTPUT===
 Geometry b = read("POLYGON ((1 0, 1 2, 2 2, 2 0, 1 0))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((0 3, 3 3, 3 0, 0 0, 0 3), (1 1.2, 1 1.1, 2.3 1.1, 1 1.2))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("POLYGON ((0 3, 3 3, 3 0, 0 0, 0 3), (1 1.2, 1 1.1, 2.3 1.1, 1 1.2))");
red_line===
"POLYGON ((0 3, 3 3, 3 0, 0 0, 0 3), (1 1.2, 1 1.1, 2.3 1.1, 1 1.2))"
start_offset===
22
end_offset===
91
Python OUTPUT===
 Geometry a = read("POLYGON ((0 3, 3 3, 3 0, 0 0, 0 3), (1 1.2, 1 1.1, 2.3 1.1, 1 1.2))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((1 1, 2 1, 2 0, 1 0, 1 1))\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POLYGON ((1 1, 2 1, 2 0, 1 0, 1 1))");
red_line===
"POLYGON ((1 1, 2 1, 2 0, 1 0, 1 1))"
start_offset===
22
end_offset===
59
Python OUTPUT===
 Geometry b = read("POLYGON ((1 1, 2 1, 2 0, 1 0, 1 1))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))");
red_line===
"POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))"
start_offset===
22
end_offset===
79
Python OUTPUT===
 Geometry b = read("POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON EMPTY\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry expected = read("POLYGON EMPTY");
red_line===
"POLYGON EMPTY"
start_offset===
29
end_offset===
44
Python OUTPUT===
 Geometry expected = read("POLYGON EMPTY"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT(10 10)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkRobustScale("POINT(1 1)", "POINT(10 10)", 
        1, 1e12, 1 );
red_line===
"POINT(10 10)"
start_offset===
35
end_offset===
49
Python OUTPUT===
 checkRobustScale("POINT(1 1)", "POINT(10 10)", 1, 1e12, 1 ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT( 10 10 )\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkRobustScale("POINT( 123123.123451234512345 1 )", "POINT( 10 10 )", 
        1e8, 1e8, 1e11 );
red_line===
"POINT( 10 10 )"
start_offset===
58
end_offset===
74
Python OUTPUT===
 checkRobustScale("POINT( 123123.123451234512345 1 )", "POINT( 10 10 )", 1e8, 1e8, 1e11 ); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT EMPTY\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry expected = read("POINT EMPTY");
red_line===
"POINT EMPTY"
start_offset===
29
end_offset===
42
Python OUTPUT===
 Geometry expected = read("POINT EMPTY"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT (5 1)\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POINT (5 1)");
red_line===
"POINT (5 1)"
start_offset===
22
end_offset===
35
Python OUTPUT===
 Geometry b = read("POINT (5 1)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (1 1, 9 1)\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("LINESTRING (1 1, 9 1)");
red_line===
"LINESTRING (1 1, 9 1)"
start_offset===
22
end_offset===
45
Python OUTPUT===
 Geometry a = read("LINESTRING (1 1, 9 1)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Area of intersection result area is too large\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue("Area of intersection result area is too large", isCorrect);
red_line===
"Area of intersection result area is too large"
start_offset===
15
end_offset===
62
Python OUTPUT===
 assertTrue("Area of intersection result area is too large", isCorrect); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((10 20, 20 20, 20 10, 10 10, 10 20))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("POLYGON ((10 20, 20 20, 20 10, 10 10, 10 20))");
red_line===
"POLYGON ((10 20, 20 20, 20 10, 10 10, 10 20))"
start_offset===
22
end_offset===
69
Python OUTPUT===
 Geometry a = read("POLYGON ((10 20, 20 20, 20 10, 10 10, 10 20))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT EMPTY\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry expected = read("POINT EMPTY");
red_line===
"POINT EMPTY"
start_offset===
29
end_offset===
42
Python OUTPUT===
 Geometry expected = read("POINT EMPTY"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"MULTIPOINT ((1 1), (2 1))\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("MULTIPOINT ((1 1), (2 1))");
red_line===
"MULTIPOINT ((1 1), (2 1))"
start_offset===
22
end_offset===
49
Python OUTPUT===
 Geometry a = read("MULTIPOINT ((1 1), (2 1))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT (2 1)\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POINT (2 1)");
red_line===
"POINT (2 1)"
start_offset===
22
end_offset===
35
Python OUTPUT===
 Geometry b = read("POINT (2 1)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"MULTIPOINT ((1 1), (3 1))\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("MULTIPOINT ((1 1), (3 1))");
red_line===
"MULTIPOINT ((1 1), (3 1))"
start_offset===
22
end_offset===
49
Python OUTPUT===
 Geometry a = read("MULTIPOINT ((1 1), (3 1))"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"checkNext()\".
scn.ruleId===
2259
scn.suspCodeStr===
checkNext( e2sym, e1sym );
red_line===
checkNext
start_offset===
4
end_offset===
13
Python OUTPUT===
 checkNext( e2sym, e1sym ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((1 0, 2 5, 3 0, 1 0))\" 12 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POLYGON ((1 0, 2 5, 3 0, 1 0))");
red_line===
"POLYGON ((1 0, 2 5, 3 0, 1 0))"
start_offset===
22
end_offset===
54
Python OUTPUT===
 Geometry b = read("POLYGON ((1 0, 2 5, 3 0, 1 0))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"GEOMETRYCOLLECTION EMPTY\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("GEOMETRYCOLLECTION EMPTY");
red_line===
"GEOMETRYCOLLECTION EMPTY"
start_offset===
22
end_offset===
48
Python OUTPUT===
 Geometry a = read("GEOMETRYCOLLECTION EMPTY"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING EMPTY\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("LINESTRING EMPTY");
red_line===
"LINESTRING EMPTY"
start_offset===
22
end_offset===
40
Python OUTPUT===
 Geometry a = read("LINESTRING EMPTY"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (50 150, 150 150)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("LINESTRING (50 150, 150 150)");
red_line===
"LINESTRING (50 150, 150 150)"
start_offset===
22
end_offset===
52
Python OUTPUT===
 Geometry b = read("LINESTRING (50 150, 150 150)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))");
red_line===
"POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))"
start_offset===
22
end_offset===
79
Python OUTPUT===
 Geometry a = read("POLYGON ((100 200, 200 200, 200 100, 100 100, 100 200))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))");
red_line===
"MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))"
start_offset===
22
end_offset===
95
Python OUTPUT===
 Geometry a = read("MULTIPOLYGON (((1 1, 5 1, 5 0, 1 0, 1 1)), ((1 1, 5 2, 5 4, 1 4, 1 1)))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry b = read("POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))");
red_line===
"POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))"
start_offset===
22
end_offset===
79
Python OUTPUT===
 Geometry b = read("POLYGON ((120 180, 180 180, 180 120, 120 120, 120 180))"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON EMPTY\" 14 times.
scn.ruleId===
1192
scn.suspCodeStr===
Geometry a = read("POLYGON EMPTY");
red_line===
"POLYGON EMPTY"
start_offset===
22
end_offset===
37
Python OUTPUT===
 Geometry a = read("POLYGON EMPTY"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! isEqual(e.dest(), destx, desty)) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (! isEqual(e.dest(), destx, desty)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"pts\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate[] pts = toCoordinates(ord);
red_line===
toCoordinates(ord)
start_offset===
23
end_offset===
41
Python OUTPUT===
 Coordinate[] pts = toCoordinates(ord); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"checkNext()\".
scn.ruleId===
2259
scn.suspCodeStr===
checkNext( e3sym, e2sym );
red_line===
checkNext
start_offset===
4
end_offset===
13
Python OUTPUT===
 checkNext( e3sym, e2sym ); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"checkNodeValid()\".
scn.ruleId===
2259
scn.suspCodeStr===
checkNodeValid( e2 );
red_line===
checkNodeValid
start_offset===
4
end_offset===
18
Python OUTPUT===
 checkNodeValid( e2 ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isContained\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isContained = a.contains(b);
red_line===
a.contains(b)
start_offset===
30
end_offset===
43
Python OUTPUT===
 boolean isContained = a.contains(b); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"checkNodeValid()\".
scn.ruleId===
2259
scn.suspCodeStr===
checkNodeValid( e1 );
red_line===
checkNodeValid
start_offset===
4
end_offset===
18
Python OUTPUT===
 checkNodeValid( e1 ); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"checkNodeValid()\".
scn.ruleId===
2259
scn.suspCodeStr===
checkNodeValid( e3 );
red_line===
checkNodeValid
start_offset===
4
end_offset===
18
Python OUTPUT===
 checkNodeValid( e3 ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
public abstract void test() throws Exception;
red_line===
Exception
start_offset===
39
end_offset===
48
Python OUTPUT===
 public abstract void test() throws Exception; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new Exception(
        supplement(e.toString()) + StringUtil.getStackTrace(e));
red_line===
Exception
start_offset===
16
end_offset===
25
Python OUTPUT===
 throw new Exception( supplement(e.toString()) + StringUtil.getStackTrace(e)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map nameToTestMap = new HashMap();
red_line===
Map
start_offset===
10
end_offset===
13
Python OUTPUT===
 private Map nameToTestMap = new HashMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection tests = nameToTestMap.values();
red_line===
Collection
start_offset===
6
end_offset===
16
Python OUTPUT===
 Collection tests = nameToTestMap.values(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"geomFact\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private GeometryFactory geomFact = new GeometryFactory();
red_line===
geomFact
start_offset===
26
end_offset===
34
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public BaseDistanceTest(String name) { super(name); }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( String name ) { super ( name ) ; }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"TOLERANCE\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double TOLERANCE = 0.00005;
red_line===
TOLERANCE
start_offset===
30
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT (10 10)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
runBoundaryTest(a, BoundaryNodeRule.MULTIVALENT_ENDPOINT_BOUNDARY_RULE,
                    "POINT (10 10)"  );
red_line===
"POINT (10 10)"
start_offset===
20
end_offset===
35
Python OUTPUT===
 runBoundaryTest(a, BoundaryNodeRule.MULTIVALENT_ENDPOINT_BOUNDARY_RULE, "POINT (10 10)" ); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List list = tree.query(new Envelope(0, 0, 1, 1));
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List list = tree.query(new Envelope(0, 0, 1, 1)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList geometries = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List parentBoundables
         = t.createParentBoundablesFromVerticalSlice(itemWrappers(childCount), 0);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List parentBoundables = t.createParentBoundablesFromVerticalSlice(itemWrappers(childCount), 0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList itemWrappers = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList itemWrappers = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
STRtreeDemo.printSourceData(geometries, System.out);
red_line===
System.out
start_offset===
46
end_offset===
56
Python OUTPUT===
 STRtreeDemo.printSourceData(geometries, System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
STRtreeDemo.printLevels(t, System.out);
red_line===
System.out
start_offset===
33
end_offset===
43
Python OUTPUT===
 STRtreeDemo.printLevels(t, System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List topKList = Arrays.asList(testTopK);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List topKList = Arrays.asList(testTopK); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Random random = new Random();
red_line===
Rand
start_offset===
4
end_offset===
8
Python OUTPUT===
 Random random = new Random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> testDataset = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
46
end_offset===
56
Python OUTPUT===
\u003c\u003e testDataset = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> correctData = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
46
end_offset===
56
Python OUTPUT===
\u003c\u003e correctData = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = index.query(queryEnv);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = index.query(queryEnv); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private ArrayList sourceData;
red_line===
ArrayList
start_offset===
10
end_offset===
19
Python OUTPUT===
 private ArrayList sourceData; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
sourceData = new ArrayList();
red_line===
ArrayList
start_offset===
21
end_offset===
30
Python OUTPUT===
 sourceData = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List expectedMatches = intersectingEnvelopes(queryEnvelope, sourceData);
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List expectedMatches = intersectingEnvelopes(queryEnvelope, sourceData); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List actualMatches = index.query(queryEnvelope);
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List actualMatches = index.query(queryEnvelope); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList intersectingEnvelopes = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList intersectingEnvelopes = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VERBOSE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static boolean VERBOSE = false;
red_line===
VERBOSE
start_offset===
25
end_offset===
32
Python OUTPUT===
 private static boolean VVERBOSE= false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public SpatialIndexTester() {
  }
red_line===
SpatialIndexTester
start_offset===
9
end_offset===
27
Python OUTPUT===
 public SpatialIndexTester() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"extraMatchCount\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int extraMatchCount = 0;
red_line===
extraMatchCount
start_offset===
7
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"expectedMatchCount\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int expectedMatchCount = 0;
red_line===
expectedMatchCount
start_offset===
8
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"actualMatchCount\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int actualMatchCount = 0;
red_line===
actualMatchCount
start_offset===
8
end_offset===
24
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"queryCount\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int queryCount = 0;
red_line===
queryCount
start_offset===
8
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List list = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List list = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public IntervalList() {
  }
red_line===
IntervalList
start_offset===
9
end_offset===
21
Python OUTPUT===
 public IntervalList() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List eList = envList.query(env);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List eList = envList.query(env); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
if (finalList.size() != eList.size() )
      throw new RuntimeException("queries do not match");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 if (finalList.size() != eList.size() ) throw new RuntimeException("queries do not match"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List eList = intervalList.query(interval);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List eList = intervalList.query(interval); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List candidateList = btree.query(interval);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List candidateList = btree.query(interval); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List finalList = getOverlapping(candidateList, interval);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List finalList = getOverlapping(candidateList, interval); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List eList = intervalList.query(interval);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List eList = intervalList.query(interval); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public BinTreeCorrectTest() {
  }
red_line===
BinTreeCorrectTest
start_offset===
9
end_offset===
27
Python OUTPUT===
 public BinTreeCorrectTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("depth = " + btree.depth()
      + "  size = " + btree.size() );
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("depth = " + btree.depth() + " size = " + btree.size() ); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int gridSize = (int) Math.sqrt((double) nGridCells);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int gridSize = (int) Math.sqrt((douGridCells); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int cellSize = (int) Math.sqrt((double) NUM_ITEMS);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int cellSize = (int) Math.sqrt((douUM_ITEMS); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int gridSize = (int) Math.sqrt((double) nGridCells);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int gridSize = (int) Math.sqrt((douGridCells); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"eList\".
scn.ruleId===
1854
scn.suspCodeStr===
List eList = intervalList.query(interval);
red_line===
= intervalList.query(interval)
start_offset===
15
end_offset===
45
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(finalList.size());
red_line===
System.out
start_offset===
0
end_offset===
10
Python OUTPUT===
 System.out.println(finalList.size()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
if (finalList.size() != eList.size() )
      throw new RuntimeException("queries do not match");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 if (finalList.size() != eList.size() ) throw new RuntimeException("queries do not match"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List candidateList = q.query(env);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List candidateList = q.query(env); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List finalList = getOverlapping(candidateList, env);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List finalList = getOverlapping(candidateList, env); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List eList = envList.query(env);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List eList = envList.query(env); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public QuadtreeCorrectTest() {
  }
red_line===
QuadtreeCorrectTest
start_offset===
9
end_offset===
28
Python OUTPUT===
 public QuadtreeCorrectTest() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("depth = " + q.depth()
      + "  size = " + q.size() );
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("depth = " + q.depth() + " size = " + q.size() ); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int gridSize = (int) Math.sqrt((double) nGridCells);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int gridSize = (int) Math.sqrt((douGridCells); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int cellSize = (int) Math.sqrt((double) NUM_ITEMS);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int cellSize = (int) Math.sqrt((douUM_ITEMS); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int gridSize = (int) Math.sqrt((double) nGridCells);
red_line===
double
start_offset===
36
end_offset===
42
Python OUTPUT===
 int gridSize = (int) Math.sqrt((douGridCells); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Time = " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Time = " + sw.getTimeString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"eList\".
scn.ruleId===
1854
scn.suspCodeStr===
List eList = envList.query(env);
red_line===
= envList.query(env)
start_offset===
15
end_offset===
35
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
assertTrue(result1.size() == 0);
red_line===
result1.size() == 0
start_offset===
14
end_offset===
33
Python OUTPUT===
 assertTrue(result1.size() == 0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
assertTrue(result2.size() == 0);
red_line===
result2.size() == 0
start_offset===
14
end_offset===
33
Python OUTPUT===
 assertTrue(result2.size() == 0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List envList = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List envList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public EnvelopeList() {
  }
red_line===
EnvelopeList
start_offset===
9
end_offset===
21
Python OUTPUT===
 public EnvelopeList() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List list = tree.query(new Envelope(0, 0, 1, 1));
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List list = tree.query(new Envelope(0, 0, 1, 1)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geometries = new ArrayList();
red_line===
ArrayList
start_offset===
4
end_offset===
13
Python OUTPUT===
 ArrayList geometries = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw x;
red_line===
throw x;
start_offset===
6
end_offset===
14
Python OUTPUT===
 throw x; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Correct one of the identical sub-expressions on both sides of operator \"\u003d\u003d\"
scn.ruleId===
1764
scn.suspCodeStr===
assertTrue(expected.getFactory() == expected.getFactory());
red_line===
expected.getFactory()
start_offset===
40
end_offset===
61
Python OUTPUT===
\u003d\u003d ) == expected.getFactory ( ) ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Correct one of the identical sub-expressions on both sides of operator \"\u003d\u003d\"
scn.ruleId===
1764
scn.suspCodeStr===
assertTrue(expected.getFactory() == expected.getFactory());
red_line===
expected.getFactory()
start_offset===
40
end_offset===
61
Python OUTPUT===
\u003d\u003d ) == expected.getFactory ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON EMPTY\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkReduceSameFactory("POLYGON (( 0 0, 0 .4, .4 .4, .4 0, 0 0 ))",
        "POLYGON EMPTY");
red_line===
"POLYGON EMPTY"
start_offset===
8
end_offset===
23
Python OUTPUT===
 checkReduceSameFactory("POLYGON (( 0 0, 0 .4, .4 .4, .4 0, 0 0 ))", "POLYGON EMPTY"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"geomFact\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private GeometryFactory geomFact = new GeometryFactory();
red_line===
geomFact
start_offset===
26
end_offset===
34
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"g\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
assertEquals("SRID incorrect - ", srid, g.getSRID());
red_line===
g.getSRID
start_offset===
44
end_offset===
53
Python OUTPUT===
 assertEquals("SRID incorrect - ", srid, g.getSRID()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"int\".
scn.ruleId===
1905
scn.suspCodeStr===
int srid = ((int) (wkb[5] & 0xff) << 24) | ( (int) (wkb[6] & 0xff) << 16)
          | ( (int) (wkb[7] & 0xff) << 8) | (( int) (wkb[8] & 0xff) );
red_line===
int
start_offset===
19
end_offset===
22
Python OUTPUT===
 int srid = ( ( int) (wkb[5] & 0xff) << 24) | ( ( int) (wkb[6] & 0xff) << 16) | ( ( int) (wkb[7] & 0xff) << 8) | ( ( ) (wkb[ 8] & 0xff));
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POLYGON EMPTY\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkWKB("POLYGON EMPTY", 2, ByteOrderValues.LITTLE_ENDIAN, 4326, "0103000020E610000000000000" );
red_line===
"POLYGON EMPTY"
start_offset===
13
end_offset===
28
Python OUTPUT===
 checkWKB("POLYGON EMPTY", 2, ByteOrderValues.LITTLE_ENDIAN, 4326, "0103000020E610000000000000" ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final CoordinateSequenceFactory csFactory =
          PackedCoordinateSequenceFactory.DOUBLE_FACTORY;
red_line===
csFactory
start_offset===
42
end_offset===
51
Python OUTPUT===
private static final CoordinateSequenceFactory csFactory = PackedCoordinateSequenceFactory . DOUBLE_FACTORY ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT (10 10)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
final String pt = "POINT (10 10)";
red_line===
"POINT (10 10)"
start_offset===
22
end_offset===
37
Python OUTPUT===
 final String pt = "POINT (10 10)"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"g\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry g = rdr.read(wkt);
red_line===
= rdr.read(wkt)
start_offset===
17
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"gf\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
GeometryFactory gf = new GeometryFactory(
            PackedCoordinateSequenceFactory.DOUBLE_FACTORY);
red_line===
gf
start_offset===
20
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"precisionModel\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
PrecisionModel precisionModel = new PrecisionModel(1E9);
red_line===
precisionModel
start_offset===
19
end_offset===
33
Python OUTPUT===
 PrecisionModel preprecisionModelnew PrecisionModel(1E9); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometryFactory\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geometryFactory = new GeometryFactory(precisionModel, 0);
red_line===
geometryFactory
start_offset===
20
end_offset===
35
Python OUTPUT===
 GeometryFactory geogeometryFactorynew GeometryFactory(precisionModel, 0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"precisionModel\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
PrecisionModel precisionModel = new PrecisionModel(1E9);
red_line===
precisionModel
start_offset===
19
end_offset===
33
Python OUTPUT===
 PrecisionModel preprecisionModelnew PrecisionModel(1E9); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometryFactory\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geometryFactory = new GeometryFactory(precisionModel, 0);
red_line===
geometryFactory
start_offset===
20
end_offset===
35
Python OUTPUT===
 GeometryFactory geogeometryFactorynew GeometryFactory(precisionModel, 0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"precisionModel\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
PrecisionModel precisionModel = new PrecisionModel(1E9);
red_line===
precisionModel
start_offset===
19
end_offset===
33
Python OUTPUT===
 PrecisionModel preprecisionModelnew PrecisionModel(1E9); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometryFactory\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geometryFactory = new GeometryFactory(precisionModel, 0);
red_line===
geometryFactory
start_offset===
20
end_offset===
35
Python OUTPUT===
 GeometryFactory geogeometryFactorynew GeometryFactory(precisionModel, 0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometryFactory\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geometryFactory = new GeometryFactory();
red_line===
geometryFactory
start_offset===
20
end_offset===
35
Python OUTPUT===
 GeometryFactory geogeometryFactorynew GeometryFactory(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometryFactory\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geometryFactory = new GeometryFactory();
red_line===
geometryFactory
start_offset===
20
end_offset===
35
Python OUTPUT===
 GeometryFactory geogeometryFactorynew GeometryFactory(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("ParseException: " + e.getMessage());
red_line===
RuntimeException
start_offset===
22
end_offset===
38
Python OUTPUT===
 throw new RuntimeException("ParseException: " + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("ParseException: " + e.getMessage());
red_line===
RuntimeException
start_offset===
22
end_offset===
38
Python OUTPUT===
 throw new RuntimeException("ParseException: " + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("ParseException: " + e.getMessage());
red_line===
RuntimeException
start_offset===
22
end_offset===
38
Python OUTPUT===
 throw new RuntimeException("ParseException: " + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"kmlReader\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
KMLReader kmlReader = new KMLReader();
red_line===
kmlReader
start_offset===
18
end_offset===
27
Python OUTPUT===
 KMLReader kmlReadkmlReaderKMLReader(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"kmlReader\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
KMLReader kmlReader = new KMLReader(geometryFactory);
red_line===
kmlReader
start_offset===
18
end_offset===
27
Python OUTPUT===
 KMLReader kmlReadkmlReaderKMLReader(geometryFactory); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Invalid coordinate format\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkExceptionThrown("<Point><coordinates>1.0</coordinates></Point>", "Invalid coordinate format");
red_line===
"Invalid coordinate format"
start_offset===
78
end_offset===
105
Python OUTPUT===
 checkExceptionThrown("<Point><coordinates>1.0</coordinates></Point>", "Invalid coordinate format"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"altitudeMode\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
private KMLReader kmlReader = new KMLReader(Arrays.asList("altitudeMode", "tesselate", "extrude"));
red_line===
"altitudeMode"
start_offset===
62
end_offset===
76
Python OUTPUT===
 private KMLReader kmlReader = new KMLReader(Arrays.asList("altitudeMode", "tesselate", "extrude")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("ParseException: " + e.getMessage());
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException("ParseException: " + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\nGenerated KML:  " + kmlNorm + "\n  Expected KML: " + expectedKMLNorm);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("\nGenerated KML: " + kmlNorm + "\n Expected KML: " + expectedKMLNorm); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
String removeRedundantSpace = condenseSpace.replaceAll("> <", "><");
red_line===
replaceAll
start_offset===
48
end_offset===
58
Python OUTPUT===
String removeRedundantSpace = condenseSpace.replaceAll ( " > < " , " >< " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (1 1, 2 2)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkEqual("LINESTRING (1 1, 2 2)", 
        "<LineString><coordinates>1.0,1.0 2.0,2.0</coordinates></LineString>");
red_line===
"LINESTRING (1 1, 2 2)"
start_offset===
15
end_offset===
38
Python OUTPUT===
 checkEqual("LINESTRING (1 1, 2 2)", "<LineString><coordinates>1.0,1.0 2.0,2.0</coordinates></LineString>"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"removeRedundantSpace\".
scn.ruleId===
1488
scn.suspCodeStr===
String removeRedundantSpace = condenseSpace.replaceAll("> <", "><");
red_line===
condenseSpace.replaceAll("> <", "><")
start_offset===
34
end_offset===
71
Python OUTPUT===
 String removeRedundantSpace = condenseSpace.replaceAll("> <", "><"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (!isEqual) {System.out.println(g2);System.out.println(expected);}
red_line===
System.out
start_offset===
19
end_offset===
29
Python OUTPUT===
 if (!isEqual) {System.out.println(g2);System.out.println(expected);} 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geomFactory\" which hides the field declared at line 39.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geomFactory = new GeometryFactory(
				new PackedCoordinateSequenceFactory(PackedCoordinateSequenceFactory.DOUBLE));
red_line===
geomFactory
start_offset===
18
end_offset===
29
Python OUTPUT===
 GeometryFactory ggeomFactory= new GeometryFactory( new PackedCoordinateSequenceFactory(PackedCoordinateSequenceFactory.DOUBLE)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"rdr\" which hides the field declared at line 40.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader rdr = new WKTReader(geomFactory);
red_line===
rdr
start_offset===
13
end_offset===
16
Python OUTPUT===
 WKTReader rdrdr new WKTReader(geomFactory); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geomFactory\" which hides the field declared at line 39.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geomFactory = new GeometryFactory();
red_line===
geomFactory
start_offset===
19
end_offset===
30
Python OUTPUT===
 GeometryFactory gegeomFactory new GeometryFactory(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"rdr\" which hides the field declared at line 40.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader rdr = new WKTReader(geomFactory);
red_line===
rdr
start_offset===
13
end_offset===
16
Python OUTPUT===
 WKTReader rdrdr new WKTReader(geomFactory); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"rdr\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private WKTReader rdr = new WKTReader(geomFactory);
red_line===
rdr
start_offset===
20
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"g\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry g = rdr.read(wkt);
red_line===
= rdr.read(wkt)
start_offset===
17
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"_rnd\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private Random _rnd;
red_line===
_rnd
start_offset===
17
end_offset===
21
Python OUTPUT===
 private Random __rnd 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"_reader\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private WKTReader _reader;
red_line===
_reader
start_offset===
20
end_offset===
27
Python OUTPUT===
 private WKTReader __reader 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = fileRdr.read();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = fileRdr.read(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"sw\".
scn.ruleId===
1854
scn.suspCodeStr===
Stopwatch sw = new Stopwatch();
red_line===
= new Stopwatch()
start_offset===
17
end_offset===
34
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String comb = 
  	"POLYGON ((0 0, 0 10, 4 5, 6 10, 7 5, 9 10, 10 5, 13 5, 15 10, 16 3, 17 10, 18 3, 25 10, 30 10, 30 0, 15 0, 14 5, 13 0, 9 0, 8 5, 6 0, 0 0))";
red_line===
comb
start_offset===
29
end_offset===
33
Python OUTPUT===
 public static final String comb = "POLYGON ((0 0, 0 10, 4 5, 6 10, 7 5, 9 10, 10 5, 13 5, 15 10, 16 3, 17 10, 18 3, 25 10, 30 10, 30 0, 15 0, 14 5, 13 0, 9 0, 8 5, 6 0, 0 0))"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String repeatedPts = 
  	"POLYGON ((0 0, 0 10, 2 5, 2 5, 2 5, 2 5, 2 5, 3 10, 6 10, 8 5, 8 5, 8 5, 8 5, 10 10, 10 5, 10 5, 10 5, 10 5, 10 0, 0 0))";
red_line===
repeatedPts
start_offset===
29
end_offset===
40
Python OUTPUT===
 public static final String repeatedPts = "POLYGON ((0 0, 0 10, 2 5, 2 5, 2 5, 2 5, 2 5, 3 10, 6 10, 8 5, 8 5, 8 5, 8 5, 10 10, 10 5, 10 5, 10 5, 10 5, 10 0, 0 0))"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public AbstractPointInRingTest(String name) { super(name); }
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( String name ) { super ( name ) ; }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
abstract protected void runPtInRing(int expectedLoc, Coordinate pt, String wkt)
      throws Exception;
red_line===
protected
start_offset===
11
end_offset===
20
Python OUTPUT===
protected abstract final void runPtInRing ( int expectedLoc , Coordinate pt , String wkt ) throws Exception ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"poly\".
scn.ruleId===
1854
scn.suspCodeStr===
Polygon poly = (Polygon)geom;
red_line===
= (Polygon)geom
start_offset===
17
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 2 0)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
runTest("LINESTRING (0 0, 2 1)", "LINESTRING (0 0, 2 0)", 1.0);
red_line===
"LINESTRING (0 0, 2 0)"
start_offset===
37
end_offset===
60
Python OUTPUT===
 runTest("LINESTRING (0 0, 2 1)", "LINESTRING (0 0, 2 0)", 1.0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"i1\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int		i, i1;
red_line===
i1
start_offset===
12
end_offset===
14
Python OUTPUT===
 int i, i1; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"y1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double	x1,y1,x2,y2;
red_line===
y1
start_offset===
14
end_offset===
16
Python OUTPUT===
 double x1,y1,x2,y2; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double r_top = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);
red_line===
r_top
start_offset===
11
end_offset===
16
Python OUTPUT===
 double r_top = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double r_bot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);
red_line===
r_bot
start_offset===
11
end_offset===
16
Python OUTPUT===
 double r_bot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double s_top = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);
red_line===
s_top
start_offset===
11
end_offset===
16
Python OUTPUT===
 double s_top = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double s_bot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);
red_line===
s_bot
start_offset===
11
end_offset===
16
Python OUTPUT===
 double s_bot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"isCCW\".
scn.ruleId===
1854
scn.suspCodeStr===
boolean isCCW = Orientation.isCCW(pts);
red_line===
= Orientation.isCCW(pts)
start_offset===
20
end_offset===
44
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"li\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private NonRobustLineIntersector li = new NonRobustLineIntersector();
red_line===
li
start_offset===
35
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (li.hasIntersection()) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (li.hasIntersection()) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Merge this if statement with the enclosing one.
scn.ruleId===
1066
scn.suspCodeStr===
if (segResult != sideResult)
            isValid = false;
red_line===
if
start_offset===
10
end_offset===
12
Python OUTPUT===
 if (segResult != sideResult) isValid = false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"i\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
RobustLineIntersector i = new RobustLineIntersector();
red_line===
i
start_offset===
26
end_offset===
27
Python OUTPUT===
 RobustLineIntersector i =inew RobustLineIntersector(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"i\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
RobustLineIntersector i = new RobustLineIntersector();
red_line===
i
start_offset===
26
end_offset===
27
Python OUTPUT===
 RobustLineIntersector i =inew RobustLineIntersector(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"i\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
RobustLineIntersector i = new RobustLineIntersector();
red_line===
i
start_offset===
26
end_offset===
27
Python OUTPUT===
 RobustLineIntersector i =inew RobustLineIntersector(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"i\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
RobustLineIntersector i = new RobustLineIntersector();
red_line===
i
start_offset===
26
end_offset===
27
Python OUTPUT===
 RobustLineIntersector i =inew RobustLineIntersector(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"i\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
RobustLineIntersector i = new RobustLineIntersector();
red_line===
i
start_offset===
26
end_offset===
27
Python OUTPUT===
 RobustLineIntersector i =inew RobustLineIntersector(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isIntPointsCorrect\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
boolean isIntPointsCorrect = true;
red_line===
isIntPointsCorrect
start_offset===
11
end_offset===
29
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public NonRobustLineIntersector() {
  }
red_line===
NonRobustLineIntersector
start_offset===
9
end_offset===
33
Python OUTPUT===
 public NonRobustLineIntersector() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Actual = " + actual + ", Expected = " + expected);
red_line===
System.out
start_offset===
5
end_offset===
15
Python OUTPUT===
 System.out.println("Actual = " + actual + ", Expected = " + expected); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"MULTIPOINT ((10 10), (20 20), (10 20))\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
doMinimumBoundingCircleTest("MULTIPOINT ((10 10), (20 20), (10 20))", "MULTIPOINT ((10 10), (20 20), (10 20))",
  			new Coordinate(15, 15), 7.0710678118654755);
red_line===
"MULTIPOINT ((10 10), (20 20), (10 20))"
start_offset===
31
end_offset===
71
Python OUTPUT===
 doMinimumBoundingCircleTest("MULTIPOINT ((10 10), (20 20), (10 20))", "MULTIPOINT ((10 10), (20 20), (10 20))", new Coordinate(15, 15), 7.0710678118654755); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Stack stack = new Stack();
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
 Stack stack = new Stack(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".
scn.ruleId===
1149
scn.suspCodeStr===
Stack stack = new Stack();
red_line===
Stack
start_offset===
4
end_offset===
9
Python OUTPUT===
Deque stack = new Deque ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"reader\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
WKTReader reader = new WKTReader(new GeometryFactory(new PrecisionModel(1), 0));
red_line===
reader
start_offset===
14
end_offset===
20
Python OUTPUT===
 WKTReader reareadernew WKTReader(new GeometryFactory(new PrecisionModel(1), 0)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 10 0)\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
LineString convexHull = (LineString) reader.read("LINESTRING (0 0, 10 0)");
red_line===
"LINESTRING (0 0, 10 0)"
start_offset===
53
end_offset===
77
Python OUTPUT===
 LineString convexHull = (LineString) reader.read("LINESTRING (0 0, 10 0)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double epsilon;
red_line===
epsilon
start_offset===
30
end_offset===
37
Python OUTPUT===
 private static final double epsilon; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double splitter;
red_line===
splitter
start_offset===
30
end_offset===
38
Python OUTPUT===
 private static final double splitter; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double resulterrbound;
red_line===
resulterrbound
start_offset===
30
end_offset===
44
Python OUTPUT===
 private static final double resulterrbound; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double ccwerrboundA;
red_line===
ccwerrboundA
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double ccwerrboundA; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double ccwerrboundB;
red_line===
ccwerrboundB
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double ccwerrboundB; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double ccwerrboundC;
red_line===
ccwerrboundC
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double ccwerrboundC; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double o3derrboundA;
red_line===
o3derrboundA
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double o3derrboundA; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double o3derrboundB;
red_line===
o3derrboundB
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double o3derrboundB; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double o3derrboundC;
red_line===
o3derrboundC
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double o3derrboundC; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double iccerrboundA;
red_line===
iccerrboundA
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double iccerrboundA; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double iccerrboundB;
red_line===
iccerrboundB
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double iccerrboundB; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double iccerrboundC;
red_line===
iccerrboundC
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double iccerrboundC; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double isperrboundA;
red_line===
isperrboundA
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double isperrboundA; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double isperrboundB;
red_line===
isperrboundB
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double isperrboundB; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final double isperrboundC;
red_line===
isperrboundC
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static final double isperrboundC; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double B[] = new double[4];
red_line===
[]
start_offset===
12
end_offset===
14
Python OUTPUT===
 double B[] = new double[4]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double u[] = new double[4];
red_line===
[]
start_offset===
12
end_offset===
14
Python OUTPUT===
 double u[] = new double[4]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double C1[] = new double[8];
red_line===
[]
start_offset===
13
end_offset===
15
Python OUTPUT===
 double C1[] = new double[8]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double C2[] = new double[12];
red_line===
[]
start_offset===
13
end_offset===
15
Python OUTPUT===
 double C2[] = new double[12]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double D[] = new double[16];
red_line===
[]
start_offset===
12
end_offset===
14
Python OUTPUT===
 double D[] = new double[16]; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"lastcheck\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double check, lastcheck;
red_line===
lastcheck
start_offset===
18
end_offset===
27
Python OUTPUT===
 double check, lastcheck; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double x = (double) (a + b);
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 double x = ( ) (a +b);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double bvirt = (double) (x - a);
red_line===
double
start_offset===
20
end_offset===
26
Python OUTPUT===
 double bvirt = ( ) (x - a);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double x = (double) (a + b);
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 double x = ( ) (a +b);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double bvirt = (double) (a - x);
red_line===
double
start_offset===
20
end_offset===
26
Python OUTPUT===
 double bvirt = ( ) (a - x);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double x = (double) (a - b);
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 double x = ( ) (a -b);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double c = (double) (splitter * a);
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 double c = ( ) (splitter * a);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double abig = (double) (c - a);
red_line===
double
start_offset===
19
end_offset===
25
Python OUTPUT===
 double abig = ( ) (c - a);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double c = (double) (splitter * a);
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 double c = ( ) (splitter * a);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double abig = (double) (c - a);
red_line===
double
start_offset===
19
end_offset===
25
Python OUTPUT===
 double abig = ( ) (c - a);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double x = (double) (a * b);
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 double x = ( ) (a *b);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"findex\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int eindex, findex, hindex;
red_line===
findex
start_offset===
16
end_offset===
22
Python OUTPUT===
 int eindex, findex, hindex; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"fnow\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double enow, fnow;
red_line===
fnow
start_offset===
17
end_offset===
21
Python OUTPUT===
 double enow, fnow; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"epsilon\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double epsilon;
red_line===
epsilon
start_offset===
30
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"o3derrboundA\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double o3derrboundA;
red_line===
o3derrboundA
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"o3derrboundB\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double o3derrboundB;
red_line===
o3derrboundB
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"o3derrboundC\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double o3derrboundC;
red_line===
o3derrboundC
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"iccerrboundA\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double iccerrboundA;
red_line===
iccerrboundA
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"iccerrboundB\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double iccerrboundB;
red_line===
iccerrboundB
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"iccerrboundC\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double iccerrboundC;
red_line===
iccerrboundC
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isperrboundA\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double isperrboundA;
red_line===
isperrboundA
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isperrboundB\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double isperrboundB;
red_line===
isperrboundB
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"isperrboundC\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double isperrboundC;
red_line===
isperrboundC
start_offset===
30
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double ERR_BOUND = 1e-15;
red_line===
ERR_BOUND
start_offset===
11
end_offset===
20
Python OUTPUT===
 double ERR_BOUND = 1e-15; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int C1length = fast_expansion_sum_zeroelim(4, B, 4, u, C1);
red_line===
C1length
start_offset===
8
end_offset===
16
Python OUTPUT===
 int C1length = fast_expansion_sum_zeroelim(4, B, 4, u, C1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int C2length = fast_expansion_sum_zeroelim(C1length, C1, 4, u, C2);
red_line===
C2length
start_offset===
8
end_offset===
16
Python OUTPUT===
 int C2length = fast_expansion_sum_zeroelim(C1length, C1, 4, u, C2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int Dlength = fast_expansion_sum_zeroelim(C2length, C2, 4, u, D);
red_line===
Dlength
start_offset===
8
end_offset===
15
Python OUTPUT===
 int Dlength = fast_expansion_sum_zeroelim(C2length, C2, 4, u, D); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double epsilon_temp;
red_line===
epsilon_temp
start_offset===
11
end_offset===
23
Python OUTPUT===
 double epsilon_temp; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double splitter_temp;
red_line===
splitter_temp
start_offset===
11
end_offset===
24
Python OUTPUT===
 double splitter_temp; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int every_other;
red_line===
every_other
start_offset===
8
end_offset===
19
Python OUTPUT===
 int every_other; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _i = Two_Diff_Head(a0, b);
red_line===
_i
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _i = Two_Diff_Head(a0, b); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _i = Two_Diff_Head(a0, b);
red_line===
_i
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _i = Two_Diff_Head(a0, b); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _i = Two_Diff_Head(a0, b);
red_line===
_i
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _i = Two_Diff_Head(a0, b); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _j = Two_One_Diff__x2(a1, a0, b0);
red_line===
_j
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _j = Two_One_Diff__x2(a1, a0, b0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _0 = Two_One_Diff__x1(a1, a0, b0);
red_line===
_0
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _0 = Two_One_Diff__x1(a1, a0, b0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _j = Two_One_Diff__x2(a1, a0, b0);
red_line===
_j
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _j = Two_One_Diff__x2(a1, a0, b0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _0 = Two_One_Diff__x1(a1, a0, b0);
red_line===
_0
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _0 = Two_One_Diff__x1(a1, a0, b0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _j = Two_One_Diff__x2(a1, a0, b0);
red_line===
_j
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _j = Two_One_Diff__x2(a1, a0, b0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double _0 = Two_One_Diff__x1(a1, a0, b0);
red_line===
_0
start_offset===
11
end_offset===
13
Python OUTPUT===
 double _0 = Two_One_Diff__x1(a1, a0, b0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Q;
red_line===
Q
start_offset===
11
end_offset===
12
Python OUTPUT===
 double Q; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Qnew;
red_line===
Qnew
start_offset===
11
end_offset===
15
Python OUTPUT===
 double Qnew; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Q;
red_line===
Q
start_offset===
11
end_offset===
12
Python OUTPUT===
 double Q; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"y\".
scn.ruleId===
1488
scn.suspCodeStr===
double y = b - bvirt;
red_line===
b - bvirt
start_offset===
15
end_offset===
24
Python OUTPUT===
 double y = b - bvirt; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x\".
scn.ruleId===
1488
scn.suspCodeStr===
double x = (double) (a + b);
red_line===
(double) (a + b)
start_offset===
15
end_offset===
31
Python OUTPUT===
 double x = (double) (a + b); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"y\".
scn.ruleId===
1488
scn.suspCodeStr===
double y = around + bround;
red_line===
around + bround
start_offset===
15
end_offset===
30
Python OUTPUT===
 double y = around + bround; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x\".
scn.ruleId===
1488
scn.suspCodeStr===
double x = (double) (a + b);
red_line===
(double) (a + b)
start_offset===
15
end_offset===
31
Python OUTPUT===
 double x = (double) (a + b); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"y\".
scn.ruleId===
1488
scn.suspCodeStr===
double y = around + bround;
red_line===
around + bround
start_offset===
15
end_offset===
30
Python OUTPUT===
 double y = around + bround; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x\".
scn.ruleId===
1488
scn.suspCodeStr===
double x = (double) (a - b);
red_line===
(double) (a - b)
start_offset===
15
end_offset===
31
Python OUTPUT===
 double x = (double) (a - b); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"alo\".
scn.ruleId===
1488
scn.suspCodeStr===
double alo = a - ahi;
red_line===
a - ahi
start_offset===
17
end_offset===
24
Python OUTPUT===
 double alo = a - ahi; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"ahi\".
scn.ruleId===
1488
scn.suspCodeStr===
double ahi = c - abig;
red_line===
c - abig
start_offset===
17
end_offset===
25
Python OUTPUT===
 double ahi = c - abig; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"y\".
scn.ruleId===
1488
scn.suspCodeStr===
double y = (alo * blo) - err3;
red_line===
(alo * blo) - err3
start_offset===
15
end_offset===
33
Python OUTPUT===
 double y = (alo * blo) - err3; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x\".
scn.ruleId===
1488
scn.suspCodeStr===
double x = (double) (a * b);
red_line===
(double) (a * b)
start_offset===
15
end_offset===
31
Python OUTPUT===
 double x = (double) (a * b); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x0\".
scn.ruleId===
1488
scn.suspCodeStr===
double x0 = Two_Diff_Tail(a0, b, _i);
red_line===
Two_Diff_Tail(a0, b, _i)
start_offset===
16
end_offset===
40
Python OUTPUT===
 double x0 = Two_Diff_Tail(a0, b, _i); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x1\".
scn.ruleId===
1488
scn.suspCodeStr===
double x1 = Two_Sum_Tail(a1, _i, x2);
red_line===
Two_Sum_Tail(a1, _i, x2)
start_offset===
16
end_offset===
40
Python OUTPUT===
 double x1 = Two_Sum_Tail(a1, _i, x2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x2\".
scn.ruleId===
1488
scn.suspCodeStr===
double x2 = Two_Sum_Head(a1, _i);
red_line===
Two_Sum_Head(a1, _i)
start_offset===
16
end_offset===
36
Python OUTPUT===
 double x2 = Two_Sum_Head(a1, _i); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x0\".
scn.ruleId===
1488
scn.suspCodeStr===
double x0 = Two_One_Diff__x0(a1, a0, b0);
red_line===
Two_One_Diff__x0(a1, a0, b0)
start_offset===
16
end_offset===
44
Python OUTPUT===
 double x0 = Two_One_Diff__x0(a1, a0, b0); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x1\".
scn.ruleId===
1488
scn.suspCodeStr===
double x1 = Two_One_Diff__x0(_j, _0, b1);
red_line===
Two_One_Diff__x0(_j, _0, b1)
start_offset===
16
end_offset===
44
Python OUTPUT===
 double x1 = Two_One_Diff__x0(_j, _0, b1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x2\".
scn.ruleId===
1488
scn.suspCodeStr===
double x2 = Two_One_Diff__x1(_j, _0, b1);
red_line===
Two_One_Diff__x1(_j, _0, b1)
start_offset===
16
end_offset===
44
Python OUTPUT===
 double x2 = Two_One_Diff__x1(_j, _0, b1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"x3\".
scn.ruleId===
1488
scn.suspCodeStr===
double x3 = Two_One_Diff__x2(_j, _0, b1);
red_line===
Two_One_Diff__x2(_j, _0, b1)
start_offset===
16
end_offset===
44
Python OUTPUT===
 double x3 = Two_One_Diff__x2(_j, _0, b1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (g1.getNumInteriorRing() != g2.getNumInteriorRing())
        return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (g1.getNumInteriorRing() != g2.getNumInteriorRing()) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Result not expected: " + ioGeometry[1]);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Result not expected: " + ioGeometry[1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList geoms = new ArrayList(numberGeometries);
red_line===
ArrayList
start_offset===
2
end_offset===
11
Python OUTPUT===
 ArrayList geoms = new ArrayList(numberGeometries); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double fx = x+Math.random()*dx;
red_line===
dom()*dx;
start_offset===
24
end_offset===
33
Python OUTPUT===
 double fx = x+Math.random()*dx; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double fy = y+Math.random()*dy;
red_line===
dom()*dy;
start_offset===
24
end_offset===
33
Python OUTPUT===
 double fy = y+Math.random()*dy; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sy\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sx,sy;
red_line===
sy
start_offset===
12
end_offset===
14
Python OUTPUT===
 double sx,sy; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"miny\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double minx, miny;
red_line===
miny
start_offset===
15
end_offset===
19
Python OUTPUT===
 double minx, miny; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
if(degreesPerHole < 2)
			throw new RuntimeException("Slices too small for poly. Use Box alg.");
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
 if(degreesPerHole < 2) throw new RuntimeException("Slices too small for poly. Use Box alg."); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"fx2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double fx1,fx2,fy1,fy2;
red_line===
fx2
start_offset===
13
end_offset===
16
Python OUTPUT===
 double fx1,fx2,fy1,fy2; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double theta = 360/npoints;
red_line===
/
start_offset===
20
end_offset===
21
Python OUTPUT===
 double theta = 360/npoints;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Dimensions other than 2 are not yet supported");
red_line===
RuntimeException
start_offset===
12
end_offset===
28
Python OUTPUT===
 throw new RuntimeException("Dimensions other than 2 are not yet supported"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
q.add(new Integer(8));
red_line===
Integer
start_offset===
14
end_offset===
21
Python OUTPUT===
 q.add(new Int); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = fromWKT(wkt);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = fromWKT(wkt); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List nodedLines = noder.node(geoms);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List nodedLines = noder.node(geoms); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geomList = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geomList = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (dist < SNAP_TOLERANCE / 2.05) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (dist < SNAP_TOLERANCE / 2.05) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isCollapsed\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isCollapsed = isEndsEqual && isMiddleDifferent;
red_line===
isEndsEqual && isMiddleDifferent
start_offset===
26
end_offset===
58
Python OUTPUT===
 boolean isCollapsed = isEndsEqual && isMiddleDifferent; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List input = readList(inputWKT);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List input = readList(inputWKT); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segStrings = toSegmentStrings(input);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segStrings = toSegmentStrings(input); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List input = readList(inputWKT);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List input = readList(inputWKT); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segStrings = toSegmentStrings(input);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segStrings = toSegmentStrings(input); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List intPtsActual = FastNodingValidator.computeIntersections(segStrings);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List intPtsActual = FastNodingValidator.computeIntersections(segStrings); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segStrings = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segStrings = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List ssList = toSegmentStrings(lines);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List ssList = toSegmentStrings(lines); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<NodedSegmentString> nssList = new ArrayList<NodedSegmentString>();
red_line===
<NodedSegmentString>
start_offset===
52
end_offset===
72
Python OUTPUT===
\u003c\u003e nssList = new ArrayList < NodedSegmentString > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<NodedSegmentString> resultEdgelist = new ArrayList<NodedSegmentString>();
red_line===
<NodedSegmentString>
start_offset===
59
end_offset===
79
Python OUTPUT===
\u003c\u003e resultEdgelist = new ArrayList < NodedSegmentString > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = toLines(nodedList, geom1.getFactory());
red_line===
toLines(nodedList, geom1.getFactory())
start_offset===
22
end_offset===
60
Python OUTPUT===
 Geometry result = toLines(nodedList, geom1.getFactory()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"nss\".
scn.ruleId===
1488
scn.suspCodeStr===
NodedSegmentString nss = new NodedSegmentString(pts, null);
red_line===
new NodedSegmentString(pts, null)
start_offset===
29
end_offset===
62
Python OUTPUT===
 NodedSegmentString nss = new NodedSegmentString(pts, null); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List nodedSS = NodingTestUtil.getNodedSubstrings(nss);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List nodedSS = NodingTestUtil.getNodedSubstrings(nss); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! pt2.equals2D(testPt)) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (! pt2.equals2D(testPt)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (testLoc.compareTo(afterLoc) < 0 ) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (testLoc.compareTo(afterLoc) < 0 ) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = indexedLine.extractLine(loc[0], loc[1]);
red_line===
indexedLine.extractLine(loc[0], loc[1])
start_offset===
22
end_offset===
61
Python OUTPUT===
 Geometry result = indexedLine.extractLine(loc[0], loc[1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! pt2.equals2D(testPt)) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (! pt2.equals2D(testPt)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (testLoc < checkLoc) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (testLoc < checkLoc) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 10 10, 10 10, 20 20)\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
runOffsetTest("LINESTRING (0 0, 10 10, 10 10, 20 20)", "POINT(0 0)", 1.0, "POINT (-0.7071067811865475 0.7071067811865475)");
red_line===
"LINESTRING (0 0, 10 10, 10 10, 20 20)"
start_offset===
18
end_offset===
57
Python OUTPUT===
 runOffsetTest("LINESTRING (0 0, 10 10, 10 10, 20 20)", "POINT(0 0)", 1.0, "POINT (-0.7071067811865475 0.7071067811865475)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 10 10)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkExtractLine("LINESTRING (0 0, 10 10)", -100, 100, "LINESTRING (0 0, 10 10)");
red_line===
"LINESTRING (0 0, 10 10)"
start_offset===
21
end_offset===
46
Python OUTPUT===
 checkExtractLine("LINESTRING (0 0, 10 10)", -100, 100, "LINESTRING (0 0, 10 10)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (10 0, 10 0)\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkExtractLine("MULTILINESTRING ((0 0, 10 0), (20 0, 25 0, 30 0))",
        -10, 10, "LINESTRING (10 0, 10 0)");
red_line===
"LINESTRING (10 0, 10 0)"
start_offset===
17
end_offset===
42
Python OUTPUT===
 checkExtractLine("MULTILINESTRING ((0 0, 10 0), (20 0, 25 0, 30 0))", -10, 10, "LINESTRING (10 0, 10 0)"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 10 0)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkExtractLine("LINESTRING (0 0, 10 0)", 9, 1, "LINESTRING (9 0, 1 0)");
red_line===
"LINESTRING (0 0, 10 0)"
start_offset===
21
end_offset===
45
Python OUTPUT===
 checkExtractLine("LINESTRING (0 0, 10 0)", 9, 1, "LINESTRING (9 0, 1 0)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = indexedLine.extractLine(loc[0], loc[1]);
red_line===
indexedLine.extractLine(loc[0], loc[1])
start_offset===
22
end_offset===
61
Python OUTPUT===
 Geometry result = indexedLine.extractLine(loc[0], loc[1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"loc2B\".
scn.ruleId===
1854
scn.suspCodeStr===
LinearLocation loc2B = new LinearLocation(1, 0, 0.0);
red_line===
= new LinearLocation(1, 0, 0.0)
start_offset===
25
end_offset===
56
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
LinearLocation loc0_5 = indexedLine.indexOf(new Coordinate(5, 0));
red_line===
loc0_5
start_offset===
19
end_offset===
25
Python OUTPUT===
 LinearLocation loc0_5 = indexedLine.indexOf(new Coordinate(5, 0)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
LinearLocation loc2_5 = indexedLine.indexOf(new Coordinate (25, 0));
red_line===
loc2_5
start_offset===
19
end_offset===
25
Python OUTPUT===
 LinearLocation loc2_5 = indexedLine.indexOf(new Coordinate (25, 0)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
LinearLocation loc0_5 = indexedLine.indexOf(new Coordinate(5, 0));
red_line===
loc0_5
start_offset===
19
end_offset===
25
Python OUTPUT===
 LinearLocation loc0_5 = indexedLine.indexOf(new Coordinate(5, 0)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
LinearLocation loc2_5 = indexedLine.indexOf(new Coordinate (25, 0));
red_line===
loc2_5
start_offset===
19
end_offset===
25
Python OUTPUT===
 LinearLocation loc2_5 = indexedLine.indexOf(new Coordinate (25, 0)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
LinearLocation loc0_5 = indexedLine.indexOf(new Coordinate(5, 0));
red_line===
loc0_5
start_offset===
19
end_offset===
25
Python OUTPUT===
 LinearLocation loc0_5 = indexedLine.indexOf(new Coordinate(5, 0)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
LinearLocation loc2_5 = indexedLine.indexOf(new Coordinate (25, 0));
red_line===
loc2_5
start_offset===
19
end_offset===
25
Python OUTPUT===
 LinearLocation loc2_5 = indexedLine.indexOf(new Coordinate (25, 0)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(ex);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException(ex); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Computed result is: " + result);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Computed result is: " + result); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (! isOk)
        System.out.println("Expected = " + expectedPoint + "  Actual = " + offsetPt);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 if (! isOk) System.out.println("Expected = " + expectedPoint + " Actual = " + offsetPt); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 10 10, 20 20)\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
runIndicesOfThenExtract("LINESTRING (0 0, 10 10, 20 20)",
            "LINESTRING (1 1, 9 9)");
red_line===
"LINESTRING (0 0, 10 10, 20 20)"
start_offset===
28
end_offset===
60
Python OUTPUT===
 runIndicesOfThenExtract("LINESTRING (0 0, 10 10, 20 20)", "LINESTRING (1 1, 9 9)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 10 10, 10 10, 20 20)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
runIndicesOfThenExtract("LINESTRING (0 0, 10 10, 10 10, 20 20)",
            "LINESTRING (5 5, 10 10, 10 10, 15 15)");
red_line===
"LINESTRING (0 0, 10 10, 10 10, 20 20)"
start_offset===
28
end_offset===
67
Python OUTPUT===
 runIndicesOfThenExtract("LINESTRING (0 0, 10 10, 10 10, 20 20)", "LINESTRING (5 5, 10 10, 10 10, 15 15)"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT(20 20)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
runOffsetTest("LINESTRING (0 0, 20 20)", "POINT(20 20)", 0.0, "POINT (20 20)");
red_line===
"POINT(20 20)"
start_offset===
45
end_offset===
59
Python OUTPUT===
 runOffsetTest("LINESTRING (0 0, 20 20)", "POINT(20 20)", 0.0, "POINT (20 20)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"POINT(0 0)\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
runOffsetTest("LINESTRING (0 0, 10 10, 20 20)", "POINT(0 0)", 1.0, "POINT (-0.7071067811865475 0.7071067811865475)");
red_line===
"POINT(0 0)"
start_offset===
52
end_offset===
64
Python OUTPUT===
 runOffsetTest("LINESTRING (0 0, 10 10, 20 20)", "POINT(0 0)", 1.0, "POINT (-0.7071067811865475 0.7071067811865475)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 0 60, 50 60, 50 20, -20 20)\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
runIndexOfAfterTest("LINESTRING (0 0, 0 60, 50 60, 50 20, -20 20)", 
    "POINT (0 20)");
red_line===
"LINESTRING (0 0, 0 60, 50 60, 50 20, -20 20)"
start_offset===
24
end_offset===
70
Python OUTPUT===
 runIndexOfAfterTest("LINESTRING (0 0, 0 60, 50 60, 50 20, -20 20)", "POINT (0 20)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 0 10, 10 10, 10 0, 0 0)\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
runIndicesOfThenExtract("LINESTRING (0 0, 0 10, 10 10, 10 0, 0 0)",
            "LINESTRING (0 0, 0 10, 10 10)");
red_line===
"LINESTRING (0 0, 0 10, 10 10, 10 0, 0 0)"
start_offset===
28
end_offset===
70
Python OUTPUT===
 runIndicesOfThenExtract("LINESTRING (0 0, 0 10, 10 10, 10 0, 0 0)", "LINESTRING (0 0, 0 10, 10 10)"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"result\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
assertTrue("Found invalid geometry(s) in Voronoi result", result.isValid() );
red_line===
result.isValid
start_offset===
61
end_offset===
75
Python OUTPUT===
 assertTrue("Found invalid geometry(s) in Voronoi result", result.isValid() ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"diagram\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry diagram = builder.getDiagram(sitesGeom.getFactory());
red_line===
builder.getDiagram(sitesGeom.getFactory())
start_offset===
23
end_offset===
65
Python OUTPUT===
 Geometry diagram = builder.getDiagram(sitesGeom.getFactory()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Comparable curr = null;
red_line===
Comparable
start_offset===
4
end_offset===
14
Python OUTPUT===
 Comparable curr = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Comparable next = (Comparable) q.poll();
red_line===
Comparable
start_offset===
6
end_offset===
16
Python OUTPUT===
 Comparable next = (Comparable) q.poll(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
q.add(new Integer(1));
red_line===
Integer
start_offset===
14
end_offset===
21
Python OUTPUT===
 q.add(new Int); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
q.add(new Integer(10));
red_line===
Integer
start_offset===
14
end_offset===
21
Python OUTPUT===
 q.add(new Int)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
q.add(new Integer(5));
red_line===
Integer
start_offset===
14
end_offset===
21
Python OUTPUT===
 q.add(new Int); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
q.add(new Integer(-1));
red_line===
Integer
start_offset===
14
end_offset===
21
Python OUTPUT===
 q.add(new Int)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
q.add(new Integer((int) (num * Math.random())));
red_line===
Integer
start_offset===
16
end_offset===
23
Python OUTPUT===
 q.add(new Integ) (num * Math.random()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
q.add(new Integer((int) (num * Math.random())));
red_line===
Math.random
start_offset===
37
end_offset===
48
Python OUTPUT===
 q.add(new Integer((int) (num * Math.random()))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Expected " + expected + " but actual is " + actual);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Expected " + expected + " but actual is " + actual); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
assertEquals(Math.sqrt(1+4+9), create(1,2,3).length(), TOLERANCE);
red_line===
+
start_offset===
30
end_offset===
31
Python OUTPUT===
 assertEquals(Math.sqrt(1+4+9), create(1,2,3).length(), TOLERANCE);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"diff\".
scn.ruleId===
1854
scn.suspCodeStr===
double diff = (a + b) * (a + b) - a*a;
red_line===
= (a + b) * (a + b) - a*a
start_offset===
15
end_offset===
40
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"sum\".
scn.ruleId===
1854
scn.suspCodeStr===
double sum = 2*a*b + b*b;
red_line===
= 2*a*b + b*b
start_offset===
14
end_offset===
27
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
if (! isOK)
  		System.out.println("Test slowPow value " + pow2);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 if (! isOK) System.out.println("Test slowPow value " + pow2); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"i\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int i = 0;
red_line===
i
start_offset===
6
end_offset===
7
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"k\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int k = 0;
red_line===
k
start_offset===
7
end_offset===
8
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"pi\".
scn.ruleId===
1488
scn.suspCodeStr===
DD pi = DD.valueOf(4.0).multiply(pi4);
red_line===
DD.valueOf(4.0).multiply(pi4)
start_offset===
10
end_offset===
39
Python OUTPUT===
 DD pi = DD.valueOf(4.0).multiply(pi4); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"err\".
scn.ruleId===
1854
scn.suspCodeStr===
double err = Math.abs(xx.doubleValue() - x);
red_line===
= Math.abs(xx.doubleValue() - x)
start_offset===
14
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"count\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int count = 0;
red_line===
count
start_offset===
6
end_offset===
11
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"xSqr2\".
scn.ruleId===
1854
scn.suspCodeStr===
DD xSqr2 = DD.parse(s);
red_line===
= DD.parse(s)
start_offset===
12
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"x\".
scn.ruleId===
1854
scn.suspCodeStr===
double x = xdd.doubleValue();
red_line===
= xdd.doubleValue()
start_offset===
12
end_offset===
31
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove or correct this useless self-assignment.
scn.ruleId===
1656
scn.suspCodeStr===
if (count == 100)
				count = count;
red_line===
=
start_offset===
10
end_offset===
11
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment; \"count\" already holds the assigned value along all execution paths.
scn.ruleId===
4165
scn.suspCodeStr===
if (count == 100)
				count = count;
red_line===
count = count
start_offset===
4
end_offset===
17
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List edges = DirectedEdge.toEdges(Arrays.asList(new Object[]{d1, d2}));
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List edges = DirectedEdge.toEdges(Arrays.asList(new Object[]{d1, d2})); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
List edges = DirectedEdge.toEdges(Arrays.asList(new Object[]{d1, d2}));
red_line===
new Object[]{d1, d2}
start_offset===
52
end_offset===
72
Python OUTPUT===
 List edges = DirectedEdge.toEdges(Arrays.asList(new 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = IOUtil.readWKT(wkt);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = IOUtil.readWKT(wkt); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"LINESTRING (0 0, 1 1, 2 2)\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
checkDissolve("LINESTRING (0 0, 1 1, 2 2)", "LINESTRING (0 0, 1 1, 2 2)");
red_line===
"LINESTRING (0 0, 1 1, 2 2)"
start_offset===
18
end_offset===
46
Python OUTPUT===
 checkDissolve("LINESTRING (0 0, 1 1, 2 2)", "LINESTRING (0 0, 1 1, 2 2)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = IOUtil.readWKT(wkt);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = IOUtil.readWKT(wkt); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<Test> tests = new ArrayList<Test>();
red_line===
<Test>
start_offset===
42
end_offset===
48
Python OUTPUT===
\u003c\u003e > tests = new ArrayList < Test > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"report\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String report = "";
red_line===
report
start_offset===
11
end_offset===
17
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running test case # " + options.testCaseIndex);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Running test case # " + options.testCaseIndex); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(report(options.isVerbose));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(report(options.isVerbose)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Run time: " + sw.getTimeString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Run time: " + sw.getTimeString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out
          .println("=====  Test Runner  -  JTS Topology Suite (Version " + JTSVersion.CURRENT_VERSION + ")  =====");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out .println("===== Test Runner - JTS Topology Suite (Version " + JTSVersion.CURRENT_VERSION + ") ====="); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Adding Geometry Functions from: " + cls);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Adding Geometry Functions from: " + cls); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Unable to load Geometry Operation: " + geomOpClassname);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Unable to load Geometry Operation: " + geomOpClassname); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Using Geometry Operation: " + geomOpClassname);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Using Geometry Operation: " + geomOpClassname); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"file\".
scn.ruleId===
1854
scn.suspCodeStr===
File file = new File(commandLine.getOption(OPT_PROPERTIES).getArg(0));
red_line===
= new File(commandLine.getOption(OPT_PROPERTIES).getArg(0))
start_offset===
16
end_offset===
75
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(s);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(s); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> args = new ArrayList<String>();
red_line===
<String>
start_offset===
37
end_offset===
45
Python OUTPUT===
\u003c\u003e args = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> testFiles = new ArrayList<String>();
red_line===
<String>
start_offset===
42
end_offset===
50
Python OUTPUT===
\u003c\u003e testFiles = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<String> arguments = new ArrayList<String>();
red_line===
<String>
start_offset===
47
end_offset===
55
Python OUTPUT===
\u003c\u003e arguments = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make geomBFilename a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String geomBFilename;
red_line===
geomBFilename
start_offset===
18
end_offset===
31
Python OUTPUT===
public static final String geomBFilename ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make arg1 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public String arg1;
red_line===
arg1
start_offset===
18
end_offset===
22
Python OUTPUT===
public static final String arg1 ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
properties.load(new FileInputStream(commandLine.getOption(OPT_PROPERTIES).getArg(0)));
red_line===
new FileInputStream(commandLine.getOption(OPT_PROPERTIES).getArg(0))
start_offset===
22
end_offset===
90
Python OUTPUT===
 properties.load(new FileInputStream(commandLine.getOption(OPT_PROPERTIES).getArg(0))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (! isBoundaryHausdorffDistanceInTolerance(actualBuffer, expectedBuffer, distance))
			return false;
red_line===
if
start_offset===
2
end_offset===
4
Python OUTPUT===
 if (! isBoundaryHausdorffDistanceInTolerance(actualBuffer, expectedBuffer, distance)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (maxDistanceFound > expectedDistanceTol)
    	return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (maxDistanceFound > expectedDistanceTol) return false; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
msg += ", ";
red_line===
msg
start_offset===
4
end_offset===
7
Python OUTPUT===
 msg += ", "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
msg += args[j].getClass().getName();
red_line===
msg
start_offset===
3
end_offset===
6
Python OUTPUT===
 msg += args[j].getClass().getName(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<TestCase> testCases = new ArrayList<TestCase>();
red_line===
<TestCase>
start_offset===
50
end_offset===
60
Python OUTPUT===
\u003c\u003e > testCases = new ArrayList < TestCase > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private static List arguments = null;
red_line===
List
start_offset===
19
end_offset===
23
Python OUTPUT===
 private static List arguments = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private static List requiredKeys = new Vector();
red_line===
List
start_offset===
19
end_offset===
23
Python OUTPUT===
 private static List requiredKeys = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private static List allowedKeys = new Vector();
red_line===
List
start_offset===
19
end_offset===
23
Python OUTPUT===
 private static List allowedKeys = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Hashtable hashtable = new Hashtable();
red_line===
Hashtable
start_offset===
12
end_offset===
21
Python OUTPUT===
 private Hashtable hashtable = new Hashtable(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
private static List requiredKeys = new Vector();
red_line===
new Vector()
start_offset===
39
end_offset===
51
Python OUTPUT===
private static List requiredKeys = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
private static List allowedKeys = new Vector();
red_line===
new Vector()
start_offset===
38
end_offset===
50
Python OUTPUT===
private static List allowedKeys = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Hashtable\" by an unsynchronized one such as \"HashMap\".
scn.ruleId===
1149
scn.suspCodeStr===
private Hashtable hashtable = new Hashtable();
red_line===
Hashtable
start_offset===
12
end_offset===
21
Python OUTPUT===
private HashMap hashtable = new HashMap ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
JList list = null;
red_line===
JList
start_offset===
8
end_offset===
13
Python OUTPUT===
 JList list = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"getSelectedValues\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
Object[] entries = list.getSelectedValues();
red_line===
getSelectedValues
start_offset===
32
end_offset===
49
Python OUTPUT===
 Object[] entries = list.getSele
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"list\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
Object[] entries = list.getSelectedValues();
red_line===
list.getSelectedValues
start_offset===
27
end_offset===
49
Python OUTPUT===
 Object[] entries = list.getSelectedValues(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Running tests...");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Running tests..."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"testRuns\" which hides the field declared at line 33.
scn.ruleId===
1117
scn.suspCodeStr===
List<TestRun> testRuns = new ArrayList<TestRun>();
red_line===
testRuns
start_offset===
18
end_offset===
26
Python OUTPUT===
 List<TestRun> testestRunsnew ArrayList<TestRun>(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Reading test file " + testFile.getAbsolutePath());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Reading test file " + testFile.getAbsolutePath()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<TestRun> testRuns = new ArrayList<TestRun>();
red_line===
<TestRun>
start_offset===
48
end_offset===
57
Python OUTPUT===
\u003c\u003e > testRuns = new ArrayList < TestRun > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Test> tests = new ArrayList<Test>();
red_line===
<Test>
start_offset===
36
end_offset===
42
Python OUTPUT===
\u003c\u003e tests = new ArrayList < Test > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Test> tests = new ArrayList<Test>();
red_line===
<Test>
start_offset===
36
end_offset===
42
Python OUTPUT===
\u003c\u003e tests = new ArrayList < Test > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<TestRun> testRuns = new ArrayList<TestRun>();
red_line===
<TestRun>
start_offset===
42
end_offset===
51
Python OUTPUT===
\u003c\u003e testRuns = new ArrayList < TestRun > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"String\".
scn.ruleId===
1905
scn.suspCodeStr===
return (String) arguments.get(i);
red_line===
String
start_offset===
12
end_offset===
18
Python OUTPUT===
 return (Strrguments.get(i); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"actualResult\" which hides the field declared at line 45.
scn.ruleId===
1117
scn.suspCodeStr===
Result actualResult = getActualResult();
red_line===
actualResult
start_offset===
11
end_offset===
23
Python OUTPUT===
 Result actactualResultgetActualResult(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.arguments = new ArrayList<String>(arguments);
red_line===
<String>
start_offset===
34
end_offset===
42
Python OUTPUT===
\u003c\u003e new ArrayList < String > ( arguments ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
xml += " arg" + j + "=\"" + argument + "\"";
red_line===
xml
start_offset===
6
end_offset===
9
Python OUTPUT===
 xml += " arg" + j + "=\"" + argument + "\""; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Vector parsingProblems = new Vector();
red_line===
Vector
start_offset===
4
end_offset===
10
Python OUTPUT===
 Vector parsingProblems = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class returnType = getGeometryOperation().getReturnType(name);
red_line===
Class
start_offset===
5
end_offset===
10
Python OUTPUT===
 Class returnType = getGeometryOperation().getReturnType(name); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Vector testCases = new Vector();
red_line===
Vector
start_offset===
8
end_offset===
14
Python OUTPUT===
 Vector testCases = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List testElements = caseElement.getChildren("test");
red_line===
List
start_offset===
16
end_offset===
20
Python OUTPUT===
 List testElements = caseElement.getChildren("test"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List tests = parseTests(testElements, caseIndex, testFile, testCase, tolerance);
red_line===
List
start_offset===
16
end_offset===
20
Python OUTPUT===
 List tests = parseTests(testElements, caseIndex, testFile, testCase, tolerance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List caseElements = runElement.getChildren("case");
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List caseElements = runElement.getChildren("case"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class goClass = Class.forName(classname);
red_line===
Class
start_offset===
3
end_offset===
8
Python OUTPUT===
 Class goClass = Class.forName(classname); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List wktList = getContents(wktFile.getPath());
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List wktList = getContents(wktFile.getPath()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List contents = new Vector();
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List contents = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String TAG_geometryOperation = "geometryOperation";
red_line===
TAG_geometryOperation
start_offset===
29
end_offset===
50
Python OUTPUT===
 private static final String TAG_geometryOperation = "geometryOperation"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String TAG_resultMatcher = "resultMatcher";
red_line===
TAG_resultMatcher
start_offset===
29
end_offset===
46
Python OUTPUT===
 private static final String TAG_resultMatcher = "resultMatcher"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"geometryFactory\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private GeometryFactory geometryFactory;
red_line===
geometryFactory
start_offset===
28
end_offset===
43
Python OUTPUT===
 private GeometryFactory geo
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"resultMatcher\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private ResultMatcher resultMatcher = null;
red_line===
resultMatcher
start_offset===
26
end_offset===
39
Python OUTPUT===
 private ResultMatcher resnull; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"tolerance\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private double tolerance = 0.0;
red_line===
tolerance
start_offset===
19
end_offset===
28
Python OUTPUT===
 private double tol.0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector parsingProblems = new Vector();
red_line===
Vector
start_offset===
4
end_offset===
10
Python OUTPUT===
ArrayList parsingProblems = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector testCases = new Vector();
red_line===
Vector
start_offset===
8
end_offset===
14
Python OUTPUT===
ArrayList testCases = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
List contents = new Vector();
red_line===
new Vector()
start_offset===
24
end_offset===
36
Python OUTPUT===
List contents = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geometryFactory\" which hides the field declared at line 41.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryFactory geometryFactory = new GeometryFactory(testRun.getPrecisionModel(), 0);
red_line===
geometryFactory
start_offset===
24
end_offset===
39
Python OUTPUT===
 GeometryFactory geometrgeometryFactoryGeometryFactory(testRun.getPrecisionModel(), 0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"wktorbReader\" which hides the field declared at line 42.
scn.ruleId===
1117
scn.suspCodeStr===
WKTOrWKBReader wktorbReader = new WKTOrWKBReader(geometryFactory);
red_line===
wktorbReader
start_offset===
23
end_offset===
35
Python OUTPUT===
 WKTOrWKBReader wktorbRwktorbReaderWKTOrWKBReader(geometryFactory); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"geomOp\" which hides the field declared at line 44.
scn.ruleId===
1117
scn.suspCodeStr===
GeometryOperation geomOp = (GeometryOperation) getInstance(goClass, GeometryOperation.class);
red_line===
geomOp
start_offset===
22
end_offset===
28
Python OUTPUT===
 GeometryOperation geogeomOp(GeometryOperation) getInstance(goClass, GeometryOperation.class); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"resultMatcher\" which hides the field declared at line 45.
scn.ruleId===
1117
scn.suspCodeStr===
ResultMatcher resultMatcher = (ResultMatcher) getInstance(goClass, ResultMatcher.class);
red_line===
resultMatcher
start_offset===
18
end_offset===
31
Python OUTPUT===
 ResultMatcher resresultMatcher(ResultMatcher) getInstance(goClass, ResultMatcher.class); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"tolerance\" which hides the field declared at line 43.
scn.ruleId===
1117
scn.suspCodeStr===
double tolerance = 0.0;
red_line===
tolerance
start_offset===
9
end_offset===
18
Python OUTPUT===
 double ttolerance= 0.0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isEqual\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isEqual = thisGeometryClone.equalsExact(otherGeometryClone, tolerance);
red_line===
thisGeometryClone.equalsExact(otherGeometryClone, tolerance)
start_offset===
22
end_offset===
82
Python OUTPUT===
 boolean isEqual = thisGeometryClone.equalsExact(otherGeometryClone, tolerance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
o = goClass.newInstance();
red_line===
newInstance
start_offset===
15
end_offset===
26
Python OUTPUT===
 o = goClass.ne; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Test> tests = new ArrayList<Test>();
red_line===
<Test>
start_offset===
40
end_offset===
46
Python OUTPUT===
\u003c\u003e tests = new ArrayList < Test > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> arguments = new ArrayList<String>();
red_line===
<String>
start_offset===
54
end_offset===
62
Python OUTPUT===
\u003c\u003e arguments = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
string += line + "\n";
red_line===
string
start_offset===
12
end_offset===
18
Python OUTPUT===
 string += line + "\n"; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"BufferedReader\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
BufferedReader bufferedReader = new BufferedReader(fileReader);
red_line===
new BufferedReader(fileReader)
start_offset===
40
end_offset===
70
Python OUTPUT===
 BufferedReader bufferedReader = new BufferedReader(fileReader); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List geoms = wkbFileReader.read();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List geoms = wkbFileReader.read(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<String> args = new ArrayList<String>();
red_line===
<String>
start_offset===
43
end_offset===
51
Python OUTPUT===
\u003c\u003e > args = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class geomOpClass = null;
red_line===
Class
start_offset===
4
end_offset===
9
Python OUTPUT===
 Class geomOpClass = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ERROR: Class not found - " + geomOpClassname);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("ERROR: Class not found - " + geomOpClassname); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
GeometryOperation geometryOp = (GeometryOperation) geomOpClass.newInstance();
red_line===
newInstance
start_offset===
69
end_offset===
80
Python OUTPUT===
 GeometryOperation geometryOp = (GeometryOperation) geomOpClass.newIn
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ex.getMessage());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(ex.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"geometryOp\".
scn.ruleId===
1488
scn.suspCodeStr===
GeometryOperation geometryOp = (GeometryOperation) geomOpClass.newInstance();
red_line===
(GeometryOperation) geomOpClass.newInstance()
start_offset===
37
end_offset===
82
Python OUTPUT===
 GeometryOperation geometryOp = (GeometryOperation) geomOpClass.newInstance(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Boolean\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
return new Boolean(true);
red_line===
Boolean
start_offset===
19
end_offset===
26
Python OUTPUT===
 return new Boolean 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Boolean\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
return new Boolean(false);
red_line===
Boolean
start_offset===
19
end_offset===
26
Python OUTPUT===
 return new Boolean; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"Integer\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
return new Integer(src);
red_line===
Integer
start_offset===
19
end_offset===
26
Python OUTPUT===
 return new Integer
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
protected Class returnType;
red_line===
Class
start_offset===
11
end_offset===
16
Python OUTPUT===
 protected Class returnType; 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove or correct this useless self-assignment.
scn.ruleId===
1656
scn.suspCodeStr===
this.category = category;
red_line===
=
start_offset===
16
end_offset===
17
Python OUTPUT===
 this.category =category; 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove or correct this useless self-assignment.
scn.ruleId===
1656
scn.suspCodeStr===
this.category = category;
red_line===
=
start_offset===
16
end_offset===
17
Python OUTPUT===
 this.category =category; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment; \"category\" already holds the assigned value along all execution paths.
scn.ruleId===
4165
scn.suspCodeStr===
this.category = category;
red_line===
this.category = category
start_offset===
2
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment; \"category\" already holds the assigned value along all execution paths.
scn.ruleId===
4165
scn.suspCodeStr===
this.category = category;
red_line===
this.category = category
start_offset===
2
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Operation <" + opName + ">");
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Operation <" + opName + ">"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Geometry: " + geometry);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Geometry: " + geometry); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Arg[" + i + "]: " + args[i]);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Arg[" + i + "]: " + args[i]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Result==> " + result.toFormattedString());
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println("Result==> " + result.toFormattedString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(msg);
red_line===
RuntimeException
start_offset===
14
end_offset===
30
Python OUTPUT===
 throw new RuntimeException(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class returnClass = methods[i].getReturnType();
red_line===
Class
start_offset===
4
end_offset===
9
Python OUTPUT===
 Class returnClass = methods[i].getReturnType(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
public GeometryMethodOperation() {
  }
red_line===
GeometryMethodOperation
start_offset===
9
end_offset===
32
Python OUTPUT===
 public GeometryMethodOperation() { } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Boolean\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
convArg[0] = new Boolean(true);
red_line===
Boolean
start_offset===
25
end_offset===
32
Python OUTPUT===
 convArg[0] = new Boolean 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Boolean\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
convArg[0] =  new Boolean(false);
red_line===
Boolean
start_offset===
26
end_offset===
33
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"Integer\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
convArg[0] = new Integer(srcStr);
red_line===
Integer
start_offset===
25
end_offset===
32
Python OUTPUT===
 convArg[0] = new Integer); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(invocationErrMsg(ex));
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException(invocationErrMsg(ex)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(ex.getMessage());
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
 throw new RuntimeException(ex.getMessage()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class clz = method.getDeclaringClass();
red_line===
Class
start_offset===
2
end_offset===
7
Python OUTPUT===
 Class clz = method.getDeclaringClass(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class returnType = method.getReturnType();
red_line===
Class
start_offset===
2
end_offset===
7
Python OUTPUT===
 Class returnType = method.getReturnType(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"clz\".
scn.ruleId===
1854
scn.suspCodeStr===
Class clz = method.getDeclaringClass();
red_line===
= method.getDeclaringClass()
start_offset===
12
end_offset===
40
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ex.getMessage());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(ex.getMessage()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"FUNCTIONS_SUFFIX\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String FUNCTIONS_SUFFIX = "Functions";
red_line===
FUNCTIONS_SUFFIX
start_offset===
29
end_offset===
45
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"PARAMETERS_SUFFIX\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String PARAMETERS_SUFFIX = "Parameters";
red_line===
PARAMETERS_SUFFIX
start_offset===
29
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"DESCRIPTION_SUFFIX\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String DESCRIPTION_SUFFIX = "Description";
red_line===
DESCRIPTION_SUFFIX
start_offset===
29
end_offset===
47
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"arg\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
fullArg[i] = arg[i-1];
red_line===
arg
start_offset===
17
end_offset===
20
Python OUTPUT===
 fullArg[i] = arg[i-1]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List functions = new ArrayList();
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
 private List functions = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List funcs = createFunctions(geomFuncClass);
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List funcs = createFunctions(geomFuncClass); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class geomFuncClass = null;
red_line===
Class
start_offset===
2
end_offset===
7
Python OUTPUT===
 Class geomFuncClass = null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List funcs = new ArrayList();
red_line===
List
start_offset===
2
end_offset===
6
Python OUTPUT===
 List funcs = new ArrayList(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (opName.equals("covers")) return true;
red_line===
if
start_offset===
3
end_offset===
5
Python OUTPUT===
 if (opName.equals("covers")) return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(msg + locStr);
red_line===
RuntimeException
start_offset===
14
end_offset===
30
Python OUTPUT===
 throw new RuntimeException(msg + locStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"endCapStyle\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int endCapStyle;
red_line===
endCapStyle
start_offset===
14
end_offset===
25
Python OUTPUT===
 private int e 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"endCapStyle\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int endCapStyle;
red_line===
endCapStyle
start_offset===
14
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isNegativeBufferOfNonAreal\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isNegativeBufferOfNonAreal = geom.getDimension() < 2 && distance <= 0.0;
red_line===
geom.getDimension() < 2 && distance <= 0.0
start_offset===
39
end_offset===
81
Python OUTPUT===
 boolean isNegativeBufferOfNonAreal = geom.getDimension() < 2 && distance <= 0.0; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"result\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
result = result.getFactory().createGeometryCollection(null);
red_line===
result.getFactory
start_offset===
14
end_offset===
31
Python OUTPUT===
 result = result.getFactory().createGeometryCollection(null); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Vector options = new Vector();
red_line===
Vector
start_offset===
2
end_offset===
8
Python OUTPUT===
 Vector options = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector options = new Vector();
red_line===
Vector
start_offset===
2
end_offset===
8
Python OUTPUT===
ArrayList options = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int NARGS_ZERO_OR_MORE  = -1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NARGS_ZERO_OR_MORE = - 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int NARGS_ONE_OR_MORE   = -2;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NARGS_ONE_OR_MORE = - 2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static int NARGS_ZERO_OR_ONE   = -3;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NARGS_ZERO_OR_ONE = - 3 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String OPTION_FREE_ARGS = "**FREE_ARGS**";
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String OPTION_FREE_ARGS = " **FREE_ARGS** " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"option \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
if (args.length <= 0)
        throw new ParseException("option " + name + ": expected one or more args, found " + args.length);
red_line===
"option "
start_offset===
33
end_offset===
42
Python OUTPUT===
 if (args.length <= 0) throw new ParseException("option " + name + ": expected one or more args, found " + args.length); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (options.size() > 0)
      return (Option) options.elementAt(i);
red_line===
options.size() > 0
start_offset===
8
end_offset===
26
Python OUTPUT===
 if (options.size() > 0) return (Option) options.elementAt(i); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
return options.size() > 0;
red_line===
options.size() > 0
start_offset===
11
end_offset===
29
Python OUTPUT===
 return options.size() > 0; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Hashtable optSpecs  = new Hashtable();
red_line===
Hashtable
start_offset===
2
end_offset===
11
Python OUTPUT===
 Hashtable optSpecs = new Hashtable(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Vector optVec = new Vector();
red_line===
Vector
start_offset===
2
end_offset===
8
Python OUTPUT===
 Vector optVec = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Vector params = new Vector();
red_line===
Vector
start_offset===
4
end_offset===
10
Python OUTPUT===
 Vector params = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Hashtable\" by an unsynchronized one such as \"HashMap\".
scn.ruleId===
1149
scn.suspCodeStr===
Hashtable optSpecs  = new Hashtable();
red_line===
Hashtable
start_offset===
2
end_offset===
11
Python OUTPUT===
HashMap optSpecs = new HashMap ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector optVec = new Vector();
red_line===
Vector
start_offset===
2
end_offset===
8
Python OUTPUT===
ArrayList optVec = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector params = new Vector();
red_line===
Vector
start_offset===
4
end_offset===
10
Python OUTPUT===
ArrayList params = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
if (spec == null) return null;
red_line===
null
start_offset===
29
end_offset===
33
Python OUTPUT===
 if (spec == null) return null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Vector result = new Vector();
red_line===
Vector
start_offset===
8
end_offset===
14
Python OUTPUT===
 Vector result = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Vector result = new Vector();
red_line===
Vector
start_offset===
8
end_offset===
14
Python OUTPUT===
 Vector result = new Vector(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
ArrayList result = new ArrayList();
red_line===
ArrayList
start_offset===
8
end_offset===
17
Python OUTPUT===
 ArrayList result = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public final static String newLine = System.getProperty("line.separator");
red_line===
newLine
start_offset===
31
end_offset===
38
Python OUTPUT===
 public final static String newLine = System.getProperty("line.separator"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buf = new StringBuffer();
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder buf = new StringBuilder ( ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector result = new Vector();
red_line===
Vector
start_offset===
8
end_offset===
14
Python OUTPUT===
ArrayList result = new ArrayList ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector result = new Vector();
red_line===
Vector
start_offset===
8
end_offset===
14
Python OUTPUT===
ArrayList result = new ArrayList ( ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer result = new StringBuffer();
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder result = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer result = new StringBuffer();
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder result = new StringBuilder ( ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer buffer = new StringBuffer();
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder buffer = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer b = new StringBuffer();
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder b = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer result = new StringBuffer();
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder result = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer b = new StringBuffer(original);
red_line===
StringBuffer
start_offset===
8
end_offset===
20
Python OUTPUT===
StringBuilder b = new StringBuilder ( or iginal ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String newLine = System.getProperty("line.separator");
red_line===
static
start_offset===
17
end_offset===
23
Python OUTPUT===
public static final String new Line = System . getProperty ( " line.separator " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
\"nextToken\" returns a string, there\u0027s no need to call \"toString()\".
scn.ruleId===
1858
scn.suspCodeStr===
result.add(tokenizer.nextToken().toString().trim());
red_line===
nextToken
start_offset===
33
end_offset===
42
Python OUTPUT===
 result.add(tokenizer.nextToken().toString().trim()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "O", "");
red_line===
= replaceAll(s, "O", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "I", "");
red_line===
= replaceAll(s, "I", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "E", "");
red_line===
= replaceAll(s, "E", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "A", "");
red_line===
= replaceAll(s, "A", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "u", "");
red_line===
= replaceAll(s, "u", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "o", "");
red_line===
= replaceAll(s, "o", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "i", "");
red_line===
= replaceAll(s, "i", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "e", "");
red_line===
= replaceAll(s, "e", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "a", "");
red_line===
= replaceAll(s, "a", "")
start_offset===
15
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
String result = s;
red_line===
= s
start_offset===
22
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " O", "!~P");
red_line===
= replaceAll(s, " O", "!~P")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " I", "!~J");
red_line===
= replaceAll(s, " I", "!~J")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " E", "!~F");
red_line===
= replaceAll(s, " E", "!~F")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " A", "!~B");
red_line===
= replaceAll(s, " A", "!~B")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " u", "!~v");
red_line===
= replaceAll(s, " u", "!~v")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " o", "!~p");
red_line===
= replaceAll(s, " o", "!~p")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " i", "!~j");
red_line===
= replaceAll(s, " i", "!~j")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " e", "!~f");
red_line===
= replaceAll(s, " e", "!~f")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, " a", "!~b");
red_line===
= replaceAll(s, " a", "!~b")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
String result = s;
red_line===
= s
start_offset===
22
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~P", " O");
red_line===
= replaceAll(s, "!~P", " O")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~J", " I");
red_line===
= replaceAll(s, "!~J", " I")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~F", " E");
red_line===
= replaceAll(s, "!~F", " E")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~B", " A");
red_line===
= replaceAll(s, "!~B", " A")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~v", " u");
red_line===
= replaceAll(s, "!~v", " u")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~p", " o");
red_line===
= replaceAll(s, "!~p", " o")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~j", " i");
red_line===
= replaceAll(s, "!~j", " i")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~f", " e");
red_line===
= replaceAll(s, "!~f", " e")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = replaceAll(s, "!~b", " a");
red_line===
= replaceAll(s, "!~b", " a")
start_offset===
15
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
String result = s;
red_line===
= s
start_offset===
22
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
stackTrace += lineNumberReader.readLine() + newLine;
red_line===
stackTrace
start_offset===
16
end_offset===
26
Python OUTPUT===
 stackTrace += lineNumberReader.readLine() + newLine; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"chLow\".
scn.ruleId===
1854
scn.suspCodeStr===
char chLow = Character.toLowerCase(ch);
red_line===
= Character.toLowerCase(ch)
start_offset===
15
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (ch >= 'a' && ch <= 'f') return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (ch >= 'a' && ch <= 'f') return true; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"geomFactory\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private GeometryFactory geomFactory;
red_line===
geomFactory
start_offset===
26
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List filenames = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List filenames = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List filenames = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List filenames = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List filenames = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List filenames = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List filenames = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List filenames = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection filenames = new ArrayList();
red_line===
Collection
start_offset===
2
end_offset===
12
Python OUTPUT===
 Collection filenames = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<File> files = new ArrayList<File>();
red_line===
<File>
start_offset===
34
end_offset===
40
Python OUTPUT===
\u003c\u003e files = new ArrayList < File > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List testFiles = new ArrayList();
red_line===
List
start_offset===
8
end_offset===
12
Python OUTPUT===
 List testFiles = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(reportWriter.writeReport(engine));
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(reportWriter.writeReport(engine)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List intPts = nv.getIntersections();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List intPts = nv.getIntersections(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List intPts = intFinder.getIntersections();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List intPts = intFinder.getIntersections(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segs = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs = createSegmentStrings(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segs = createSegmentStrings(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs2 = createSegmentStrings(geom2);
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List segs2 = createSegmentStrings(geom2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection nodedSegStrings = noder.getNodedSubstrings();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection nodedSegStrings = noder.getNodedSubstrings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs = createSegmentStrings(geom);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segs = createSegmentStrings(geom); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segs2 = createSegmentStrings(geom2);
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List segs2 = createSegmentStrings(geom2); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection nodedSegStrings = noder.getNodedSubstrings();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection nodedSegStrings = noder.getNodedSubstrings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
if (intPts.size() == 0) return FunctionsUtil.getFactoryOrDefault(geom).createPoint();
red_line===
intPts.size() == 0
start_offset===
8
end_offset===
26
Python OUTPUT===
 if (intPts.size() == 0) return FunctionsUtil.getFactoryOrDefault(geom).createPoint(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"pts\".
scn.ruleId===
1488
scn.suspCodeStr===
Coordinate[] pts = CoordinateArrays.toCoordinateArray(ptsNoDup);
red_line===
CoordinateArrays.toCoordinateArray(ptsNoDup)
start_offset===
23
end_offset===
67
Python OUTPUT===
 Coordinate[] pts = CoordinateArrays.toCoordinateArray(ptsNoDup); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Geometry> comp = new ArrayList<Geometry>();
red_line===
<Geometry>
start_offset===
39
end_offset===
49
Python OUTPUT===
\u003c\u003e comp = new ArrayList < Geometry > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List selected = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List selected = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List selected = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List selected = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List selected = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List selected = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List selected = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List selected = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List comp = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List comp = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"isWithinDist\".
scn.ruleId===
1488
scn.suspCodeStr===
boolean isWithinDist = indexedDist.isWithinDistance(g, maximumDistance);
red_line===
indexedDist.isWithinDistance(g, maximumDistance)
start_offset===
31
end_offset===
79
Python OUTPUT===
 boolean isWithinDist = indexedDist.isWithinDistance(g, maximumDistance); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"lineProj\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry lineProj = ll.extractLine(indexStart, indexEnd);
red_line===
ll.extractLine(indexStart, indexEnd)
start_offset===
26
end_offset===
62
Python OUTPUT===
 Geometry lineProj = ll.extractLine(indexStart, indexEnd); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List components = null;
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List components = null; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"reduced\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry reduced = PrecisionReducer.reducePrecision(homoGeom, new PrecisionModel(scaleFactor));
red_line===
PrecisionReducer.reducePrecision(homoGeom, new PrecisionModel(scaleFactor))
start_offset===
23
end_offset===
98
Python OUTPUT===
 Geometry reduced = PrecisionReducer.reducePrecision(homoGeom, new PrecisionModel(scaleFactor)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry result = geom.getFactory().buildGeometry(components);
red_line===
geom.getFactory().buildGeometry(components)
start_offset===
22
end_offset===
65
Python OUTPUT===
 Geometry result = geom.getFactory().buildGeometry(components); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List pts = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List pts = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double rand = Math.random();
red_line===
ath.rando
start_offset===
21
end_offset===
30
Python OUTPUT===
 double rand = Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double ang = 2 * Math.PI * Math.random();
red_line===
* Math.PI
start_offset===
21
end_offset===
30
Python OUTPUT===
 double ang = 2 * Math.PI * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double x0 = env.getMinX() + xLen * Math.random();
red_line===
.getMinX(
start_offset===
21
end_offset===
30
Python OUTPUT===
 double x0 = env.getMinX() + xLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double y0 = env.getMinY() + yLen * Math.random();
red_line===
.getMinY(
start_offset===
21
end_offset===
30
Python OUTPUT===
 double y0 = env.getMinY() + yLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double x1 = env.getMinX() + xLen * Math.random();
red_line===
.getMinX(
start_offset===
21
end_offset===
30
Python OUTPUT===
 double x1 = env.getMinX() + xLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double y1 = env.getMinY() + yLen * Math.random();
red_line===
.getMinY(
start_offset===
21
end_offset===
30
Python OUTPUT===
 double y1 = env.getMinY() + yLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double x0 = env.getMinX() + i * xLen + xLen * Math.random();
red_line===
nv.getMin
start_offset===
21
end_offset===
30
Python OUTPUT===
 double x0 = env.getMinX() + i * xLen + xLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double y0 = env.getMinY() + j * yLen + yLen * Math.random();
red_line===
nv.getMin
start_offset===
21
end_offset===
30
Python OUTPUT===
 double y0 = env.getMinY() + j * yLen + yLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double x1 = env.getMinX() + i * xLen + xLen * Math.random();
red_line===
nv.getMin
start_offset===
21
end_offset===
30
Python OUTPUT===
 double x1 = env.getMinX() + i * xLen + xLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double y1 = env.getMinY() + j * yLen + yLen * Math.random();
red_line===
nv.getMin
start_offset===
21
end_offset===
30
Python OUTPUT===
 double y1 = env.getMinY() + j * yLen + yLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double x0 = env.getMinX() + xLen * Math.random();
red_line===
.getMinX(
start_offset===
21
end_offset===
30
Python OUTPUT===
 double x0 = env.getMinX() + xLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double x1 = env.getMinY() + yLen * Math.random();
red_line===
.getMinY(
start_offset===
21
end_offset===
30
Python OUTPUT===
 double x1 = env.getMinY() + yLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double v = env.getMinX() + xLen * Math.random();
red_line===
getMinX()
start_offset===
21
end_offset===
30
Python OUTPUT===
 double v = env.getMinX() + xLen * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
boolean isXFixed = Math.random() < 0.5;
red_line===
d = Math.
start_offset===
21
end_offset===
30
Python OUTPUT===
 boolean isXFixed = Math.random() < 0.5; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double xLen = width * Math.random();
red_line===
idth * Ma
start_offset===
21
end_offset===
30
Python OUTPUT===
 double xLen = width * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double yLen = hgt * Math.random();
red_line===
gt * Math
start_offset===
21
end_offset===
30
Python OUTPUT===
 double yLen = hgt * Math.random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
double dist = xLen * (Math.random() - 0.5);
red_line===
 xLen * (
start_offset===
21
end_offset===
30
Python OUTPUT===
 double dist = xLen * (Math.random() - 0.5); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
int quad = (int) (Math.random() * 4);
red_line===
Math.random
start_offset===
24
end_offset===
35
Python OUTPUT===
 int quad = (int) (Math.random() * 4); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
double x0 = centre.x + width * (Math.random() - 0.5);
red_line===
 + width * 
start_offset===
24
end_offset===
35
Python OUTPUT===
 double x0 = centre.x + width * (Math.random() - 0.5); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.util.Random.nextInt()\" instead.
scn.ruleId===
2140
scn.suspCodeStr===
double y0 = centre.y + height * (Math.random() - 0.5);
red_line===
 + height *
start_offset===
24
end_offset===
35
Python OUTPUT===
 double y0 = centre.y + height * (Math.random() - 0.5); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List polys = PolygonExtracter.getPolygons(g1);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List polys = PolygonExtracter.getPolygons(g1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List atomicGeoms = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List atomicGeoms = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"geoms\".
scn.ruleId===
1854
scn.suspCodeStr===
Geometry geoms = FunctionsUtil.buildGeometry(g1, g2);
red_line===
= FunctionsUtil.buildGeometry(g1, g2)
start_offset===
19
end_offset===
56
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"line\".
scn.ruleId===
1488
scn.suspCodeStr===
LineString line = g.getFactory().createLineString(pts);
red_line===
g.getFactory().createLineString(pts)
start_offset===
22
end_offset===
58
Python OUTPUT===
 LineString line = g.getFactory().createLineString(pts); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"g\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
return g.getFactory().createGeometryCollection(
        GeometryFactory.toGeometryArray(atomicGeoms));
red_line===
g.getFactory
start_offset===
11
end_offset===
23
Python OUTPUT===
 return g.getFactory().createGeometryCollection( GeometryFactory.toGeometryArray(atomicGeoms)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
private static final double WIDTH = 150;
red_line===
125;
start_offset===
45
end_offset===
49
Python OUTPUT===
 private static final double WIDTH = 150; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"reducedGeom\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry reducedGeom = GeometryPrecisionReducer.reducePointwise(geom, pm);
red_line===
GeometryPrecisionReducer.reducePointwise(geom, pm)
start_offset===
25
end_offset===
75
Python OUTPUT===
 Geometry reducedGeom = GeometryPrecisionReducer.reducePointwise(geom, pm); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"reducedGeom\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry reducedGeom = GeometryPrecisionReducer.reduce(geom, pm);
red_line===
GeometryPrecisionReducer.reduce(geom, pm)
start_offset===
25
end_offset===
66
Python OUTPUT===
 Geometry reducedGeom = GeometryPrecisionReducer.reduce(geom, pm); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection lines = merger.getMergedLineStrings();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection lines = merger.getMergedLineStrings(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List segments = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List segments = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LinearComponentExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LinearComponentExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List chains = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List chains = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection lines = LinearComponentExtracter.getLines(g);
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection lines = LinearComponentExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LineStringExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LineStringExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geom = polygonizer.getDangles();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection geom = polygonizer.getDangles(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LineStringExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LineStringExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geom = polygonizer.getCutEdges();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection geom = polygonizer.getCutEdges(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LineStringExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LineStringExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Collection geom = polygonizer.getInvalidRingLines();
red_line===
Collection
start_offset===
4
end_offset===
14
Python OUTPUT===
 Collection geom = polygonizer.getInvalidRingLines(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List lines = LineStringExtracter.getLines(g);
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List lines = LineStringExtracter.getLines(g); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List errs = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List errs = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"union\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry union = extractPoly( OverlayNG.overlay(inter, symDiff, UNION, pm) );
red_line===
extractPoly( OverlayNG.overlay(inter, symDiff, UNION, pm) )
start_offset===
21
end_offset===
80
Python OUTPUT===
 Geometry union = extractPoly( OverlayNG.overlay(inter, symDiff, UNION, pm) ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"union\".
scn.ruleId===
1488
scn.suspCodeStr===
Geometry union = extractPoly( inter.union(symDiff) );
red_line===
extractPoly( inter.union(symDiff) )
start_offset===
21
end_offset===
56
Python OUTPUT===
 Geometry union = extractPoly( inter.union(symDiff) ); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
final List holePolys = new ArrayList();
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
 final List holePolys = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
public static double SRID(Geometry g)         {   return g.getSRID(); }
red_line===
SRID
start_offset===
23
end_offset===
27
Python OUTPUT===
 public static double SRID(Geometry g) { return g.getSRID(); } 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"ring\".
scn.ruleId===
1488
scn.suspCodeStr===
LinearRing ring = ((Polygon) g).getInteriorRingN(i);
red_line===
((Polygon) g).getInteriorRingN(i)
start_offset===
21
end_offset===
54
Python OUTPUT===
 LinearRing ring = ((Polygon) g).getInteriorRingN(i); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lengthDescription a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String lengthDescription = "Computes the length of perimeter of a Geometry";
red_line===
lengthDescription
start_offset===
22
end_offset===
39
Python OUTPUT===
public static final String lengthDescription = " Computes the length of perimeter of a Geometry " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Map topMap = new TreeMap();
red_line===
Map
start_offset===
9
end_offset===
12
Python OUTPUT===
 private Map topMap = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map keyMap = (Map) topMap.get(key1);
red_line===
Map
start_offset===
2
end_offset===
5
Python OUTPUT===
 Map keyMap = (Map) topMap.get(key1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map map = new TreeMap();
red_line===
Map
start_offset===
2
end_offset===
5
Python OUTPUT===
 Map map = new TreeMap(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map keyMap = (Map) topMap.get(key1);
red_line===
Map
start_offset===
2
end_offset===
5
Python OUTPUT===
 Map keyMap = (Map) topMap.get(key1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map keyMap = (Map) topMap.get(key);
red_line===
Map
start_offset===
2
end_offset===
5
Python OUTPUT===
 Map keyMap = (Map) topMap.get(key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
if (keyMap == null) return new TreeSet();
red_line===
TreeSet
start_offset===
33
end_offset===
40
Python OUTPUT===
 if (keyMap == null) return new TreeSet(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map keyMap = (Map) topMap.get(key1);
red_line===
Map
start_offset===
2
end_offset===
5
Python OUTPUT===
 Map keyMap = (Map) topMap.get(key1); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
if (keyMap == null) return new ArrayList();
red_line===
ArrayList
start_offset===
33
end_offset===
42
Python OUTPUT===
 if (keyMap == null) return new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = index.query(queryEnv.getEnvelopeInternal());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = index.query(queryEnv.getEnvelopeInternal()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = indexKDcache.query(queryEnv.getEnvelopeInternal());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = indexKDcache.query(queryEnv.getEnvelopeInternal()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = index.query(queryEnv.getEnvelopeInternal());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = index.query(queryEnv.getEnvelopeInternal()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List bounds = new ArrayList();
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List bounds = new ArrayList(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List children = node.getChildBoundables();
red_line===
List
start_offset===
6
end_offset===
10
Python OUTPUT===
 List children = node.getChildBoundables(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = index.query(queryEnv.getEnvelopeInternal());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = index.query(queryEnv.getEnvelopeInternal()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List result = indexHPRcache.query(queryEnv.getEnvelopeInternal());
red_line===
List
start_offset===
4
end_offset===
8
Python OUTPUT===
 List result = indexHPRcache.query(queryEnv.getEnvelopeInternal()); 
isFixed===
false
==================
