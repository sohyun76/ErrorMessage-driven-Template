RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"oldGenMax\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
long oldGenUsed = 0L, oldGenMax = 0L;
red_line===
oldGenMax
start_offset===
30
end_offset===
39
Python OUTPUT===
long oldGenUsed = 0L, oldGenMax = 0L;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"edenMax\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
long edenUsed = 0L, edenMax = 0L;
red_line===
edenMax
start_offset===
28
end_offset===
35
Python OUTPUT===
long edenUsed = 0L, edenMax = 0L;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"metaSpaceMax\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
long metaspaceUsed = 0L, metaSpaceMax = 0L;
red_line===
metaSpaceMax
start_offset===
33
end_offset===
45
Python OUTPUT===
long metaspaceUsed = 0L, metaSpaceMax = 0L;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
fromIndex += size;
red_line===
fromIndex
start_offset===
12
end_offset===
21
Python OUTPUT===
fromIndex += size;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"sp\".
scn.ruleId===
1854
scn.suspCodeStr===
int b1 = src[sp++] & 0xff;
red_line===
sp++
start_offset===
33
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"DEBUG_LEVEL\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String DEBUG_LEVEL = "DEBUG ";
red_line===
DEBUG_LEVEL
start_offset===
32
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"WARN_LEVEL\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String WARN_LEVEL = "WARN ";
red_line===
WARN_LEVEL
start_offset===
32
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"INFO_LEVEL\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final String INFO_LEVEL = "INFO ";
red_line===
INFO_LEVEL
start_offset===
32
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"TypeDescUtils.processDescriptor(\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Logger.error("TypeDescUtils.processDescriptor(" + descriptor + ") Should never arrive here!!! 0");
red_line===
"TypeDescUtils.processDescriptor("
start_offset===
29
end_offset===
63
Python OUTPUT===
Logger.error("TypeDescUtils.processDescriptor(" + descriptor + ") Should never arrive here!!! 0");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
boolean delete = file2Del.delete();
red_line===
delete
start_offset===
42
end_offset===
48
Python OUTPUT===
boolean delete = file2Del.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Null is returned but a \"Boolean\" is expected.
scn.ruleId===
2447
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
15
end_offset===
19
Python OUTPUT===
return null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"BASIC_CONFIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static BasicConfig BASIC_CONFIG;
red_line===
BASIC_CONFIG
start_offset===
31
end_offset===
43
Python OUTPUT===
private static BasicConfig BASIC_CONFIG;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"METRICS_CONFIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static MetricsConfig METRICS_CONFIG;
red_line===
METRICS_CONFIG
start_offset===
33
end_offset===
47
Python OUTPUT===
private static MetricsConfig METRICS_CONFIG;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
i += 3;
red_line===
i
start_offset===
16
end_offset===
17
Python OUTPUT===
i += 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\".
scn.ruleId===
3824
scn.suspCodeStr===
List<String> values = params.get(name);
red_line===
params.get(name)
start_offset===
30
end_offset===
46
Python OUTPUT===
List < String > values = params.get ( name ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(mxBean.getTotalCompilationTime() + "ms");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(mxBean.getTotalCompilationTime() + "ms"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
          
start_offset===
8
end_offset===
18
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getPrincipal:" + exchange.getPrincipal());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getPrincipal:" + exchange.getPrincipal()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getRequestURI:" + exchange.getRequestURI());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getRequestURI:" + exchange.getRequestURI()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(params);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(params); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"http://localhost:8086/write?k1\u003dv1\u0026k2\u003dv2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Assert.assertEquals("http://localhost:8086/write?k1=v1&k2=v2", req.getFullUrl());
red_line===
"http://localhost:8086/write?k1=v1&k2=v2"
start_offset===
28
end_offset===
69
Python OUTPUT===
Assert.assertEquals("http://localhost:8086/write?k1=v1&k2=v2", req.getFullUrl());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Accept-Encoding\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.set("Accept-Encoding", "gzip, deflate");
red_line===
"Accept-Encoding"
start_offset===
20
end_offset===
37
Python OUTPUT===
headers.set("Accept-Encoding", "gzip, deflate");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Connection\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.set("Connection", "close");
red_line===
"Connection"
start_offset===
20
end_offset===
32
Python OUTPUT===
headers.set("Connection", "close");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Keep-Alive\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
Assert.assertEquals("Keep-Alive", headers.get("Connection"));
red_line===
"Keep-Alive"
start_offset===
28
end_offset===
40
Python OUTPUT===
Assert.assertEquals("Keep-Alive", headers.get("Connection"));
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"headers\".
scn.ruleId===
1854
scn.suspCodeStr===
HttpHeaders headers = resp.getHeaders();
red_line===
= resp.getHeaders()
start_offset===
32
end_offset===
51
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(write);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(write); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"database\".
scn.ruleId===
1854
scn.suspCodeStr===
boolean database = influxDbClient.createDatabase();
red_line===
= influxDbClient.createDatabase()
start_offset===
25
end_offset===
58
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
FileOutputStream fout = new FileOutputStream(tofile);
red_line===
new FileOutputStream(tofile)
start_offset===
32
end_offset===
60
Python OUTPUT===
FileOutputStream fout = new FileOutputStream(tofile);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_PUBLIC");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_PUBLIC"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_PROTECTED");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_PROTECTED"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_SUPER");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_SUPER"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"name\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String name;
red_line===
name
start_offset===
19
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
FileOutputStream fout = new FileOutputStream(tofile);
red_line===
new FileOutputStream(tofile)
start_offset===
32
end_offset===
60
Python OUTPUT===
FileOutputStream fout = new FileOutputStream(tofile);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileOutputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
ThreadUtils.sleepQuietly(ThreadLocalRandom.current().nextInt(10), TimeUnit.MILLISECONDS);
red_line===
(ThreadLocalRandom.current()
start_offset===
32
end_offset===
60
Python OUTPUT===
ThreadUtils.sleepQuietly(ThreadLocalRandom.current().nextInt(10), TimeUnit.MILLISECONDS);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"timingArr\" which hides the field declared at line 23.
scn.ruleId===
1117
scn.suspCodeStr===
AtomicIntegerArray timingArr = this.timingArr;
red_line===
timingArr
start_offset===
27
end_offset===
36
Python OUTPUT===
AtomicIntegerArray timingArr = this.timingArr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
int timeCost = sortedRecords._getInt(i++);
red_line===
i
start_offset===
49
end_offset===
50
Python OUTPUT===
int timeCost = sortedRecords._getInt(i++);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
recorder.recordTime(start, start + ThreadLocalRandom.current().nextLong(150000000));
red_line===
r
start_offset===
49
end_offset===
50
Python OUTPUT===
recorder.recordTime(start, start + ThreadLocalRandom.current().nextLong(150000000));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(System.getProperty("line.separator"));
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(System.getProperty("line.separator")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"recorder\" which hides the field declared at line 23.
scn.ruleId===
1117
scn.suspCodeStr===
Recorder recorder = AccurateRecorder.getInstance(1, 1024, 512);
red_line===
recorder
start_offset===
17
end_offset===
25
Python OUTPUT===
Recorder recorder = AccurateRecorder.getInstance(1, 1024, 512);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"permGenMax\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
long permGenUsed = 0L, permGenMax = 0L;
red_line===
permGenMax
start_offset===
31
end_offset===
41
Python OUTPUT===
long permGenUsed = 0L, permGenMax = 0L;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"survivorMax\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
long survivorUsed = 0L, survivorMax = 0L;
red_line===
survivorMax
start_offset===
32
end_offset===
43
Python OUTPUT===
long survivorUsed = 0L, survivorMax = 0L;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"codeCacheMax\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
long codeCacheUsed = 0L, codeCacheMax = 0L;
red_line===
codeCacheMax
start_offset===
33
end_offset===
45
Python OUTPUT===
long codeCacheUsed = 0L, codeCacheMax = 0L;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"start\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i = 0, start = 0;
red_line===
start
start_offset===
19
end_offset===
24
Python OUTPUT===
int i = 0, start = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
dst[dp0++] = (byte) base64[(bits >>> 18) & 0x3f];
red_line===
dp0
start_offset===
24
end_offset===
27
Python OUTPUT===
dst[dp0++] = (byte) base64[(bits >>> 18) & 0x3f];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
dst[dp0++] = (byte) base64[(bits >>> 12) & 0x3f];
red_line===
dp0
start_offset===
24
end_offset===
27
Python OUTPUT===
dst[dp0++] = (byte) base64[(bits >>> 12) & 0x3f];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
dst[dp0++] = (byte) base64[(bits >>> 6) & 0x3f];
red_line===
dp0
start_offset===
24
end_offset===
27
Python OUTPUT===
dst[dp0++] = (byte) base64[(bits >>> 6) & 0x3f];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
dst[dp0++] = (byte) base64[bits & 0x3f];
red_line===
dp0
start_offset===
24
end_offset===
27
Python OUTPUT===
dst[dp0++] = (byte) base64[bits & 0x3f];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(getPrefix(INFO_LEVEL) + msg);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(getPrefix(INFO_LEVEL) + msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(getPrefix(DEBUG_LEVEL) + msg);
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println(getPrefix(DEBUG_LEVEL) + msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(getPrefix(WARN_LEVEL) + msg);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(getPrefix(WARN_LEVEL) + msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(getPrefix(ERROR_LEVEL) + msg);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println(getPrefix(ERROR_LEVEL) + msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(getPrefix(ERROR_LEVEL) + msg + " " + throwable.getMessage());
red_line===
System.err
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.err.println(getPrefix(ERROR_LEVEL) + msg + " " + throwable.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOCALHOST_NAME\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static String LOCALHOST_NAME = "";
red_line===
LOCALHOST_NAME
start_offset===
26
end_offset===
40
Python OUTPUT===
private static String LOCALHOST_NAME = "";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
++i;
red_line===
i
start_offset===
18
end_offset===
19
Python OUTPUT===
++i;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
i = processDescriptor(descriptor, i, sb);
red_line===
i
start_offset===
16
end_offset===
17
Python OUTPUT===
i = processDescriptor(descriptor, i, sb);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
19
end_offset===
23
Python OUTPUT===
return null;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private volatile BufferedWriter bufferedWriter;
red_line===
volatile BufferedWriter
start_offset===
12
end_offset===
35
Python OUTPUT===
private volatile BufferedWriter bufferedWriter;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
boolean delete = targetFile.delete();
red_line===
delete
start_offset===
44
end_offset===
50
Python OUTPUT===
boolean delete = targetFile.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"HTTP_SERVER_CONFIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static HttpServerConfig HTTP_SERVER_CONFIG;
red_line===
HTTP_SERVER_CONFIG
start_offset===
36
end_offset===
54
Python OUTPUT===
private static HttpServerConfig HTTP_SERVER_CONFIG;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"FILTER_CONFIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static FilterConfig FILTER_CONFIG;
red_line===
FILTER_CONFIG
start_offset===
32
end_offset===
45
Python OUTPUT===
private static FilterConfig FILTER_CONFIG;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"INFLUX_DB_CONFIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static InfluxDbConfig INFLUX_DB_CONFIG;
red_line===
INFLUX_DB_CONFIG
start_offset===
34
end_offset===
50
Python OUTPUT===
private static InfluxDbConfig INFLUX_DB_CONFIG;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RECORDER_CONFIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static RecorderConfig RECORDER_CONFIG;
red_line===
RECORDER_CONFIG
start_offset===
34
end_offset===
49
Python OUTPUT===
private static RecorderConfig RECORDER_CONFIG;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(msg);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"finalize\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
super.finalize();
red_line===
finalize
start_offset===
14
end_offset===
22
Python OUTPUT===
 super.finaliz
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\".
scn.ruleId===
3824
scn.suspCodeStr===
List<String> values = headers.get(name);
red_line===
headers.get(name)
start_offset===
30
end_offset===
47
Python OUTPUT===
List < String > values = headers.get ( name ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
22
end_offset===
38
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(mxBean.getObjectName());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(mxBean.getObjectName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
i--;
red_line===
i
start_offset===
12
end_offset===
13
Python OUTPUT===
i--;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract the assignment out of this expression.
scn.ruleId===
1121
scn.suspCodeStr===
return fullUrl = createFullUrl();
red_line===
=
start_offset===
23
end_offset===
24
Python OUTPUT===
return fullUrl = createFullUrl();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"VERSION\"
scn.ruleId===
1700
scn.suspCodeStr===
private static final String VERSION = getVersion(Version.class, "");
red_line===
VERSION
start_offset===
32
end_offset===
39
Python OUTPUT===
private static final String VERSION = getVersion(Version.class, "");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final Encoder encoder = Encoder.RFC4648;
red_line===
encoder
start_offset===
26
end_offset===
33
Python OUTPUT===
private static final Encoder encoder = Encoder . RFC4648 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"cn.myperf4j.config.abc\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
Assert.assertTrue(isMatch("cn.myperf4j.config.abc", "cn.myperf4j*abc"));
red_line===
"cn.myperf4j.config.abc"
start_offset===
34
end_offset===
58
Python OUTPUT===
Assert.assertTrue(isMatch("cn.myperf4j.config.abc", "cn.myperf4j*abc"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
MyProperties.setStr("key", "value");
red_line===
"value"
start_offset===
35
end_offset===
42
Python OUTPUT===
MyProperties.setStr("key", "value");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Service\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
LevelMappingFilter.putLevelMapping("Service", Arrays.asList("*Service", "*ServiceImpl"));
red_line===
"Service"
start_offset===
43
end_offset===
52
Python OUTPUT===
LevelMappingFilter.putLevelMapping("Service", Arrays.asList("*Service", "*ServiceImpl"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(mxBean.getName());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(mxBean.getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
new File(TEMP_FILE).deleteOnExit();
red_line===
new File(T
start_offset===
8
end_offset===
18
Python OUTPUT===
 new File(TEMP_FILE).deleteOnExit(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"abcdef\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Assert.assertTrue(StrMatchUtils.isMatch("abcdef", "ab****c*"));
red_line===
"abcdef"
start_offset===
48
end_offset===
56
Python OUTPUT===
Assert.assertTrue(StrMatchUtils.isMatch("abcdef", "ab****c*"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getProtocol:" + exchange.getProtocol());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getProtocol:" + exchange.getProtocol()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getRequestMethod:" + exchange.getRequestMethod());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getRequestMethod:" + exchange.getRequestMethod()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getResponseCode:" + exchange.getResponseCode());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getResponseCode:" + exchange.getResponseCode()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("context.getPath:" + context.getPath());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("context.getPath:" + context.getPath()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("context.toString:" + context.toString());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("context.toString:" + context.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("context.getAttributes：" + context.getAttributes());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("context.getAttributes：" + context.getAttributes()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("context.getAuthenticator：" + context.getAuthenticator());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("context.getAuthenticator：" + context.getAuthenticator()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("context.getFilters：" + context.getFilters());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("context.getFilters：" + context.getFilters()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("context.getHandler：" + context.getHandler());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("context.getHandler：" + context.getHandler()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("context.getServer：" + context.getServer());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("context.getServer：" + context.getServer()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getLocalAddress:" + exchange.getLocalAddress());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getLocalAddress:" + exchange.getLocalAddress()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getRemoteAddress:" + exchange.getRemoteAddress());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getRemoteAddress:" + exchange.getRemoteAddress()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getAuthority:" + uri.getAuthority());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getAuthority:" + uri.getAuthority()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getFragment:" + uri.getFragment());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getFragment:" + uri.getFragment()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getHost:" + uri.getHost());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getHost:" + uri.getHost()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getPath:" + uri.getPath());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getPath:" + uri.getPath()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getQuery:" + uri.getQuery());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getQuery:" + uri.getQuery()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getRawAuthority:" + uri.getRawAuthority());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getRawAuthority:" + uri.getRawAuthority()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getRawFragment:" + uri.getRawFragment());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getRawFragment:" + uri.getRawFragment()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getRawPath:" + uri.getRawPath());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getRawPath:" + uri.getRawPath()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getRawQuery:" + uri.getRawQuery());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getRawQuery:" + uri.getRawQuery()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getRawSchemeSpecificPart:" + uri.getRawSchemeSpecificPart());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getRawSchemeSpecificPart:" + uri.getRawSchemeSpecificPart()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getRawUserInfo:" + uri.getRawUserInfo());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getRawUserInfo:" + uri.getRawUserInfo()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getScheme:" + uri.getScheme());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getScheme:" + uri.getScheme()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getSchemeSpecificPart:" + uri.getSchemeSpecificPart());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getSchemeSpecificPart:" + uri.getSchemeSpecificPart()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getUserInfo:" + uri.getUserInfo());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getUserInfo:" + uri.getUserInfo()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("uri.getPort:" + uri.getPort());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("uri.getPort:" + uri.getPort()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getRequestBody:" + InputStreamUtils.toString(exchange.getRequestBody()));
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getRequestBody:" + InputStreamUtils.toString(exchange.getRequestBody())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getResponseBody:" + responseBody);
red_line===
System.out
start_offset===
16
end_offset===
26
Python OUTPUT===
 System.out.println("getResponseBody:" + responseBody); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("getResponseHeaders:" + exchange.getResponseHeaders());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("getResponseHeaders:" + exchange.getResponseHeaders()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ResponseCode:" + exchange.getResponseCode());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ResponseCode:" + exchange.getResponseCode()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(params);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(params); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"http://localhost:8086/write?k1\u003dv1\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Assert.assertEquals("http://localhost:8086/write?k1=v1", req0.getFullUrl());
red_line===
"http://localhost:8086/write?k1=v1"
start_offset===
28
end_offset===
63
Python OUTPUT===
Assert.assertEquals("http://localhost:8086/write?k1=v1", req0.getFullUrl());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Keep-Alive\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.set("Connection", "Keep-Alive");
red_line===
"Keep-Alive"
start_offset===
34
end_offset===
46
Python OUTPUT===
headers.set("Connection", "Keep-Alive");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Dispatcher.dispatch(): request.body=" + new String(request.getBody()));
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 System.out.println("Dispatcher.dispatch(): request.body=" + new String(request.getBody())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Status=" + resp.getStatus());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("Status=" + resp.getStatus()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Connection=" + headers.get("Connection"));
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("Connection=" + headers.get("Connection")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(resp.getBodyString());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println(resp.getBodyString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
12
end_offset===
22
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(database);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(database); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("initASMBootstrap=" + initASMBootstrap);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("initASMBootstrap=" + initASMBootstrap); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"analysisClass\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Class<?> analysisClass;
red_line===
analysisClass
start_offset===
21
end_offset===
34
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Foo.test1()");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Foo.test1()"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"timeVar\" which hides the field declared at line 15.
scn.ruleId===
1117
scn.suspCodeStr===
int timeVar = newLocal(Type.getType("J"));
red_line===
timeVar
start_offset===
12
end_offset===
19
Python OUTPUT===
int timeVar = newLocal(Type.getType("J"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"timeVar\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int timeVar;
red_line===
timeVar
start_offset===
16
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_PRIVATE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_PRIVATE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_FINAL");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_FINAL"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_SYNCHRONIZED");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_SYNCHRONIZED"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_TRANSITIVE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_TRANSITIVE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_VOLATILE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_VOLATILE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_BRIDGE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_BRIDGE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_STATIC_PHASE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_STATIC_PHASE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_VARARGS");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_VARARGS"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_TRANSIENT");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_TRANSIENT"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_NATIVE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_NATIVE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_INTERFACE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_INTERFACE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_ABSTRACT");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_ABSTRACT"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_STRICT");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_STRICT"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_SYNTHETIC");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_SYNTHETIC"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_ANNOTATION");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_ANNOTATION"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_MANDATED");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_MANDATED"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_MODULE");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_MODULE"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ACC_DEPRECATED");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("ACC_DEPRECATED"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
    e.prin
start_offset===
12
end_offset===
22
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
    e.prin
start_offset===
12
end_offset===
22
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"desc\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private String desc;
red_line===
desc
start_offset===
19
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
19
end_offset===
23
Python OUTPUT===
return null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
Object obj = aClass.newInstance();
red_line===
newInstance
start_offset===
36
end_offset===
47
Python OUTPUT===
 Object obj = aClass.newInstance(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"timingArr\" which hides the field declared at line 23.
scn.ruleId===
1117
scn.suspCodeStr===
AtomicIntegerArray timingArr = this.timingArr;
red_line===
timingArr
start_offset===
27
end_offset===
36
Python OUTPUT===
AtomicIntegerArray timingArr = this.timingArr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"timingArr\" which hides the field declared at line 23.
scn.ruleId===
1117
scn.suspCodeStr===
AtomicIntegerArray timingArr = this.timingArr;
red_line===
timingArr
start_offset===
27
end_offset===
36
Python OUTPUT===
AtomicIntegerArray timingArr = this.timingArr;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private volatile Recorders curRecorders;
red_line===
volatile Recorders
start_offset===
12
end_offset===
30
Python OUTPUT===
private volatile Recorders curRecorders;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract the assignment out of this expression.
scn.ruleId===
1121
scn.suspCodeStr===
return initialState = initOther();
red_line===
=
start_offset===
28
end_offset===
29
Python OUTPUT===
return initialState = initOther();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"recorderArr\" which hides the field declared at line 11.
scn.ruleId===
1117
scn.suspCodeStr===
AtomicReferenceArray<Recorder> recorderArr = this.recorderArr;
red_line===
recorderArr
start_offset===
39
end_offset===
50
Python OUTPUT===
AtomicReferenceArray<Recorder> recorderArr = this.recorderArr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"timingArr\" which hides the field declared at line 25.
scn.ruleId===
1117
scn.suspCodeStr===
AtomicIntegerArray timingArr = this.timingArr;
red_line===
timingArr
start_offset===
27
end_offset===
36
Python OUTPUT===
AtomicIntegerArray timingArr = this.timingArr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"timingMap\" which hides the field declared at line 27.
scn.ruleId===
1117
scn.suspCodeStr===
ConcurrentHashMap<Integer, AtomicInteger> timingMap = this.timingMap;
red_line===
timingMap
start_offset===
50
end_offset===
59
Python OUTPUT===
ConcurrentHashMap<Integer, AtomicInteger> timingMap = this.timingMap;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"timingArr\" which hides the field declared at line 25.
scn.ruleId===
1117
scn.suspCodeStr===
AtomicIntegerArray timingArr = this.timingArr;
red_line===
timingArr
start_offset===
27
end_offset===
36
Python OUTPUT===
AtomicIntegerArray timingArr = this.timingArr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
int count = sortedRecords._getInt(i++);
red_line===
i
start_offset===
46
end_offset===
47
Python OUTPUT===
int count = sortedRecords._getInt(i++);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(System.getProperty("os.name"));
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(System.getProperty("os.name")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(System.getProperty("file.separator"));
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(System.getProperty("file.separator")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(System.getProperty("path.separator"));
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(System.getProperty("path.separator")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("tmp=" + tmp + ", totalCost=" + (System.nanoTime() - start) / 1000_000 + "ms");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("tmp=" + tmp + ", totalCost=" + (System.nanoTime() - start) / 1000_000 + "ms"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(methodMetrics);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(methodMetrics); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(methodMetrics);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(methodMetrics); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(methodMetrics);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(methodMetrics); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(methodMetrics);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(methodMetrics); 
isFixed===
false
==================
