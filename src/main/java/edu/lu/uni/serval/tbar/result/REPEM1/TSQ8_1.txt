RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"GET /jwt/response_cookie.php HTTP/1.1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("GET /jwt/response_cookie.php HTTP/1.1");
red_line===
"GET /jwt/response_cookie.php HTTP/1.1"
start_offset===
14
end_offset===
53
Python OUTPUT===
 headers.add("GET /jwt/response_cookie.php HTTP/1.1"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String rs256_token_pub="-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAss7FTpt5OpOsNbb5bfmLZnn0D7NzkxqWn4s2r3ZkPcDFMLF4/31sJHCdNkiavFaM7w+DfuSXb0rSQ1Eh/WX9UPR/BN0a8BRzogfzcXOekt4DdnLZibkYtcBfg519tbNVu6geuYi4QbwXrtJUfEAGSbvC3F11aO/qtPHJiwC5XHLgA8kteVXNgto6IBmq2bio9kKMVtceNjxGm6PnH9jBWB3cnlHYipg6hZlqfkiw8sF7UosfTqGn4ibTNUxNVNQw3K5w9S9YylaNq5HOVeHX1egz0aokkXoNwjV/31kG+SQq7MKiJ/PlCPbzY5e3++chEAg6dMKI/FOmIJIwbw1rHwIDAQAB-----END PUBLIC KEY-----";
red_line===
rs256_token_pub
start_offset===
28
end_offset===
43
Python OUTPUT===
 public static final String rs256_token_pub="-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAss7FTpt5OpOsNbb5bfmLZnn0D7NzkxqWn4s2r3ZkPcDFMLF4/31sJHCdNkiavFaM7w+DfuSXb0rSQ1Eh/WX9UPR/BN0a8BRzogfzcXOekt4DdnLZibkYtcBfg519tbNVu6geuYi4QbwXrtJUfEAGSbvC3F11aO/qtPHJiwC5XHLgA8kteVXNgto6IBmq2bio9kKMVtceNjxGm6PnH9jBWB3cnlHYipg6hZlqfkiw8sF7UosfTqGn4ibTNUxNVNQw3K5w9S9YylaNq5HOVeHX1egz0aokkXoNwjV/31kG+SQq7MKiJ/PlCPbzY5e3++chEAg6dMKI/FOmIJIwbw1rHwIDAQAB-----END PUBLIC KEY-----"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String rs256_token_priv="-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEAss7FTpt5OpOsNbb5bfmLZnn0D7NzkxqWn4s2r3ZkPcDFMLF4/31sJHCdNkiavFaM7w+DfuSXb0rSQ1Eh/WX9UPR/BN0a8BRzogfzcXOekt4DdnLZibkYtcBfg519tbNVu6geuYi4QbwXrtJUfEAGSbvC3F11aO/qtPHJiwC5XHLgA8kteVXNgto6IBmq2bio9kKMVtceNjxGm6PnH9jBWB3cnlHYipg6hZlqfkiw8sF7UosfTqGn4ibTNUxNVNQw3K5w9S9YylaNq5HOVeHX1egz0aokkXoNwjV/31kG+SQq7MKiJ/PlCPbzY5e3++chEAg6dMKI/FOmIJIwbw1rHwIDAQABAoIBAGBQ7QtoyCZ7gVn10+ofb62lp4gFnA3zVoteS/i8B0cUXaPbFVhaUTRXzPd+qIsm/AeSDbz+mWwDm7tTKsH6fDdtXDZce7Qy8A6pxcKpCxQFr0vQlcmQAPV2SHz3Cs4jad0JtHMwaEBQd1leRtAfFMQG9fIKDcKW6ZDKZUwQ+cgH2XRFbEYtEgrw/G5+ZCwk7lENJCRVIqOGZH5ZmSrIgeEJP1sZgt1+qMDzDSiVV0EHdH07n/5SNuPawazSCa8/NOcpSyADdD3mJ6NN1icS6NAYeFS2mEecx5Wh3Dsx01E1YpdcF2m+nvuWqIlIl8DX1P9cs8fg1qJbedUXE21hg1ECgYEA7AJug9W1Xqt/fFhHCNGaILznsGCKS5FHzm6zOOHX1cH9zjXLl0Ywvv2ioX0utlOk5KxPUwxKTUvg1cvZ0WsJWckgcfkvKxZ/mfT3E56Ocf8i/Ra1R7dF0V+quXE0uNHvfQGyGqU8d6BkDXE3TFFkxzdcoBx1uvk1K8HOxsNtSBsCgYEAwfP9eWOguLFN9C/KuUbeGsRNO1rfQcPL2F8T7W5NaBKZl5f85KuG7JaSA7s4aIpSuACTGYE6AS/4AiShadjf+HXqXcTxBUWJyFoa+Py7Qfb1a4sPOQUnz/CXukiBSHXWmNqVbuKODu6ARmFoHUd0KvK4fPilOnmCfgVbjMtd4U0CgYEA6ltHztYKMiXuhFVMxG8Os++hyj0zVvK+8Thv884f+32VQI2ey2rBwQYv1lhuaFMK7KBGbNtJdRQiAWtZsmCtemEEPOkKc6j1sLXWG79ZB84oulUwUjSludFbwKWvis+9Fs72QwtNziSQ9eA03y37+u74pW1dYvtQV1EuuaUaAX0CgYEAwBFjPkbO7peG3v5E/12SrWcgJFtFI9dFkqv1C/djaGCjAWBd7AWAw+IIDvHkVoJEkDrhcSxryKk8LMMhpbRDd8UtplZVaCcI3wN8Gn4M4rIxL6KyHIFif6V+W9dZT+yB6zTrLrfkfhzposjrVbNg8vcSg4+n8FRMSYf8tVzfRzECgYAcsA/jdZthHEN6P0FycbAL4ALcCK1AcBVwdyrPjOm3sJ+7j0AoIRT9UlIyZ8xhtC3EX2iURJKlENdAnPQYThR+kCWGJq4CHhod9RhJgXzDyYYxyGcLBKTBcXjzZpx0jSguk3UobMdXgL2kG70tfwt1Y1b201OJmOLTg8sFmTYJRA==-----END RSA PRIVATE KEY-----";
red_line===
rs256_token_priv
start_offset===
28
end_offset===
44
Python OUTPUT===
 public static final String rs256_token_priv="-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEAss7FTpt5OpOsNbb5bfmLZnn0D7NzkxqWn4s2r3ZkPcDFMLF4/31sJHCdNkiavFaM7w+DfuSXb0rSQ1Eh/WX9UPR/BN0a8BRzogfzcXOekt4DdnLZibkYtcBfg519tbNVu6geuYi4QbwXrtJUfEAGSbvC3F11aO/qtPHJiwC5XHLgA8kteVXNgto6IBmq2bio9kKMVtceNjxGm6PnH9jBWB3cnlHYipg6hZlqfkiw8sF7UosfTqGn4ibTNUxNVNQw3K5w9S9YylaNq5HOVeHX1egz0aokkXoNwjV/31kG+SQq7MKiJ/PlCPbzY5e3++chEAg6dMKI/FOmIJIwbw1rHwIDAQABAoIBAGBQ7QtoyCZ7gVn10+ofb62lp4gFnA3zVoteS/i8B0cUXaPbFVhaUTRXzPd+qIsm/AeSDbz+mWwDm7tTKsH6fDdtXDZce7Qy8A6pxcKpCxQFr0vQlcmQAPV2SHz3Cs4jad0JtHMwaEBQd1leRtAfFMQG9fIKDcKW6ZDKZUwQ+cgH2XRFbEYtEgrw/G5+ZCwk7lENJCRVIqOGZH5ZmSrIgeEJP1sZgt1+qMDzDSiVV0EHdH07n/5SNuPawazSCa8/NOcpSyADdD3mJ6NN1icS6NAYeFS2mEecx5Wh3Dsx01E1YpdcF2m+nvuWqIlIl8DX1P9cs8fg1qJbedUXE21hg1ECgYEA7AJug9W1Xqt/fFhHCNGaILznsGCKS5FHzm6zOOHX1cH9zjXLl0Ywvv2ioX0utlOk5KxPUwxKTUvg1cvZ0WsJWckgcfkvKxZ/mfT3E56Ocf8i/Ra1R7dF0V+quXE0uNHvfQGyGqU8d6BkDXE3TFFkxzdcoBx1uvk1K8HOxsNtSBsCgYEAwfP9eWOguLFN9C/KuUbeGsRNO1rfQcPL2F8T7W5NaBKZl5f85KuG7JaSA7s4aIpSuACTGYE6AS/4AiShadjf+HXqXcTxBUWJyFoa+Py7Qfb1a4sPOQUnz/CXukiBSHXWmNqVbuKODu6ARmFoHUd0KvK4fPilOnmCfgVbjMtd4U0CgYEA6ltHztYKMiXuhFVMxG8Os++hyj0zVvK+8Thv884f+32VQI2ey2rBwQYv1lhuaFMK7KBGbNtJdRQiAWtZsmCtemEEPOkKc6j1sLXWG79ZB84oulUwUjSludFbwKWvis+9Fs72QwtNziSQ9eA03y37+u74pW1dYvtQV1EuuaUaAX0CgYEAwBFjPkbO7peG3v5E/12SrWcgJFtFI9dFkqv1C/djaGCjAWBd7AWAw+IIDvHkVoJEkDrhcSxryKk8LMMhpbRDd8UtplZVaCcI3wN8Gn4M4rIxL6KyHIFif6V+W9dZT+yB6zTrLrfkfhzposjrVbNg8vcSg4+n8FRMSYf8tVzfRzECgYAcsA/jdZthHEN6P0FycbAL4ALcCK1AcBVwdyrPjOm3sJ+7j0AoIRT9UlIyZ8xhtC3EX2iURJKlENdAnPQYThR+kCWGJq4CHhod9RhJgXzDyYYxyGcLBKTBcXjzZpx0jSguk3UobMdXgL2kG70tfwt1Y1b201OJmOLTg8sFmTYJRA==-----END RSA PRIVATE KEY-----"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Accept: text/html,application/xhtml+xml,application/xml;q\u003d0.9,*/*;q\u003d0.8\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
red_line===
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
start_offset===
14
end_offset===
87
Python OUTPUT===
 headers.add("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Accept-Language: en-US,en;q\u003d0.5\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Accept-Language: en-US,en;q=0.5");
red_line===
"Accept-Language: en-US,en;q=0.5"
start_offset===
14
end_offset===
47
Python OUTPUT===
 headers.add("Accept-Language: en-US,en;q=0.5"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Cookie: token\u003d\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Cookie: token="+TestTokens.hs256_token+"; othercookie=1234");
red_line===
"Cookie: token="
start_offset===
14
end_offset===
30
Python OUTPUT===
 headers.add("Cookie: token="+TestTokens.hs256_token+"; othercookie=1234"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Set-Cookie: token\u003d\" 12 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Set-Cookie: token="+TestTokens.hs256_token);
red_line===
"Set-Cookie: token="
start_offset===
14
end_offset===
34
Python OUTPUT===
 headers.add("Set-Cookie: token="+TestTokens.hs256_token); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> toOverwriteHeaders = new ArrayList<String>();
red_line===
<String>
start_offset===
49
end_offset===
57
Python OUTPUT===
\u003c\u003e toOverwriteHeaders = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ArrayList<String>();
red_line===
<String>
start_offset===
23
end_offset===
31
Python OUTPUT===
\u003c\u003e String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
String split[] = StringUtils.split(body);
red_line===
[]
start_offset===
14
end_offset===
16
Python OUTPUT===
 String split[] = StringUtils.split(body); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"body\"
scn.ruleId===
1700
scn.suspCodeStr===
private String body;
red_line===
body
start_offset===
16
end_offset===
20
Python OUTPUT===
 private String body; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Upgrade-Insecure-Requests: 1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Upgrade-Insecure-Requests: 1");
red_line===
"Upgrade-Insecure-Requests: 1"
start_offset===
14
end_offset===
44
Python OUTPUT===
 headers.add("Upgrade-Insecure-Requests: 1"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use \"Arrays.toString(array)\" instead.
scn.ruleId===
2116
scn.suspCodeStr===
Output.outputError(e.getStackTrace().toString());
red_line===
toString
start_offset===
41
end_offset===
49
Python OUTPUT===
 Output.outputError(e.getStackTrace().toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"dontModify\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private boolean dontModify;
red_line===
dontModify
start_offset===
17
end_offset===
27
Python OUTPUT===
 private boolean ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
@Override
			public void changedUpdate(DocumentEvent e) {}
red_line===
changedUpdate
start_offset===
15
end_offset===
28
Python OUTPUT===
 @Override public void changedUpdate(DocumentEvent e) {} 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(msg);
red_line===
System.out
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.out.println(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(msg);
red_line===
System.err
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.err.println(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private ArrayList<JWTTabModel> modelStateList = new ArrayList<JWTTabModel>();
red_line===
<JWTTabModel>
start_offset===
62
end_offset===
75
Python OUTPUT===
\u003c\u003e > modelStateList = new ArrayList < JWTTabModel > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case DELETE_CURR:
red_line===
case DELETE_CURR:
start_offset===
2
end_offset===
19
Python OUTPUT===
 case DELETE_CURR: 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"out\" which hides the field declared at line 79.
scn.ruleId===
1117
scn.suspCodeStr===
ByteArrayOutputStream out = new ByteArrayOutputStream();
red_line===
out
start_offset===
24
end_offset===
27
Python OUTPUT===
 ByteArrayOutputStream oout= new ByteArrayOutputStream(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static stderr\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static PrintWriter stderr;
red_line===
stderr
start_offset===
27
end_offset===
33
Python OUTPUT===
public static final PrintWriter stderr ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static stdout\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static PrintWriter stdout;
red_line===
stdout
start_offset===
27
end_offset===
33
Python OUTPUT===
public static final PrintWriter stdout ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static final String[] keyEndMarkers = new String[]{"-----END PUBLIC KEY-----","-----END CERTIFICATE-----"};
red_line===
keyEndMarkers
start_offset===
30
end_offset===
43
Python OUTPUT===
protected static final String [ ] keyEndMarkers = new String [ ] { " -----END PUBLIC KEY----- " , " -----END CERTIFICATE----- " } ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static final String[] keyBeginMarkers = new String[]{"-----BEGIN PUBLIC KEY-----","-----BEGIN CERTIFICATE-----"};
red_line===
keyBeginMarkers
start_offset===
30
end_offset===
45
Python OUTPUT===
protected static final String [ ] keyBeginMarkers = new String [ ] { " -----BEGIN PUBLIC KEY----- " , " -----BEGIN CERTIFICATE----- " } ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_creditButton = new GridBagConstraints();
red_line===
gbc_creditButton
start_offset===
21
end_offset===
37
Python OUTPUT===
 GridBagConstraints gbc_creditButton = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_rdbtnDontModifySignature = new GridBagConstraints();
red_line===
gbc_rdbtnDontModifySignature
start_offset===
21
end_offset===
49
Python OUTPUT===
 GridBagConstraints gbc_rdbtnDontModifySignature = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"separator\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private JSeparator separator;
red_line===
separator
start_offset===
20
end_offset===
29
Python OUTPUT===
 private JSeparator ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_jwtArea = new GridBagConstraints();
red_line===
gbc_jwtArea
start_offset===
21
end_offset===
32
Python OUTPUT===
 GridBagConstraints gbc_jwtArea = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"lblSecretKey\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private JLabel lblSecretKey;
red_line===
lblSecretKey
start_offset===
16
end_offset===
28
Python OUTPUT===
 private JLabel ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_inputLabel1 = new GridBagConstraints();
red_line===
gbc_inputLabel1
start_offset===
21
end_offset===
36
Python OUTPUT===
 GridBagConstraints gbc_inputLabel1 = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Tahoma\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
keyLabel.setFont(new Font("Tahoma", Font.BOLD, 12));
red_line===
"Tahoma"
start_offset===
28
end_offset===
36
Python OUTPUT===
 keyLabel.setFont(new Font("Tahoma", Font.BOLD, 12)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_inputField1 = new GridBagConstraints();
red_line===
gbc_inputField1
start_offset===
21
end_offset===
36
Python OUTPUT===
 GridBagConstraints gbc_inputField1 = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String verificationInvalidClaim = "Not all Claims accepted";
red_line===
verificationInvalidClaim
start_offset===
28
end_offset===
52
Python OUTPUT===
 public static final String verificationInvalidClaim = "Not all Claims accepted"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
java.util.Date time = new java.util.Date((long) expUT * 1000);
red_line===
long
start_offset===
46
end_offset===
50
Python OUTPUT===
 java.util.Date time = new java.util.Date((lonxpUT * 1000); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
java.util.Date time = new java.util.Date((long) nbfUT * 1000);
red_line===
long
start_offset===
46
end_offset===
50
Python OUTPUT===
 java.util.Date time = new java.util.Date((lonbfUT * 1000); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
java.util.Date time = new java.util.Date((long) iatUT * 1000);
red_line===
long
start_offset===
46
end_offset===
50
Python OUTPUT===
 java.util.Date time = new java.util.Date((lonatUT * 1000); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private List<TimeClaim> timeClaimList = new ArrayList<TimeClaim>();
red_line===
<TimeClaim>
start_offset===
54
end_offset===
65
Python OUTPUT===
\u003c\u003e > timeClaimList = new ArrayList < TimeClaim > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"jsonMinify\".
scn.ruleId===
1488
scn.suspCodeStr===
String jsonMinify = new Minify().minify(json);
red_line===
new Minify().minify(json)
start_offset===
23
end_offset===
48
Python OUTPUT===
 String jsonMinify = new Minify().minify(json); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String keepOriginalSignatureToolTip = "The signature originally sent will be preserved and sent unchanged";
red_line===
keepOriginalSignatureToolTip
start_offset===
28
end_offset===
56
Python OUTPUT===
 public static final String keepOriginalSignatureToolTip = "The signature originally sent will be preserved and sent unchanged"; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"b64()\".
scn.ruleId===
2259
scn.suspCodeStr===
byte[] headerBytes = b64(jsonMinify(getHeaderJson())).getBytes(StandardCharsets.UTF_8);
red_line===
b64
start_offset===
24
end_offset===
27
Python OUTPUT===
 byte[] headerBytes = b64(jsonMinify(getHeaderJson())).getBytes(StandardCharsets.UTF_8); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String tabname = "JSON Web Tokens";
red_line===
tabname
start_offset===
28
end_offset===
35
Python OUTPUT===
 public static final String tabname = "JSON Web Tokens"; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"b64()\".
scn.ruleId===
2259
scn.suspCodeStr===
String content = String.format("%s.%s", b64(jsonMinify(getHeaderJson())),
					b64(jsonMinify((getPayloadJson()))));
red_line===
b64
start_offset===
5
end_offset===
8
Python OUTPUT===
 String content = String.format("%s.%s", b64(jsonMinify(getHeaderJson())), b64(jsonMinify((getPayloadJson())))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make chooseSignatureToolTip a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String chooseSignatureToolTip = "Load the secret / key from a file chosen by your OS file picker";
red_line===
chooseSignatureToolTip
start_offset===
22
end_offset===
44
Python OUTPUT===
public static final String chooseSignatureToolTip = " Load the secret / key from a file chosen by your OS file picker " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make publicKey a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String publicKey;
red_line===
publicKey
start_offset===
22
end_offset===
31
Python OUTPUT===
public static final String publicKey ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String none = "none";
red_line===
static
start_offset===
14
end_offset===
20
Python OUTPUT===
public static final String none = " none " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Cannot get random key of provided algorithm as it does not seem valid HS, RS or ES");
red_line===
RuntimeException
start_offset===
12
end_offset===
28
Python OUTPUT===
 throw new RuntimeException("Cannot get random key of provided algorithm as it does not seem valid HS, RS or ES"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("This JAR is meant to be run through BURP extender");
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("This JAR is meant to be run through BURP extender"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
selectedText=new String(ihrr.getRequest()).substring(selection[0], selection[1]);
red_line===
String
start_offset===
21
end_offset===
27
Python OUTPUT===
 selectedText=new Strrr.getRequest()).substring(selection[0], selection[1]); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<JMenuItem> menuItems = new ArrayList<JMenuItem>();
red_line===
<JMenuItem>
start_offset===
43
end_offset===
54
Python OUTPUT===
\u003c\u003e menuItems = new ArrayList < JMenuItem > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Tahoma\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
lblPasteJwtToken.setFont(new Font("Tahoma", Font.BOLD, 12));
red_line===
"Tahoma"
start_offset===
36
end_offset===
44
Python OUTPUT===
 lblPasteJwtToken.setFont(new Font("Tahoma", Font.BOLD, 12)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"outputLabel\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private JLabel outputLabel;
red_line===
outputLabel
start_offset===
16
end_offset===
27
Python OUTPUT===
 private JLabel ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String contextMenuString = "Send selected text to JSON Web Tokens Tab to decode";
red_line===
contextMenuString
start_offset===
28
end_offset===
45
Python OUTPUT===
 public static final String contextMenuString = "Send selected text to JSON Web Tokens Tab to decode"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String tokenStateUpdated = "Token updated";
red_line===
tokenStateUpdated
start_offset===
28
end_offset===
45
Python OUTPUT===
 public static final String tokenStateUpdated = "Token updated"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String dontModifyToolTip ="The signature will be taken straight out of the editable field to the left";
red_line===
dontModifyToolTip
start_offset===
28
end_offset===
45
Python OUTPUT===
 public static final String dontModifyToolTip ="The signature will be taken straight out of the editable field to the left"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String dontModify = "Do not automatically modify signature";
red_line===
dontModify
start_offset===
28
end_offset===
38
Python OUTPUT===
 public static final String dontModify = "Do not automatically modify signature"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String randomKey = "Sign with random key pair";
red_line===
randomKey
start_offset===
28
end_offset===
37
Python OUTPUT===
 public static final String randomKey = "Sign with random key pair"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String tokenStateOriginal = "Original";
red_line===
tokenStateOriginal
start_offset===
28
end_offset===
46
Python OUTPUT===
 public static final String tokenStateOriginal = "Original"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String enterJWT = "Enter JWT";
red_line===
enterJWT
start_offset===
28
end_offset===
36
Python OUTPUT===
 public static final String enterJWT = "Enter JWT"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String decodedJWT = "Decoded JWT";
red_line===
decodedJWT
start_offset===
28
end_offset===
38
Python OUTPUT===
 public static final String decodedJWT = "Decoded JWT"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String randomKeyToolTip = "<html>The signature will be recalculated depending<br>on the content and algorithm set<br>by a random signature / key</html>";
red_line===
randomKeyToolTip
start_offset===
28
end_offset===
44
Python OUTPUT===
 public static final String randomKeyToolTip = "<html>The signature will be recalculated depending<br>on the content and algorithm set<br>by a random signature + key<+html>"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Connection: close\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Connection: close");
red_line===
"Connection: close"
start_offset===
14
end_offset===
33
Python OUTPUT===
 headers.add("Connection: close"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Upgrade-Insecure-Requests: 1\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Upgrade-Insecure-Requests: 1");
red_line===
"Upgrade-Insecure-Requests: 1"
start_offset===
14
end_offset===
44
Python OUTPUT===
 headers.add("Upgrade-Insecure-Requests: 1"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
selectedText=new String(ihrr.getResponse()).substring(selection[0], selection[1]);
red_line===
String
start_offset===
21
end_offset===
27
Python OUTPUT===
 selectedText=new Strrr.getResponse()).substring(selection[0], selection[1]); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String hs256_token_2="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ik1heCBNdXN0ZXJsaSIsImFkbWluIjp0cnVlfQ.9o7iXB3CEm8ciIJjc_yZPI49p7gSKX6zDddr3Gp5_hU";
red_line===
hs256_token_2
start_offset===
28
end_offset===
41
Python OUTPUT===
 public static final String hs256_token_2="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ik1heCBNdXN0ZXJsaSIsImFkbWluIjp0cnVlfQ.9o7iXB3CEm8ciIJjc_yZPI49p7gSKX6zDddr3Gp5_hU"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String hs256_token="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ";
red_line===
hs256_token
start_offset===
28
end_offset===
39
Python OUTPUT===
 public static final String hs256_token="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String es256_token_pub="-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9q9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==-----END PUBLIC KEY-----";
red_line===
es256_token_pub
start_offset===
28
end_offset===
43
Python OUTPUT===
 public static final String es256_token_pub="-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9q9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==-----END PUBLIC KEY-----"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static List<String> tokenKeywords = Arrays.asList("id_token", "ID_TOKEN", "access_token", "token");
red_line===
tokenKeywords
start_offset===
28
end_offset===
41
Python OUTPUT===
protected static List < String > tokenKeywords = Arrays . asList ( " id_token " , " ID_TOKEN " , " access_token " , " token " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<KeyValuePair> postParameterList = new ArrayList<KeyValuePair>();
red_line===
<KeyValuePair>
start_offset===
54
end_offset===
68
Python OUTPUT===
\u003c\u003e postParameterList = new ArrayList < KeyValuePair > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String invalid_token="eyJhbFbiOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjYZgeFONFh7HgQ";
red_line===
invalid_token
start_offset===
28
end_offset===
41
Python OUTPUT===
 public static final String invalid_token="eyJhbFbiOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjYZgeFONFh7HgQ"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String rs256_token="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJSUzI1NmluT1RBIiwibmFtZSI6IkpvaG4gRG9lIn0.VnF6UI5CHgOcg4T-k04xWLy5DW_-BiH75ccS9EpF1KP-5QAPKSqhls558cSa2DBPj5yeoFql9DFZ9H_mthbtz_HSfQ1DEDviP5mVfx9c5scEE9ebCaz9a5fQ_2uS2urh6HFTV7kGzjRqKJOCmB6gqtgGsPioDtrWU4o9mlqCh7k3meKTk5AJjeULgts96H2or4P9SUPXmI4Bv97bfSoj8LD3aHgI5FeKBU1KBEDFgDwy3WSI-SBlkf-43EQZwMgIvSVgqY9VXkJnS2aeu76oRn1MzpJBxWVRQaBrTZRnB0CCt3JjtK1QtIGHkl-M9-bVviQ-XtVqp52-DPG2GZFpqQ";
red_line===
rs256_token
start_offset===
28
end_offset===
39
Python OUTPUT===
 public static final String rs256_token="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJSUzI1NmluT1RBIiwibmFtZSI6IkpvaG4gRG9lIn0.VnF6UI5CHgOcg4T-k04xWLy5DW_-BiH75ccS9EpF1KP-5QAPKSqhls558cSa2DBPj5yeoFql9DFZ9H_mthbtz_HSfQ1DEDviP5mVfx9c5scEE9ebCaz9a5fQ_2uS2urh6HFTV7kGzjRqKJOCmB6gqtgGsPioDtrWU4o9mlqCh7k3meKTk5AJjeULgts96H2or4P9SUPXmI4Bv97bfSoj8LD3aHgI5FeKBU1KBEDFgDwy3WSI-SBlkf-43EQZwMgIvSVgqY9VXkJnS2aeu76oRn1MzpJBxWVRQaBrTZRnB0CCt3JjtK1QtIGHkl-M9-bVviQ-XtVqp52-DPG2GZFpqQ"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String es256_token="eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.tyh-VfuzIxCyGYDlkBA7DfyjrqmSHu6pQ2hoZuFqUSLPNY2N0mpHb3nk5K17HWP_3cYHBw7AhHale5wky6-sVA";
red_line===
es256_token
start_offset===
28
end_offset===
39
Python OUTPUT===
 public static final String es256_token="eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.tyh-VfuzIxCyGYDlkBA7DfyjrqmSHu6pQ2hoZuFqUSLPNY2N0mpHb3nk5K17HWP_3cYHBw7AhHale5wky6-sVA"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> headers = new ArrayList<String>();
red_line===
<String>
start_offset===
38
end_offset===
46
Python OUTPUT===
\u003c\u003e headers = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.
scn.ruleId===
1186
scn.suspCodeStr===
@Override
			public void changedUpdate(DocumentEvent e) {}
red_line===
changedUpdate
start_offset===
15
end_offset===
28
Python OUTPUT===
 @Override public void changedUpdate(DocumentEvent e) {} 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"randomKey\" which hides the field declared at line 51.
scn.ruleId===
1117
scn.suspCodeStr===
String randomKey = AlgorithmLinker.getRandomKey(token.getAlgorithm());
red_line===
randomKey
start_offset===
12
end_offset===
21
Python OUTPUT===
 String randrandomKeylgorithmLinker.getRandomKey(token.getAlgorithm()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case OUTPUT_CURR:
red_line===
case OUTPUT_CURR:
start_offset===
2
end_offset===
19
Python OUTPUT===
 case OUTPUT_CURR: 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" and column \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
super("Unterminated comment at line " + line + " and column " + column);
red_line===
" and column "
start_offset===
50
end_offset===
64
Python OUTPUT===
 super("Unterminated comment at line " + line + " and column " + column); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"token\u003d\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String body = "token="+TestTokens.hs256_token;
red_line===
"token="
start_offset===
16
end_offset===
24
Python OUTPUT===
 String body = "token="+TestTokens.hs256_token; 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"pk\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
jwk.add("e", Base64.getUrlEncoder().encodeToString(pk.getModulus().toByteArray()));
red_line===
pk.getModulus
start_offset===
54
end_offset===
67
Python OUTPUT===
 jwk.add("e", Base64.getUrlEncoder().encodeToString(pk.getModulus().toByteArray())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Accept-Language: en-US,en;q\u003d0.5\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Accept-Language: en-US,en;q=0.5");
red_line===
"Accept-Language: en-US,en;q=0.5"
start_offset===
14
end_offset===
47
Python OUTPUT===
 headers.add("Accept-Language: en-US,en;q=0.5"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Accept: text/html,application/xhtml+xml,application/xml;q\u003d0.9,*/*;q\u003d0.8\" 13 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
red_line===
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
start_offset===
14
end_offset===
87
Python OUTPUT===
 headers.add("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String invalid_token_2="eyJhbFb___RANDOM_GARBAGE___ZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjYZgeFONFh7HgQ";
red_line===
invalid_token_2
start_offset===
28
end_offset===
43
Python OUTPUT===
 public static final String invalid_token_2="eyJhbFb___RANDOM_GARBAGE___ZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjYZgeFONFh7HgQ"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Accept: text/html,application/xhtml+xml,application/xml;q\u003d0.9,*/*;q\u003d0.8\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
red_line===
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
start_offset===
14
end_offset===
87
Python OUTPUT===
 headers.add("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Accept-Language: en-US,en;q\u003d0.5\" 13 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Accept-Language: en-US,en;q=0.5");
red_line===
"Accept-Language: en-US,en;q=0.5"
start_offset===
14
end_offset===
47
Python OUTPUT===
 headers.add("Accept-Language: en-US,en;q=0.5"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"GET /jwt/response_cookie.php HTTP/1.1\" 13 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("GET /jwt/response_cookie.php HTTP/1.1");
red_line===
"GET /jwt/response_cookie.php HTTP/1.1"
start_offset===
14
end_offset===
53
Python OUTPUT===
 headers.add("GET /jwt/response_cookie.php HTTP/1.1"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make \"sdf\" an instance variable.
scn.ruleId===
2885
scn.suspCodeStr===
private static SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss.SSS");
red_line===
sdf
start_offset===
33
end_offset===
36
Python OUTPUT===
private static final SimpleDateFormat sdf = new SimpleDateFormat ( " HH:mm:ss.SSS " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Connection: close\" 13 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Connection: close");
red_line===
"Connection: close"
start_offset===
14
end_offset===
33
Python OUTPUT===
 headers.add("Connection: close"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"lblEnterSecret\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private JLabel lblEnterSecret;
red_line===
lblEnterSecret
start_offset===
16
end_offset===
30
Python OUTPUT===
 private JLabel ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblPasteJwtToken = new GridBagConstraints();
red_line===
gbc_lblPasteJwtToken
start_offset===
21
end_offset===
41
Python OUTPUT===
 GridBagConstraints gbc_lblPasteJwtToken = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"creditButton\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private JButton creditButton;
red_line===
creditButton
start_offset===
17
end_offset===
29
Python OUTPUT===
 private JButton ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"configButton\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private JButton configButton;
red_line===
configButton
start_offset===
17
end_offset===
29
Python OUTPUT===
 private JButton ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error using Desktop API - "+e.getMessage()+" - "+e.getCause());
red_line===
System.err
start_offset===
5
end_offset===
15
Python OUTPUT===
 System.err.println("Error using Desktop API - "+e.getMessage()+" - "+e.getCause()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"javax.swing.WindowConstants\" for \"DISPOSE_ON_CLOSE\".
scn.ruleId===
3252
scn.suspCodeStr===
this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
red_line===
DISPOSE_ON_CLOSE
start_offset===
39
end_offset===
55
Python OUTPUT===
 this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"lblNewLabel\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private JLabel lblNewLabel;
red_line===
lblNewLabel
start_offset===
16
end_offset===
27
Python OUTPUT===
 private JLabel ; 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"b64()\".
scn.ruleId===
2259
scn.suspCodeStr===
byte[] payloadBytes = b64(jsonMinify(getPayloadJson())).getBytes(StandardCharsets.UTF_8);
red_line===
b64
start_offset===
25
end_offset===
28
Python OUTPUT===
 byte[] payloadBytes = b64(jsonMinify(getPayloadJson())).getBytes(StandardCharsets.UTF_8); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String extensionName = "JSON Web Tokens";
red_line===
extensionName
start_offset===
28
end_offset===
41
Python OUTPUT===
 public static final String extensionName = "JSON Web Tokens"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String verificationInvalidSignature = "Cannot verify Signature";
red_line===
verificationInvalidSignature
start_offset===
28
end_offset===
56
Python OUTPUT===
 public static final String verificationInvalidSignature = "Cannot verify Signature"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String acceptChanges = "Accept Changes";
red_line===
acceptChanges
start_offset===
28
end_offset===
41
Python OUTPUT===
 public static final String acceptChanges = "Accept Changes"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String recalculateSignature = "Recalculate Signature";
red_line===
recalculateSignature
start_offset===
28
end_offset===
48
Python OUTPUT===
 public static final String recalculateSignature = "Recalculate Signature"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String originalToken = "Original Token";
red_line===
originalToken
start_offset===
28
end_offset===
41
Python OUTPUT===
 public static final String originalToken = "Original Token"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String verificationValid = "Signature verified";
red_line===
verificationValid
start_offset===
28
end_offset===
45
Python OUTPUT===
 public static final String verificationValid = "Signature verified"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static String chooseSignatureToolTip = "Load the secret / key from a file chosen by your OS file picker";
red_line===
gnatureToolTip = "Load
start_offset===
30
end_offset===
52
Python OUTPUT===
 public static String chooseSignatureToolTip = "Load the secret + key from a file chosen by your OS file picker"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String titleHeaders = "Headers = ";
red_line===
titleHeaders
start_offset===
29
end_offset===
41
Python OUTPUT===
 private static final String titleHeaders = "Headers = "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String newline = System.getProperty("line.separator");
red_line===
newline
start_offset===
29
end_offset===
36
Python OUTPUT===
 private static final String newline = System.getProperty("line.separator"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"GET /jwt/response_cookie.php HTTP/1.1\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("GET /jwt/response_cookie.php HTTP/1.1");
red_line===
"GET /jwt/response_cookie.php HTTP/1.1"
start_offset===
14
end_offset===
53
Python OUTPUT===
 headers.add("GET /jwt/response_cookie.php HTTP/1.1"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Connection: close\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Connection: close");
red_line===
"Connection: close"
start_offset===
14
end_offset===
33
Python OUTPUT===
 headers.add("Connection: close"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Upgrade-Insecure-Requests: 1\" 13 times.
scn.ruleId===
1192
scn.suspCodeStr===
headers.add("Upgrade-Insecure-Requests: 1");
red_line===
"Upgrade-Insecure-Requests: 1"
start_offset===
14
end_offset===
44
Python OUTPUT===
 headers.add("Upgrade-Insecure-Requests: 1"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"in\" which hides the field declared at line 78.
scn.ruleId===
1117
scn.suspCodeStr===
InputStream in = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8));
red_line===
in
start_offset===
14
end_offset===
16
Python OUTPUT===
 InputStream iin= new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make tokenKeywords a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static List<String> tokenKeywords = Arrays.asList("id_token", "ID_TOKEN", "access_token", "token");
red_line===
tokenKeywords
start_offset===
28
end_offset===
41
Python OUTPUT===
public static final List < String > tokenKeywords = Arrays . asList ( " id_token " , " ID_TOKEN " , " access_token " , " token " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static jwtKeywords\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static List<String> jwtKeywords = Arrays.asList("Authorization: Bearer", "Authorization: bearer", "authorization: Bearer", "authorization: bearer");
red_line===
jwtKeywords
start_offset===
28
end_offset===
39
Python OUTPUT===
public static final List < String > jwtKeywords = Arrays . asList ( " Authorization: Bearer " , " Authorization: bearer " , " authorization: Bearer " , " authorization: bearer " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_validIndicator = new GridBagConstraints();
red_line===
gbc_validIndicator
start_offset===
21
end_offset===
39
Python OUTPUT===
 GridBagConstraints gbc_validIndicator = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblCookieFlags = new GridBagConstraints();
red_line===
gbc_lblCookieFlags
start_offset===
21
end_offset===
39
Python OUTPUT===
 GridBagConstraints gbc_lblCookieFlags = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_outputLabel = new GridBagConstraints();
red_line===
gbc_outputLabel
start_offset===
21
end_offset===
36
Python OUTPUT===
 GridBagConstraints gbc_outputLabel = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lbRegisteredClaims = new GridBagConstraints();
red_line===
gbc_lbRegisteredClaims
start_offset===
21
end_offset===
43
Python OUTPUT===
 GridBagConstraints gbc_lbRegisteredClaims = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_rdbtnNewRadioButton_1 = new GridBagConstraints();
red_line===
gbc_rdbtnNewRadioButton_1
start_offset===
21
end_offset===
46
Python OUTPUT===
 GridBagConstraints gbc_rdbtnNewRadioButton_1 = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_rdbtnNewRadioButton = new GridBagConstraints();
red_line===
gbc_rdbtnNewRadioButton
start_offset===
21
end_offset===
44
Python OUTPUT===
 GridBagConstraints gbc_rdbtnNewRadioButton = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_rdbtnRecalculateSignature = new GridBagConstraints();
red_line===
gbc_rdbtnRecalculateSignature
start_offset===
21
end_offset===
50
Python OUTPUT===
 GridBagConstraints gbc_rdbtnRecalculateSignature = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String chooseSignature = "Load Secret / Key from File";
red_line===
chooseSignature
start_offset===
28
end_offset===
43
Python OUTPUT===
 public static final String chooseSignature = "Load Secret + Key from File"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String keepOriginalSignature ="Keep original signature";
red_line===
keepOriginalSignature
start_offset===
28
end_offset===
49
Python OUTPUT===
 public static final String keepOriginalSignature ="Keep original signature"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String verificationError = "Invalid Signature / wrong key / claim failed";
red_line===
verificationError
start_offset===
28
end_offset===
45
Python OUTPUT===
 public static final String verificationError = "Invalid Signature + wrong key + claim failed"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String JWTHeaderInfo = JWTHeaderPrefix+"The following headers are added automatically, in order to log the keys";
red_line===
JWTHeaderInfo
start_offset===
28
end_offset===
41
Python OUTPUT===
 public static final String JWTHeaderInfo = JWTHeaderPrefix+"The following headers are added automatically, in order to log the keys"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String JWTHeaderPrefix = "JWT4B: ";
red_line===
JWTHeaderPrefix
start_offset===
28
end_offset===
43
Python OUTPUT===
 public static final String JWTHeaderPrefix = "JWT4B: "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String creditTitle ="JSON Web Tokens - About";
red_line===
creditTitle
start_offset===
28
end_offset===
39
Python OUTPUT===
 public static final String creditTitle ="JSON Web Tokens - About"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String recalculateSignatureToolTip = "<html>The signature will be recalculated depending<br> on the content and algorithm set</html>";
red_line===
recalculateSignatureToolTip
start_offset===
28
end_offset===
55
Python OUTPUT===
 public static final String recalculateSignatureToolTip = "<html>The signature will be recalculated depending<br> on the content and algorithm set</html>"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static resetEditor\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static boolean resetEditor = true;
red_line===
resetEditor
start_offset===
26
end_offset===
37
Python OUTPUT===
public static final boolean resetEditor = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static List<String> jwtKeywords = Arrays.asList("Authorization: Bearer", "Authorization: bearer", "authorization: Bearer", "authorization: bearer");
red_line===
jwtKeywords
start_offset===
28
end_offset===
39
Python OUTPUT===
protected static List < String > jwtKeywords = Arrays . asList ( " Authorization: Bearer " , " Authorization: bearer " , " authorization: Bearer " , " authorization: bearer " ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"createNewFile\".
scn.ruleId===
899
scn.suspCodeStr===
configFile.createNewFile();
red_line===
configFile.createNewFile();
start_offset===
4
end_offset===
31
Python OUTPUT===
 configFile.createNewFile(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
tokenKeywords = new ArrayList<String>();
red_line===
<String>
start_offset===
32
end_offset===
40
Python OUTPUT===
\u003c\u003e < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"tokenPosition\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private ITokenPosition tokenPosition;
red_line===
tokenPosition
start_offset===
24
end_offset===
37
Python OUTPUT===
 private ITokenPosition ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String symmetric = "symmetric";
red_line===
static
start_offset===
14
end_offset===
20
Python OUTPUT===
public static final String symmetric = " symmetric " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
jwtKeywords = new ArrayList<String>();
red_line===
<String>
start_offset===
30
end_offset===
38
Python OUTPUT===
\u003c\u003e < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static highlightColor\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static String highlightColor = "blue";
red_line===
highlightColor
start_offset===
25
end_offset===
39
Python OUTPUT===
public static final String highlightColor = " blue " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make configFolderName a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String configFolderName = ".JWT4B";
red_line===
configFolderName
start_offset===
25
end_offset===
41
Python OUTPUT===
public static final String configFolderName = " .JWT4B " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make interceptComment a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String interceptComment = "Contains a JWT";
red_line===
interceptComment
start_offset===
25
end_offset===
41
Python OUTPUT===
public static final String interceptComment = " Contains a JWT " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" - cause:\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Output.outputError("Error creating config file '"+configPath+"' - message:"+e.getMessage()+" - cause:"+e.getCause().toString());
red_line===
" - cause:"
start_offset===
95
end_offset===
106
Python OUTPUT===
 Output.outputError("Error creating config file '"+configPath+"' - message:"+e.getMessage()+" - cause:"+e.getCause().toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static configPath\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static String configPath = System.getProperty("user.home") + File.separator + configFolderName + File.separator +configName;
red_line===
configPath
start_offset===
25
end_offset===
35
Python OUTPUT===
public static final String configPath = System . getProperty ( " user.home " ) + File . separator + configFolderName + File . separator + configName ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_configButton = new GridBagConstraints();
red_line===
gbc_configButton
start_offset===
21
end_offset===
37
Python OUTPUT===
 GridBagConstraints gbc_configButton = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static configName\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static String configName = "config.json";
red_line===
configName
start_offset===
25
end_offset===
35
Python OUTPUT===
public static final String configName = " config.json " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String updateAlgorithmSignature = "Update Algorithm / Signature";
red_line===
updateAlgorithmSignature
start_offset===
28
end_offset===
52
Python OUTPUT===
 public static final String updateAlgorithmSignature = "Update Algorithm + Signature"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblEnterSecret = new GridBagConstraints();
red_line===
gbc_lblEnterSecret
start_offset===
21
end_offset===
39
Python OUTPUT===
 GridBagConstraints gbc_lblEnterSecret = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_jwtInputField = new GridBagConstraints();
red_line===
gbc_jwtInputField
start_offset===
21
end_offset===
38
Python OUTPUT===
 GridBagConstraints gbc_jwtInputField = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_jwtKeyField = new GridBagConstraints();
red_line===
gbc_jwtKeyField
start_offset===
21
end_offset===
36
Python OUTPUT===
 GridBagConstraints gbc_jwtKeyField = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_jwtSignatureButton = new GridBagConstraints();
red_line===
gbc_jwtSignatureButton
start_offset===
21
end_offset===
43
Python OUTPUT===
 GridBagConstraints gbc_jwtSignatureButton = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
noneAttackComboBox = new JComboBox<String>();
red_line===
<String>
start_offset===
36
end_offset===
44
Python OUTPUT===
\u003c\u003e < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_rdbtnNewRadioButton1 = new GridBagConstraints();
red_line===
gbc_rdbtnNewRadioButton1
start_offset===
21
end_offset===
45
Python OUTPUT===
 GridBagConstraints gbc_rdbtnNewRadioButton1 = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_separator = new GridBagConstraints();
red_line===
gbc_separator
start_offset===
21
end_offset===
34
Python OUTPUT===
 GridBagConstraints gbc_separator = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblSecretKey = new GridBagConstraints();
red_line===
gbc_lblSecretKey
start_offset===
21
end_offset===
37
Python OUTPUT===
 GridBagConstraints gbc_lblSecretKey = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_keyField = new GridBagConstraints();
red_line===
gbc_keyField
start_offset===
21
end_offset===
33
Python OUTPUT===
 GridBagConstraints gbc_keyField = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblProblem = new GridBagConstraints();
red_line===
gbc_lblProblem
start_offset===
21
end_offset===
35
Python OUTPUT===
 GridBagConstraints gbc_lblProblem = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
red_line===
gbc_lblNewLabel
start_offset===
21
end_offset===
36
Python OUTPUT===
 GridBagConstraints gbc_lblNewLabel = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String interceptRecalculationKey = "Secret / Key for Signature recalculation:";
red_line===
interceptRecalculationKey
start_offset===
28
end_offset===
53
Python OUTPUT===
 public static final String interceptRecalculationKey = "Secret + Key for Signature recalculation:"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String enterSecretKey="Enter Secret / Key";
red_line===
enterSecretKey
start_offset===
28
end_offset===
42
Python OUTPUT===
 public static final String enterSecretKey="Enter Secret + Key"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static final String verificationInvalidKey = "Invalid Key";
red_line===
verificationInvalidKey
start_offset===
28
end_offset===
50
Python OUTPUT===
 public static final String verificationInvalidKey = "Invalid Key"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String titlePayload = newline + newline + "Payload = ";
red_line===
titlePayload
start_offset===
29
end_offset===
41
Python OUTPUT===
 private static final String titlePayload = newline + newline + "Payload = "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String titleSignature = newline + newline + "Signature = ";
red_line===
titleSignature
start_offset===
29
end_offset===
43
Python OUTPUT===
 private static final String titleSignature = newline + newline + "Signature = "; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Cannot parse token\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new InvalidTokenFormat("Cannot parse token");
red_line===
"Cannot parse token"
start_offset===
32
end_offset===
52
Python OUTPUT===
 throw new InvalidTokenFormat("Cannot parse token"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"prettyJsonString\".
scn.ruleId===
1488
scn.suspCodeStr===
String prettyJsonString = gson.toJson(je);
red_line===
gson.toJson(je)
start_offset===
28
end_offset===
43
Python OUTPUT===
 String prettyJsonString = gson.toJson(je); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_jwtOuputField = new GridBagConstraints();
red_line===
gbc_jwtOuputField
start_offset===
21
end_offset===
38
Python OUTPUT===
 GridBagConstraints gbc_jwtOuputField = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblExtendedVerificationInfo = new GridBagConstraints();
red_line===
gbc_lblExtendedVerificationInfo
start_offset===
21
end_offset===
52
Python OUTPUT===
 GridBagConstraints gbc_lblExtendedVerificationInfo = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblDecodedJwt = new GridBagConstraints();
red_line===
gbc_lblDecodedJwt
start_offset===
21
end_offset===
38
Python OUTPUT===
 GridBagConstraints gbc_lblDecodedJwt = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lbRegisteredClaims = new GridBagConstraints();
red_line===
gbc_lbRegisteredClaims
start_offset===
21
end_offset===
43
Python OUTPUT===
 GridBagConstraints gbc_lbRegisteredClaims = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static String highlightColor = "blue";
red_line===
ghtColor = "bl
start_offset===
31
end_offset===
45
Python OUTPUT===
 public static String highlightColor = "blue"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_outputfield = new GridBagConstraints();
red_line===
gbc_outputfield
start_offset===
21
end_offset===
36
Python OUTPUT===
 GridBagConstraints gbc_outputfield = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lblCookieFlag = new GridBagConstraints();
red_line===
gbc_lblCookieFlag
start_offset===
21
end_offset===
38
Python OUTPUT===
 GridBagConstraints gbc_lblCookieFlag = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_lbRegisteredClaims = new GridBagConstraints();
red_line===
gbc_lbRegisteredClaims
start_offset===
21
end_offset===
43
Python OUTPUT===
 GridBagConstraints gbc_lbRegisteredClaims = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_button = new GridBagConstraints();
red_line===
gbc_button
start_offset===
21
end_offset===
31
Python OUTPUT===
 GridBagConstraints gbc_button = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public static String configFolderName = ".JWT4B";
red_line===
FolderName = ".J
start_offset===
31
end_offset===
47
Python OUTPUT===
 public static String configFolderName = ".JWT4B"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public final static String asymmetric = "asymmetric";
red_line===
asymmetric
start_offset===
28
end_offset===
38
Python OUTPUT===
 public final static String asymmetric = "asymmetric"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String asymmetric = "asymmetric";
red_line===
static
start_offset===
14
end_offset===
20
Python OUTPUT===
public static final String asymmetric = " asymmetric " ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"pk\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
jwk.add("n", Base64.getUrlEncoder().encodeToString(pk.getPublicExponent().toByteArray()));
red_line===
pk.getPublicExponent
start_offset===
54
end_offset===
74
Python OUTPUT===
 jwk.add("n", Base64.getUrlEncoder().encodeToString(pk.getPublicExponent().toByteArray())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_noneAttackComboBox = new GridBagConstraints();
red_line===
gbc_noneAttackComboBox
start_offset===
21
end_offset===
43
Python OUTPUT===
 GridBagConstraints gbc_noneAttackComboBox = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
GridBagConstraints gbc_chkbxCVEAttack = new GridBagConstraints();
red_line===
gbc_chkbxCVEAttack
start_offset===
21
end_offset===
39
Python OUTPUT===
 GridBagConstraints gbc_chkbxCVEAttack = new GridBagConstraints(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public final static String none = "none";
red_line===
none
start_offset===
28
end_offset===
32
Python OUTPUT===
 public final static String none = "none"; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
public final static String symmetric = "symmetric";
red_line===
symmetric
start_offset===
28
end_offset===
37
Python OUTPUT===
 public final static String symmetric = "symmetric"; 
isFixed===
false
==================
