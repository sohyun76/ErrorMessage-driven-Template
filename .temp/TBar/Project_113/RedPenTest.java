/**
 * redpen: a text inspection tool
 * Copyright (c) 2014-2015 Recruit Technologies Co., Ltd. and contributors
 * (see CONTRIBUTORS.md)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cc.redpen;

import cc.redpen.config.Configuration;
import cc.redpen.config.ValidatorConfiguration;
import cc.redpen.model.Document;
import cc.redpen.model.Sentence;
import cc.redpen.validator.ValidationError;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class RedPenTest {
    @BeforeEach
    void setUp() {
        Locale.setDefault(Locale.ENGLISH);
    }

    @Test
    void testEmptyValidator() throws RedPenException {

        List<Document> documents = new ArrayList<>();
        documents.add(Document.builder()
                .addSection(1)
                .addParagraph()
                .addSentence(new Sentence("In a land far away, there once was as a hungry programmer.", 1))
                .addSentence(new Sentence("He was hungry for programming and programmed all day - "
                        + " - in Java, Python, C++, etc.", 2))
                .addSentence(new Sentence("Whe he wasn't programming, he was eating noodles.", 3))
                .addParagraph()
                .addSentence(new Sentence("One day while programming, he got a new idea.", 4))
                .build());

        Configuration configuration = Configuration.builder().build();
        RedPen redPen = new RedPen(configuration);
        Map<Document, List<ValidationError>> errors = redPen.validate(documents);
        assertEquals(0, errors.get(documents.get(0)).size());
    }


    @Test
    void testSentenceValidatorWithSimpleDocument()
            throws RedPenException {
        List<Document> documents = new ArrayList<>();
        documents.add(Document.builder()
                .setFileName("tested file")
                .addSection(0)
                .addParagraph()
                .addSentence(new Sentence("it is a piece of a cake.", 1))
                .addSentence(new Sentence("that is also a piece of a cake.", 2))
                .build());

        RedPen redPen = getRedPenWithSentenceValidator();

        List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));

        // validate the errors
        assertEquals(2, errors.size());
        for (ValidationError error : errors) {
            assertEquals(error.getValidatorName(), "SentenceLength");
            assertTrue(error.getMessage().contains("exceeds the maximum "));
        }
    }

    @Test
    void testSectionValidatorWithSimpleDocument()
            throws RedPenException {
        List<Document> documents = new ArrayList<>();

        documents.add(Document.builder()
                .setFileName("tested file")
                .addSection(0)
                .addSectionHeader("foobar")
                .addParagraph()
                .addSentence(new Sentence("it is a piece of a cake.", 1))
                .addSentence(new Sentence("that is also a piece of a cake.", 2))
                .build());

        RedPen redPen = getRedPenWithSectionValidator();
        List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));

        // validate the errors
        assertEquals(1, errors.size());
        for (ValidationError error : errors) {
            assertEquals(error.getValidatorName(), "SectionLength");
            assertTrue(error.getMessage().contains("The number of characters in the section (55) exceeds the maximum of 5"));
        }
    }

    @Test
    void testDocumentWithHeader() throws RedPenException {
        List<Document> documents = new ArrayList<>();
        documents.add(Document.builder()
                .setFileName("tested file")
                .addSection(0)
                .addSectionHeader("this is it.")
                .addParagraph()
                .addSentence(new Sentence("it is a piece of a cake.", 1))
                .addSentence(new Sentence("that is also a piece of a cake.", 2))
                .build());

        RedPen redPen = getRedPenWithSentenceValidator();
        List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));

        // validate the errors
        assertEquals(3, errors.size());
        for (ValidationError error : errors) {
            assertEquals(error.getValidatorName(), "SentenceLength");
            assertTrue(error.getMessage().contains("exceeds the maximum "));
        }
    }

    @Test
    void testDocumentWithList() throws RedPenException {
        List<Document> documents = new ArrayList<>();
        documents.add(Document.builder()
                .setFileName("tested file")
                .addSection(0)
                .addSectionHeader("this is it")
                .addParagraph()
                .addSentence(new Sentence("it is a piece of a cake.", 1))
                .addSentence(new Sentence("that is also a piece of a cake.", 2))
                .addListBlock()
                .addListElement(0, "this is a list.")
                .build());

        RedPen redPen = getRedPenWithSentenceValidator();
        List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));

        // validate the errors
        assertEquals(4, errors.size());
        for (ValidationError error : errors) {
            assertEquals(error.getValidatorName(), "SentenceLength");
            assertTrue(error.getMessage().contains("exceeds the maximum "));
        }
    }

    @Test
    void testDocumentWithoutContent() throws RedPenException {
        List<Document> documents = new ArrayList<>();
        documents.add(Document.builder()
                .setFileName("tested file")
                .build());

        RedPen redPen = getRedPenWithSentenceValidator();
        List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));

        // validate the errors
        assertEquals(0, errors.size());
    }


    @Test
    void testClearCachedInnerProperties() throws RedPenException {
        List<Document> documents = new ArrayList<>();
        documents.add(Document.builder()
                .addSection(1)
                .addSectionHeader("this is it.")
                .addParagraph()
                .addSentence(new Sentence("Hello and this is it", 1))
                .build());

        Configuration configuration = Configuration.builder()
                .addValidatorConfig(new ValidatorConfiguration("DuplicatedSection"))
                .build();
        RedPen redPen = new RedPen(configuration);

        // first
        List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));
        assertEquals(0, errors.size());

        // second
        documents.clear();
        documents.add(Document.builder()
                .addSection(1)
                .addSectionHeader("this is it.")
                .addParagraph()
                .addSentence(new Sentence("Hello and this is it", 1))
                .build());

        errors = redPen.validate(documents).get(documents.get(0));
        assertEquals(0, errors.size());
    }

    private RedPen getRedPenWithSentenceValidator() throws
            RedPenException {

        Configuration configuration = Configuration.builder()
                .addValidatorConfig(new ValidatorConfiguration("SentenceLength").addProperty("max_len", "5"))
                .build();
        return new RedPen(configuration);
    }

    private RedPen getRedPenWithSectionValidator() throws
            RedPenException {
        Configuration configuration = Configuration.builder()
                .addValidatorConfig(new ValidatorConfiguration("SectionLength").addProperty("max_num", "5"))
                .build();
        return new RedPen(configuration);
    }
}
