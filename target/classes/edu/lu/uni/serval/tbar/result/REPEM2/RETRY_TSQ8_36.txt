RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to read key " + key + ". Reason: " + e.toString());
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Unable to read key " + key + ". Reason: " + e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \". Reason: TIME OUT\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.err.println("Unable to insert key " + key + ". Reason: TIME OUT");
red_line===
". Reason: TIME OUT"
start_offset===
59
end_offset===
79
Python OUTPUT===
System.err.println("Unable to insert key " + key + ". Reason: TIME OUT");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \". Reason: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.err.println("Unable to insert key " + key + ". Reason: " + e.toString());
red_line===
". Reason: "
start_offset===
59
end_offset===
71
Python OUTPUT===
System.err.println("Unable to insert key " + key + ". Reason: " + e.toString());
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \". Reason: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
int startScanKeyNumber = new Random().nextInt(recordsToInsert - recordsToScan);
red_line===
Insert - rec
start_offset===
59
end_offset===
71
Python OUTPUT===
int startScanKeyNumber = new Random().nextInt(recordsToInsert - recordsToScan);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
final Vector<HashMap<String, ByteIterator>> resultParam = new Vector<>(10);
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
14
end_offset===
51
Python OUTPUT===
final ArrayList < HashMap < String , ByteIterator >> resultParam = new ArrayList < > ( 10 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace Charset.forName() call with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
public static final Charset UTF8_CHARSET = Charset.forName("UTF8");
red_line===
Charset.forName("UTF8")
start_offset===
45
end_offset===
68
Python OUTPUT===
 public static final Charset UTF8_CHARSET = Charset.forName("UTF8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Interrupted during prefetch");
red_line===
System.err
start_offset===
14
end_offset===
24
Python OUTPUT===
 System.err.println("Interrupted during prefetch"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Thread interrupted\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.err.println("Thread interrupted");
red_line===
"Thread interrupted"
start_offset===
25
end_offset===
45
Python OUTPUT===
System.err.println("Thread interrupted");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Thread interrupted");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Thread interrupted"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
final byte[][] qualifiers = new byte[values.size()][];
red_line===
]
start_offset===
15
end_offset===
16
Python OUTPUT===
final byte[][] qualifiers = new byte[values.size()][];
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String COLUMN_FAMILY = "cf";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String COLUMN_FAMILY = " cf " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> input = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> > input = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
Map.Entry<String, JsonNode> jsonField = jsonFields.next();
red_line===
Entry
start_offset===
14
end_offset===
19
Python OUTPUT===
Map.Entry<String, JsonNode> jsonField = jsonFields.next();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"designDoc\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String designDoc;
red_line===
designDoc
start_offset===
17
end_offset===
26
Python OUTPUT===
 private String d 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
Writer writer = new StringWriter();
red_line===
r
start_offset===
26
end_offset===
27
Python OUTPUT===
Writer writer = new StringWriter();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
node.put(pair.getKey(), pair.getValue());
red_line===
(
start_offset===
26
end_offset===
27
Python OUTPUT===
node.put(pair.getKey(), pair.getValue());
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"!unknown!\".
scn.ruleId===
1854
scn.suspCodeStr===
String id = new String(row.byteValue()).trim();
red_line===
= new String(row.byteValue()).trim()
start_offset===
22
end_offset===
58
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"false\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.setProperty("com.couchbase.query.encodedPlanEnabled", "false");
red_line===
"false"
start_offset===
65
end_offset===
72
Python OUTPUT===
System.setProperty("com.couchbase.query.encodedPlanEnabled", "false");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<HashMap<String, ByteIterator>> data = new ArrayList<HashMap<String, ByteIterator>>(recordcount);
red_line===
<HashMap<String, ByteIterator>>
start_offset===
66
end_offset===
97
Python OUTPUT===
<> = new ArrayList < HashMap < String , ByteIterator >> ( recordcount ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" WHERE \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
read.append(" WHERE ");
red_line===
" WHERE "
start_offset===
16
end_offset===
25
Python OUTPUT===
read.append(" WHERE ");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" WHERE \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
private static final String DEFAULT_PWD = "postgres";
red_line===
 final St
start_offset===
16
end_offset===
25
Python OUTPUT===
private static final String DEFAULT_PWD = "postgres";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" WHERE \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
props.setProperty("password", DEFAULT_PWD);
red_line===
perty("pa
start_offset===
16
end_offset===
25
Python OUTPUT===
props.setProperty("password", DEFAULT_PWD);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Read did not return success (0).\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat("Read did not return success (0).", result, is(Status.OK));
red_line===
"Read did not return success (0)."
start_offset===
17
end_offset===
51
Python OUTPUT===
assertThat("Read did not return success (0).", result, is(Status.OK));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Status result = postgreNoSQLClient.insert(TABLE_NAME, insertKey, insertMap);
red_line===
= postgreNoSQLClient.insert(TABLE_NAME, insertKey, insertMap)
start_offset===
20
end_offset===
81
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = postgreNoSQLClient.read(TABLE_NAME, insertKey, fields, readResults);
red_line===
= postgreNoSQLClient.read(TABLE_NAME, insertKey, fields, readResults)
start_offset===
13
end_offset===
82
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Keytab file is not readable or not found");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Keytab file is not readable or not found"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Error accessing HBase table: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
"Error accessing HBase table: "
start_offset===
27
end_offset===
58
Python OUTPUT===
System.err.println("Error accessing HBase table: " + e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"key\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String key = Bytes.toString(rr.getRow());
red_line===
key
start_offset===
15
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> input = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> > input = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Path miniSolrCloudClusterTempDirectory = Files.createTempDirectory("miniSolrCloudCluster");
red_line===
eateTempDirector
start_offset===
53
end_offset===
69
Python OUTPUT===
<> = Files.createTempDirectory ( " miniSolrCloudCluster " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> read = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> read = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
result = client.read(table, id, keys, read);
red_line===
= client.read(table, id, keys, read)
start_offset===
11
end_offset===
47
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Insert did not return success (0).\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat("Insert did not return success (0).", result, is(Status.OK));
red_line===
"Insert did not return success (0)."
start_offset===
15
end_offset===
51
Python OUTPUT===
assertThat("Insert did not return success (0).", result, is(Status.OK));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result = "0" + result;
red_line===
result
start_offset===
6
end_offset===
12
Python OUTPUT===
result = "0" + result;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
Status result = client.insert(table, id, inserted);
red_line===
= client.insert(table, id, inserted)
start_offset===
18
end_offset===
54
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
8
end_offset===
15
Python OUTPUT===
 return;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
e1.printStackTrace();
red_line===
e1.prin
start_offset===
8
end_offset===
15
Python OUTPUT===
 e1.prinrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e1.printStackTrace();
red_line===
  e1.print
start_offset===
6
end_offset===
16
Python OUTPUT===
 e1.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"databaseName\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private static String databaseName;
red_line===
databaseName
start_offset===
24
end_offset===
36
Python OUTPUT===
 private static String d 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ERROR-\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
return new Status("ERROR-" + e.getReturnValue(), e.getMessage());
red_line===
"ERROR-"
start_offset===
24
end_offset===
32
Python OUTPUT===
return new Status("ERROR-" + e.getReturnValue(), e.getMessage());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"itSrc\".
scn.ruleId===
1854
scn.suspCodeStr===
Iterator<Map.Entry> itSrc = setSrc.iterator();
red_line===
= setSrc.iterator()
start_offset===
30
end_offset===
49
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> ret = new HashMap<String, ByteIterator>(10);
red_line===
<String, ByteIterator>
start_offset===
51
end_offset===
73
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( 10 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"setSrc\".
scn.ruleId===
1854
scn.suspCodeStr===
Set setSrc = src.entrySet();
red_line===
= src.entrySet()
start_offset===
15
end_offset===
31
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
28
end_offset===
50
Python OUTPUT===
<> ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String HOST = "127.0.0.1";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String HOST = " 127.0.0.1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> strResult = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
57
end_offset===
73
Python OUTPUT===
<> > strResult = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value1\" 11 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field0", "value1");
red_line===
"value1"
start_offset===
24
end_offset===
32
Python OUTPUT===
input.put("field0", "value1");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> strResult = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
57
end_offset===
73
Python OUTPUT===
<> > strResult = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value1\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
input1.put("field0", "value1");
red_line===
"value1"
start_offset===
25
end_offset===
33
Python OUTPUT===
input1.put("field0", "value1");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value2A\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat(strResult, hasEntry("field1", "value2A"));
red_line===
"value2A"
start_offset===
45
end_offset===
54
Python OUTPUT===
assertThat(strResult, hasEntry("field1", "value2A"));
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String SERVER_NODE_NAME = "YCSB Server Node";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String SERVER_NODE_NAME = " YCSB Server Node " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"ysb\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private YCSBSchemaBuilder ysb =  null;
red_line===
ysb
start_offset===
28
end_offset===
31
Python OUTPUT===
 private YCSBSchemaBuilder y= null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> res = new HashMap<String, ByteIterator>(size, (float) 1.25);
red_line===
<String, ByteIterator>
start_offset===
51
end_offset===
73
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( size , ( float ) 1.25 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> testResult = new Vector<HashMap<String, ByteIterator>>();
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
6
end_offset===
43
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> testResult = new ArrayList < HashMap < String , ByteIterator >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, ByteIterator> testResultAfterDelete = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
67
end_offset===
89
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> insertThenUpdateMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
69
end_offset===
91
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"newzetan\".
scn.ruleId===
1854
scn.suspCodeStr===
double newzetan = ZipfianGenerator.zetastatic(ITEM_COUNT, ZipfianGenerator.ZIPFIAN_CONSTANT);
red_line===
= ZipfianGenerator.zetastatic(ITEM_COUNT, ZipfianGenerator.ZIPFIAN_CONSTANT)
start_offset===
20
end_offset===
96
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
int number = ThreadLocalRandom.current().nextInt((int) area);
red_line===
 ThreadLocalRand
start_offset===
16
end_offset===
32
Python OUTPUT===
int number = ThreadLocalRandom.current().nextInt((int) area);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
return ((lb + (long) ub)) / 2.0;
red_line===
long
start_offset===
19
end_offset===
23
Python OUTPUT===
 return ((lb + (lonb))  /  2.0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"interval\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private final long lb, ub, interval;
red_line===
interval
start_offset===
29
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> strResult = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
57
end_offset===
73
Python OUTPUT===
<> > strResult = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
long ret = Math.abs(ThreadLocalRandom.current().nextLong()) % interval  + lb;
red_line===
ong()) % interva
start_offset===
57
end_offset===
73
Python OUTPUT===
<> current ( ).nextLong ( ) ) % interval + lb ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use the original value instead.
scn.ruleId===
2676
scn.suspCodeStr===
value = lowerBound + hotInterval + Math.abs(random.nextLong()) % coldInterval;
red_line===
random.nextLong()
start_offset===
50
end_offset===
67
Python OUTPUT===
value = lowerBound + hotInterval + Math.abs(random.nextLong()) % coldInterval;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use the original value instead.
scn.ruleId===
2676
scn.suspCodeStr===
return -Math.log(ThreadLocalRandom.current().nextDouble()) / gamma;
red_line===
extDouble()) / ga
start_offset===
50
end_offset===
67
Python OUTPUT===
return -Math.log(ThreadLocalRandom.current().nextDouble()) / gamma;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make member \"CHAR_TYPES_ALL_BUT_CONTROL\" \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
CHAR_TYPES_ALL_BUT_CONTROL = new HashSet<Integer>(24);
red_line===
CHAR_TYPES_ALL_BUT_CONTROL
start_offset===
4
end_offset===
30
Python OUTPUT===
final CHAR_TYPES_ALL_BUT_CONTROL = new HashSet < Integer > ( 24 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
CHAR_TYPES_BASIC_ALPHANUMERICS = new HashSet<Integer>(3);
red_line===
<Integer>
start_offset===
48
end_offset===
57
Python OUTPUT===
<> < Integer > ( 3 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
g.writeNumberField("value", i);
red_line===
"value"
start_offset===
23
end_offset===
30
Python OUTPUT===
g.writeNumberField("value", i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"measurement\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
g.writeStringField("measurement", measurement);
red_line===
"measurement"
start_offset===
23
end_offset===
36
Python OUTPUT===
g.writeStringField("measurement", measurement);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"field0\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field0", "value1");
red_line===
"field0"
start_offset===
14
end_offset===
22
Python OUTPUT===
input.put("field0", "value1");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"field1\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field1", "value2");
red_line===
"field1"
start_offset===
14
end_offset===
22
Python OUTPUT===
input.put("field1", "value2");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> strResult = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
57
end_offset===
73
Python OUTPUT===
<> > strResult = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"field1\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
input1.put("field1", "value2");
red_line===
"field1"
start_offset===
15
end_offset===
23
Python OUTPUT===
input1.put("field1", "value2");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value2A\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat(strResult, hasEntry("field1", "value2A"));
red_line===
"value2A"
start_offset===
45
end_offset===
54
Python OUTPUT===
assertThat(strResult, hasEntry("field1", "value2A"));
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ERROR: java.lang.ArrayIndexOutOfBoundsException - ignoring and continuing");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("ERROR: java.lang.ArrayIndexOutOfBoundsException - ignoring and continuing"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final Vector<HashMap<String, ByteIterator>> results = new Vector<HashMap<String, ByteIterator>>();
red_line===
<HashMap<String, ByteIterator>>
start_offset===
68
end_offset===
99
Python OUTPUT===
<> = new Vector < HashMap < String , ByteIterator >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value1\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
input1.put("field0", "value1");
red_line===
"value1"
start_offset===
25
end_offset===
33
Python OUTPUT===
input1.put("field0", "value1");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
batchKeys = new Vector<String>(batchSize+1);
red_line===
<String>
start_offset===
28
end_offset===
36
Python OUTPUT===
<> < String > ( batchSize + 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"r\".
scn.ruleId===
1488
scn.suspCodeStr===
byte[] r = tr.get(Tuple.from(rowKey).pack()).join();
red_line===
tr.get(Tuple.from(rowKey).pack()).join()
start_offset===
21
end_offset===
61
Python OUTPUT===
byte[] r = tr.get(Tuple.from(rowKey).pack()).join();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
System.err.println("Error doing read");
red_line===
r
start_offset===
17
end_offset===
18
Python OUTPUT===
System.err.println("Error doing read");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing scan: " + e.message);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing scan: " + e.message); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Setting up put for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Setting up put for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
int iterations = sparsity <= 0 ? 1 : random.nextInt((int) ((double) perKeyCardinality * sparsity));
red_line===
double
start_offset===
66
end_offset===
72
Python OUTPUT===
 int iterations = sparsity <= 0 ? 1 : random.nextInt((int) ((doublKeyCardinality * sparsity)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
map.put(valueKey, new NumericByteIterator(random.nextDouble() * (double) 100000));
red_line===
double
start_offset===
79
end_offset===
85
Python OUTPUT===
 map.put(valueKey, new NumericByteIterator(random.nextDouble() * (double) 10000
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error while writing key " + key + ": " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error while writing key " + key + ": " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<InetSocketAddress> addresses = new ArrayList<InetSocketAddress>();
red_line===
<InetSocketAddress>
start_offset===
53
end_offset===
72
Python OUTPUT===
<> addresses = new ArrayList < InetSocketAddress > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
databasePool = new OPartitionedDatabasePool(url, user, password);
red_line===
databasePool
start_offset===
10
end_offset===
22
Python OUTPUT===
final databasePool = new OPartitionedDatabasePool ( url , user , password ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
databasePool = null;
red_line===
databasePool
start_offset===
8
end_offset===
20
Python OUTPUT===
final databasePool = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
map.put(valueKey, new NumericByteIterator(random.nextDouble() * (double) 100000));
red_line===
double
start_offset===
81
end_offset===
87
Python OUTPUT===
 map.put(valueKey, new NumericByteIterator(random.nextDouble() * (double) 100000)
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> resultVector = new Vector<>();
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
4
end_offset===
41
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> resultVector = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"key \u003d {}\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
logger.debug("key = {}", key);
red_line===
"key = {}"
start_offset===
19
end_offset===
29
Python OUTPUT===
logger.debug("key = {}", key);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"user0\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
String insertKey = "user0";
red_line===
"user0"
start_offset===
23
end_offset===
30
Python OUTPUT===
String insertKey = "user0";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String TABLE = "usertable";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String TABLE = " usertable " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Invalid combination of insertstart, insertcount and recordcount.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Invalid combination of insertstart, insertcount and recordcount."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
int sleepTime = (int) (1000 * insertionRetryInterval * (0.8 + 0.4 * Math.random()));
red_line===
    int sl
start_offset===
6
end_offset===
16
Python OUTPUT===
 int sleepTime = (int) (1000 * insertionRetryInterval * (0.8 + 0.4 * Math.random())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Must have constant field size to check data integrity.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Must have constant field size to check data integrity."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
prekey += '0';
red_line===
prekey
start_offset===
6
end_offset===
12
Python OUTPUT===
prekey += '0';
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"objectCount\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private long objectCount;
red_line===
objectCount
start_offset===
15
end_offset===
26
Python OUTPUT===
 private long o 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
54
end_offset===
76
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> value = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
53
end_offset===
75
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -load:  run the loading phase of the workload");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -load: run the loading phase of the workload"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -P propertyfile: load properties from the given file. Multiple files can");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -P propertyfile: load properties from the given file. Multiple files can"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("          multiple properties can be specified, and override any");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" multiple properties can be specified, and override any"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
return (Workload) workloadclass.newInstance();
red_line===
newInstance
start_offset===
38
end_offset===
49
Python OUTPUT===
 return (Workload) workloadclass.newIn
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Boolean.parseBoolean\" for this string-to-boolean conversion.
scn.ruleId===
2130
scn.suspCodeStr===
boolean status = Boolean.valueOf(props.getProperty(STATUS_PROPERTY, String.valueOf(false)));
red_line===
Boolean.valueOf(props.getProperty(STATUS_PROPERTY, String.valueOf(false)))
start_offset===
21
end_offset===
95
Python OUTPUT===
boolean status = Boolean.valueOf(props.getProperty(STATUS_PROPERTY, String.valueOf(false)));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Starting test.");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Starting test."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
  e.printS
start_offset===
4
end_offset===
14
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
System.err.println("Unable to retrieve client version.");
red_line===
a
start_offset===
28
end_offset===
29
Python OUTPUT===
System.err.println("Unable to retrieve client version.");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"arg\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
System.err.print(" " + arg);
red_line===
.pr
start_offset===
16
end_offset===
19
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Count\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
exporter.write("TOTAL_GCs", "Count", totalGCCount);
red_line===
"Count"
start_offset===
34
end_offset===
41
Python OUTPUT===
exporter.write("TOTAL_GCs", "Count", totalGCCount);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Count\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
exporter.write("TOTAL_GCS_" + entry.getKey(), "Count", entry.getValue()[0]);
red_line===
"Count"
start_offset===
54
end_offset===
61
Python OUTPUT===
exporter.write("TOTAL_GCS_" + entry.getKey(), "Count", entry.getValue()[0]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused method parameter \"props\".
scn.ruleId===
1172
scn.suspCodeStr===
ClassLoader classLoader = Client.class.getClassLoader();
red_line===
ssLoa
start_offset===
49
end_offset===
54
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"getTracer()\".
scn.ruleId===
2259
scn.suspCodeStr===
final Tracer tracer = getTracer(props, workload);
red_line===
getTracer
start_offset===
26
end_offset===
35
Python OUTPUT===
final Tracer tracer = getTracer(props, workload);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"aggregationOperation\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
TimeseriesDB.AggregationOperation aggregationOperation = TimeseriesDB.AggregationOperation.NONE;
red_line===
aggregationOperation
start_offset===
38
end_offset===
58
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"aggregationOperation\".
scn.ruleId===
1854
scn.suspCodeStr===
aggregationOperation = TimeseriesDB.AggregationOperation.valueOf(groupBySpecifier);
red_line===
= TimeseriesDB.AggregationOperation.valueOf(groupBySpecifier)
start_offset===
29
end_offset===
90
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"groupBySpecifier\".
scn.ruleId===
1854
scn.suspCodeStr===
String groupBySpecifier = field.split(tagPairDelimiter)[1];
red_line===
= field.split(tagPairDelimiter)[1]
start_offset===
32
end_offset===
66
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case 2:
red_line===
case 2:
start_offset===
4
end_offset===
11
Python OUTPUT===
case 2:
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
int bytes = ThreadLocalRandom.current().nextInt();
red_line===
int byt
start_offset===
4
end_offset===
11
Python OUTPUT===
int bytes = ThreadLocalRandom.current().nextInt();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case 4:
red_line===
case 4:
start_offset===
4
end_offset===
11
Python OUTPUT===
case 4:
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case 3:
red_line===
case 3:
start_offset===
4
end_offset===
11
Python OUTPUT===
case 3:
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
return payload.length - off;
red_line===
-
start_offset===
26
end_offset===
27
Python OUTPUT===
 return payload.length - off;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[FLOATS], Unique series, " + floats.size());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("[FLOATS], Unique series, " + floats.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
floats = new HashMap<Integer, Integer>();
red_line===
<Integer, Integer>
start_offset===
28
end_offset===
46
Python OUTPUT===
<> , Integer > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"filtered\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
filtered.add(field);
red_line===
filtered.add
start_offset===
12
end_offset===
24
Python OUTPUT===
filtered.add(field);
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"values\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
isFloat = ((NumericByteIterator) values.get(valueKey)).isFloatingPoint();
red_line===
values.get
start_offset===
41
end_offset===
51
Python OUTPUT===
isFloat = ((NumericByteIterator) values.get(valueKey)).isFloatingPoint();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final TreeMap<String, ByteIterator> tree = new TreeMap<String, ByteIterator>(values);
red_line===
<String, ByteIterator>
start_offset===
62
end_offset===
84
Python OUTPUT===
<> tree = new TreeMap < String , ByteIterator > ( values ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
long randomMinorDelay = ThreadLocalRandom.current().nextInt((int) targetOpsTickNs);
red_line===
Int((int) targetOpsTic
start_offset===
62
end_offset===
84
Python OUTPUT===
<> .nextInt ( ( int ) targetOpsTickNs ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
final Random random = ThreadLocalRandom.current();
red_line===
= ThreadLo
start_offset===
24
end_offset===
34
Python OUTPUT===
 final Random random = ThreadLocalRandom.current(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(msg);
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println(msg); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"throughput\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
long estremaining = (long) Math.ceil(todoops / throughput);
red_line===
throughput
start_offset===
51
end_offset===
61
Python OUTPUT===
final long estremaining = ( long ) Math . ceil ( todoops throughput ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"classLoader\".
scn.ruleId===
1854
scn.suspCodeStr===
ClassLoader classLoader = DBFactory.class.getClassLoader();
red_line===
= DBFactory.class.getClassLoader()
start_offset===
28
end_offset===
62
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"classLoader\".
scn.ruleId===
1854
scn.suspCodeStr===
ClassLoader classLoader = CommandLine.class.getClassLoader();
red_line===
= CommandLine.class.getClassLoader()
start_offset===
28
end_offset===
64
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dbname\".
scn.ruleId===
1854
scn.suspCodeStr===
String dbname = props.getProperty(Client.DB_PROPERTY, DEFAULT_DB);
red_line===
= props.getProperty(Client.DB_PROPERTY, DEFAULT_DB)
start_offset===
18
end_offset===
69
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Usage: java site.ycsb.CommandLine [options]");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Usage: java site.ycsb.CommandLine [options]"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
db = (DB) dbclass.newInstance();
red_line===
newInstance
start_offset===
24
end_offset===
35
Python OUTPUT===
 db = (DB) dbclass.newIn
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dbclass\".
scn.ruleId===
1854
scn.suspCodeStr===
Class dbclass = classLoader.loadClass(dbname);
red_line===
= classLoader.loadClass(dbname)
start_offset===
20
end_offset===
51
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Connected.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Connected."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
    e.prin
start_offset===
4
end_offset===
14
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ret\".
scn.ruleId===
1854
scn.suspCodeStr===
Status ret = db.delete(table, tokens[1]);
red_line===
= db.delete(table, tokens[1])
start_offset===
17
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"st\".
scn.ruleId===
1854
scn.suspCodeStr===
long st = System.currentTimeMillis();
red_line===
= System.currentTimeMillis()
start_offset===
14
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: syntax is \"update keyname name1=value1 [name2=value2 ...]\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Error: syntax is \"update keyname name1=value1 [name2=value2 ...]\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Result: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.out.println("Result: " + ret.getName());
red_line===
"Result: "
start_offset===
25
end_offset===
35
Python OUTPUT===
System.out.println("Result: " + ret.getName());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("--------------------------------");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("--------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ret\".
scn.ruleId===
1854
scn.suspCodeStr===
Status ret = db.update(table, tokens[1], values);
red_line===
= db.update(table, tokens[1], values)
start_offset===
17
end_offset===
54
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Using table \"" + table + "\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Using table \"" + table + "\""); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
myfileprops.load(new FileInputStream(propfile));
red_line===
new FileInputStream(propfile)
start_offset===
27
end_offset===
56
Python OUTPUT===
myfileprops.load(new FileInputStream(propfile));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ret\".
scn.ruleId===
1854
scn.suspCodeStr===
Status ret = db.insert(table, tokens[1], values);
red_line===
= db.insert(table, tokens[1], values)
start_offset===
17
end_offset===
54
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ret\".
scn.ruleId===
1854
scn.suspCodeStr===
Status ret = db.scan(table, tokens[1], Integer.parseInt(tokens[2]), fields, results);
red_line===
= db.scan(table, tokens[1], Integer.parseInt(tokens[2]), fields, results)
start_offset===
17
end_offset===
90
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"record\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int record = 0;
red_line===
record
start_offset===
10
end_offset===
16
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"table\".
scn.ruleId===
1854
scn.suspCodeStr===
table = tokens[1];
red_line===
= tokens[1]
start_offset===
12
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ret\".
scn.ruleId===
1854
scn.suspCodeStr===
Status ret = db.read(table, tokens[1], fields, result);
red_line===
= db.read(table, tokens[1], fields, result)
start_offset===
17
end_offset===
60
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"db\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
db.setProperties(props);
red_line===
db.setProperties
start_offset===
4
end_offset===
20
Python OUTPUT===
db.setProperties(props);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"count\" to prevent any misunderstanding/clash with field \"COUNT\".
scn.ruleId===
1845
scn.suspCodeStr===
protected boolean count;
red_line===
count
start_offset===
20
end_offset===
25
Python OUTPUT===
protected boolean count;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\"" + k + "\"=\"" + p.getProperty(k) + "\"");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("\"" + k + "\"=\"" + p.getProperty(k) + "\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"k\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String k = (String) e.nextElement();
red_line===
k
start_offset===
19
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
reads = new HashMap<Integer, Integer>();
red_line===
<Integer, Integer>
start_offset===
27
end_offset===
45
Python OUTPUT===
<> , Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
updates = new HashMap<Integer, Integer>();
red_line===
<Integer, Integer>
start_offset===
29
end_offset===
47
Python OUTPUT===
<> , Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
delayNs = TimeUnit.MILLISECONDS.toNanos(ThreadLocalRandom.current().nextInt(todelay));
red_line===
  delayNs 
start_offset===
6
end_offset===
16
Python OUTPUT===
 delayNs = TimeUnit.MILLISECONDS.toNanos(ThreadLocalRandom.current().nextInt(todelay)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Expected IllegalArgumentException\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
fail("Expected IllegalArgumentException");
red_line===
"Expected IllegalArgumentException"
start_offset===
11
end_offset===
46
Python OUTPUT===
fail("Expected IllegalArgumentException");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Expected IllegalArgumentException\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Random rand = new Random(System.currentTimeMillis());
red_line===
rand = new Random(System.currentTim
start_offset===
11
end_offset===
46
Python OUTPUT===
Random rand = new Random(System.currentTimeMillis());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print("[" + i + "] Key: " + keys.get(i) + " Values: {");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.print("[" + i + "] Key: " + keys.get(i) + " Values: {"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print("{" + entry.getKey() + " => ");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.print("{" + entry.getKey() + " => "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
System.out.print(new String(Utils.bytesToDouble(entry.getValue().toArray()) + "}"));
red_line===
String
start_offset===
33
end_offset===
39
Python OUTPUT===
 System.out.print(new String(UtilsToDouble(entry.getValue().toArray()) + "}")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
System.out.print(new String(Utils.bytesToLong(entry.getValue().toArray()) + "}"));
red_line===
String
start_offset===
33
end_offset===
39
Python OUTPUT===
 System.out.print(new String(UtilsToLong(entry.getValue().toArray()) + "}")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("}");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("}"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final TreeMap<String, String> validationTags = new TreeMap<String, String>();
red_line===
<String, String>
start_offset===
62
end_offset===
78
Python OUTPUT===
<> > validationTags = new TreeMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"field1\" 11 times.
scn.ruleId===
1192
scn.suspCodeStr===
insertStmt.value("field1", "value2");
red_line===
"field1"
start_offset===
21
end_offset===
29
Python OUTPUT===
insertStmt.value("field1", "value2");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final Map<String, String> input = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> > input = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value2\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat(strResult, hasEntry("field1", "value2"));
red_line===
"value2"
start_offset===
45
end_offset===
53
Python OUTPUT===
assertThat(strResult, hasEntry("field1", "value2"));
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"measurement\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(json.get(0).get("measurement").asText(), "Operations");
red_line===
"measurement"
start_offset===
37
end_offset===
50
Python OUTPUT===
assertEquals(json.get(0).get("measurement").asText(), "Operations");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"ret\".
scn.ruleId===
1488
scn.suspCodeStr===
int ret = Math.abs(key.hashCode()) % conns.size();
red_line===
Math.abs(key.hashCode()) % conns.size()
start_offset===
14
end_offset===
53
Python OUTPUT===
int ret = Math.abs(key.hashCode()) % conns.size();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"shardCount\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int shardCount = 0;
red_line===
shardCount
start_offset===
10
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in processing delete to table: " + tableName + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in processing delete to table: " + tableName + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"propfile\".
scn.ruleId===
1854
scn.suspCodeStr===
String propfile = args[argindex];
red_line===
= args[argindex]
start_offset===
24
end_offset===
40
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
myfileprops.load(new FileInputStream(propfile));
red_line===
new FileInputStream(propfile)
start_offset===
27
end_offset===
56
Python OUTPUT===
myfileprops.load(new FileInputStream(propfile));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"propfile\".
scn.ruleId===
1854
scn.suspCodeStr===
String propfile = args[argindex];
red_line===
= args[argindex]
start_offset===
24
end_offset===
40
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> resultVector = new Vector<HashMap<String, ByteIterator>>();
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
8
end_offset===
45
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> resultVector = new ArrayList < HashMap < String , ByteIterator >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
readResultMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
35
end_offset===
57
Python OUTPUT===
<> ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"user2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
fauxInsertStatement.setString(1, "user2");
red_line===
"user2"
start_offset===
45
end_offset===
52
Python OUTPUT===
fauxInsertStatement.setString(1, "user2");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
assertNumRows(10 * (numRows / 10));
red_line===
*
start_offset===
25
end_offset===
26
Python OUTPUT===
 assertNumRows(10 *(numRows  / 10));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"user0\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
fauxInsertStatement.setString(1, "user0");
red_line===
"user0"
start_offset===
45
end_offset===
52
Python OUTPUT===
fauxInsertStatement.setString(1, "user0");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"user1\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
updateMap.put(FIELD_PREFIX + i, new StringByteIterator(buildDeterministicValue("user1", FIELD_PREFIX + i)));
red_line===
"user1"
start_offset===
95
end_offset===
102
Python OUTPUT===
updateMap.put(FIELD_PREFIX + i, new StringByteIterator(buildDeterministicValue("user1", FIELD_PREFIX + i)));
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Exception: \" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
LOGGER.severe("Exception: " + e.getMessage());
red_line===
"Exception: "
start_offset===
20
end_offset===
33
Python OUTPUT===
LOGGER.severe("Exception: " + e.getMessage());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in update()");
red_line===
"[ERROR]getCollection " + containerKey + " in update()"
start_offset===
22
end_offset===
77
Python OUTPUT===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in update()");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"container\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
Row row = container.createRow();
red_line===
container.createRow
start_offset===
16
end_offset===
35
Python OUTPUT===
Row row = container.createRow();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"container\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
private final static String NOTIFICATION_ADDR = "239.0.0.1";
red_line===
l static String NOT
start_offset===
16
end_offset===
35
Python OUTPUT===
private final static String NOTIFICATION_ADDR = "239.0.0.1";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"container\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
p.setProperty("password", PASS);
red_line===
perty("password", P
start_offset===
16
end_offset===
35
Python OUTPUT===
p.setProperty("password", PASS);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
LOGGER.info("clusterName=" + clusterName + " userName=" + userName);
red_line===
"clusterName=" + clusterName + " userName=" + userName
start_offset===
16
end_offset===
70
Python OUTPUT===
LOGGER.info("clusterName=" + clusterName + " userName=" + userName);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<ColumnInfo> columnInfoList = new ArrayList<ColumnInfo>();
red_line===
<ColumnInfo>
start_offset===
55
end_offset===
67
Python OUTPUT===
<> columnInfoList = new ArrayList < ColumnInfo > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"field0\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
insertStmt.value("field0", "value1");
red_line===
"field0"
start_offset===
21
end_offset===
29
Python OUTPUT===
insertStmt.value("field0", "value1");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ssec\".
scn.ruleId===
1854
scn.suspCodeStr===
ssec = propsCL.getProperty("s3.ssec", null);
red_line===
= propsCL.getProperty("s3.ssec", null)
start_offset===
17
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(accessKeyId);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(accessKeyId); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
String ssec = props.getProperty("s3.ssec");
red_line===
p
start_offset===
27
end_offset===
28
Python OUTPUT===
String ssec = props.getProperty("s3.ssec");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> values = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"PASS\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private final static String PASS = "admin";
red_line===
PASS
start_offset===
32
end_offset===
36
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> resultParam = new Vector<>(NUM_RECORDS);
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
4
end_offset===
41
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> resultParam = new ArrayList < > ( NUM_RECORDS ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static HashMap<String, ByteIterator> MOCK_DATA;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final HashMap < String , ByteIterator > MOCK_DATA ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
protected final static String MOCK_TABLE = "ycsb";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
protected static final String MOCK_TABLE = " ycsb " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY0 = "0";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String MOCK_KEY0 = " 0 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY1 = "1";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String MOCK_KEY1 = " 1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int NUM_RECORDS = 10;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final int NUM_RECORDS = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String FIELD_PREFIX = CoreWorkload.FIELD_NAME_PREFIX_DEFAULT;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String FIELD_PREFIX = CoreWorkload . FIELD_NAME_PREFIX_DEFAULT ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
Path miniSolrCloudClusterTempDirectory = Files.createTempDirectory("miniSolrCloudCluster");
red_line===
rCloud
start_offset===
16
end_offset===
22
Python OUTPUT===
final Path miniSolrCloudClusterTempDirectory = Files . createTempDirectory ( " miniSolrCloudCluster " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"partitionKey\" to prevent any misunderstanding/clash with field \"PARTITIONKEY\".
scn.ruleId===
1845
scn.suspCodeStr===
private static String partitionKey;
red_line===
partitionKey
start_offset===
24
end_offset===
36
Python OUTPUT===
private static String partitionKey;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"storageAccount\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private CloudStorageAccount storageAccount = null;
red_line===
storageAccount
start_offset===
30
end_offset===
44
Python OUTPUT===
 private CloudStorageAccount s= null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
partitionKey = props.getProperty(PARTITIONKEY, PARTITIONKEY_DEFAULT);
red_line===
partitionKey
start_offset===
4
end_offset===
16
Python OUTPUT===
final partitionKey = props . getProperty ( PARTITIONKEY , PARTITIONKEY_DEFAULT ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, EntityProperty> properties = new HashMap<String, EntityProperty>();
red_line===
<String, EntityProperty>
start_offset===
60
end_offset===
84
Python OUTPUT===
<> = new HashMap < String , EntityProperty > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Oracle NoSQL Database does not support Scan semantics");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Oracle NoSQL Database does not support Scan semantics"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> majorPath = new ArrayList<String>();
red_line===
<String>
start_offset===
42
end_offset===
50
Python OUTPUT===
<> majorPath = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Remove the boxing to \"Integer\"; The argument is already of the same type.
scn.ruleId===
2153
scn.suspCodeStr===
tomcat.setPort(Integer.valueOf(port));
red_line===
Integer.valueOf
start_offset===
19
end_offset===
34
Python OUTPUT===
 tomcat.setPort(Intrt)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
54
end_offset===
76
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
new File(filepath).delete();
red_line===
delete
start_offset===
25
end_offset===
31
Python OUTPUT===
new File(filepath).delete();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"protocol\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
clientConfig.setMaxErrorRetry(Integer.parseInt(maxErrorRetry));
red_line===
entConfig.setMa
start_offset===
13
end_offset===
28
Python OUTPUT===
clientConfig.setMaxErrorRetry(Integer.parseInt(maxErrorRetry));
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"BufferedReader\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
BufferedReader file = new BufferedReader(new FileReader(filepath));
red_line===
new BufferedReader(new FileReader(filepath))
start_offset===
28
end_offset===
72
Python OUTPUT===
BufferedReader file = new BufferedReader(new FileReader(filepath));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Keytab file is not readable or not found");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Keytab file is not readable or not found"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"key\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String key = Bytes.toString(rr.getRow());
red_line===
key
start_offset===
15
end_offset===
18
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace charset name argument with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
red_line===
"UTF-8"
start_offset===
79
end_offset===
86
Python OUTPUT===
 BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer responseContent = new StringBuffer();
red_line===
StringBuffer
start_offset===
6
end_offset===
18
Python OUTPUT===
StringBuilder responseContent = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Error accessing HBase table: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
"Error accessing HBase table: "
start_offset===
27
end_offset===
58
Python OUTPUT===
System.err.println("Error accessing HBase table: " + e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String COLUMN_FAMILY = "cf";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String COLUMN_FAMILY = " cf " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> input = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> > input = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> resultParam = new Vector<>(NUM_RECORDS);
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
4
end_offset===
41
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> resultParam = new ArrayList < > ( NUM_RECORDS ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static HashMap<String, ByteIterator> MOCK_DATA;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final HashMap < String , ByteIterator > MOCK_DATA ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
protected final static String MOCK_TABLE = "ycsb";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
protected static final String MOCK_TABLE = " ycsb " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY0 = "0";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String MOCK_KEY0 = " 0 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY1 = "1";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String MOCK_KEY1 = " 1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int NUM_RECORDS = 10;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final int NUM_RECORDS = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String FIELD_PREFIX = CoreWorkload.FIELD_NAME_PREFIX_DEFAULT;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String FIELD_PREFIX = CoreWorkload . FIELD_NAME_PREFIX_DEFAULT ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
Path miniSolrCloudClusterTempDirectory = Files.createTempDirectory("miniSolrCloudCluster");
red_line===
rCloud
start_offset===
16
end_offset===
22
Python OUTPUT===
final Path miniSolrCloudClusterTempDirectory = Files . createTempDirectory ( " miniSolrCloudCluster " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Solr Cloud Mode = " + cloudMode);
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Solr Cloud Mode = " + cloudMode); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
final Vector<HashMap<String, ByteIterator>> resultParam = new Vector<>(NUM_RECORDS);
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
10
end_offset===
47
Python OUTPUT===
final ArrayList < HashMap < String , ByteIterator >> resultParam = new ArrayList < > ( NUM_RECORDS ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String cfName = new String(cfDescriptors.get(i).getName());
red_line===
String
start_offset===
26
end_offset===
32
Python OUTPUT===
 String cfName = new (cfDescriptors.get(i).getName());
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
dbOptions = options;
red_line===
dbOptions
start_offset===
6
end_offset===
15
Python OUTPUT===
final dbOptions = options ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
22
end_offset===
38
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing read for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Doing read for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
System.out.println("Setting up put for key: " + key);
red_line===
t
start_offset===
15
end_offset===
16
Python OUTPUT===
System.out.println("Setting up put for key: " + key);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
System.out.println("Doing delete for key: " + key);
red_line===
t
start_offset===
15
end_offset===
16
Python OUTPUT===
System.out.println("Doing delete for key: " + key);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"updatedResource\".
scn.ruleId===
1854
scn.suspCodeStr===
updatedResource = AzureCosmosClient.client.replaceDocument(documentLink, document, reqOptions);
red_line===
= AzureCosmosClient.client.replaceDocument(documentLink, document, reqOptions)
start_offset===
22
end_offset===
100
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"resourceResponse\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
ResourceResponse<Document> resourceResponse = null;
red_line===
resourceResponse
start_offset===
31
end_offset===
47
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Elasticsearch starting node = " + clusterName);
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Elasticsearch starting node = " + clusterName); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
  e.printS
start_offset===
4
end_offset===
14
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static ElasticsearchClient instance = new ElasticsearchClient();
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final ElasticsearchClient instance = new ElasticsearchClient ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_TABLE = "MOCK_TABLE";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String MOCK_TABLE = " MOCK_TABLE " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" from table: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
LOGGER.debug("readkey: " + key + " from table: " + table);
red_line===
" from table: "
start_offset===
39
end_offset===
54
Python OUTPUT===
LOGGER.debug("readkey: " + key + " from table: " + table);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"endTime\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private long endTime;
red_line===
endTime
start_offset===
15
end_offset===
22
Python OUTPUT===
 private long e 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"startTime\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private long startTime;
red_line===
startTime
start_offset===
15
end_offset===
24
Python OUTPUT===
 private long s 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"runTime\".
scn.ruleId===
1854
scn.suspCodeStr===
long runTime = (endTime - startTime) / 1000000;
red_line===
= (endTime - startTime) / 1000000
start_offset===
19
end_offset===
52
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String path = table + "/" + key;
red_line===
"/"
start_offset===
28
end_offset===
31
Python OUTPUT===
 String path = table + " / " +y; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
private static final Pattern LOCATOR_PATTERN = Pattern.compile("(.+)\\[(\\d+)\\]");
red_line===
;
start_offset===
85
end_offset===
86
Python OUTPUT===
 private static final Pattern LOCATOR_PATTERN = Pattern.compile("(.+)\\[(\\d+)\\]"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace charset name argument with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
voltQueueSQL(getBddStmt, keyspace, new String(rangeMin, "UTF-8"), count);
red_line===
"UTF-8"
start_offset===
62
end_offset===
69
Python OUTPUT===
 voltQueueSQL(getBddStmt, keyspace, new String(rangeMin, "UTF-8"), count); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace charset name argument with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
voltQueueSQL(getBddStmt, keyspace, new String(rangeMin, "UTF-8"), count);
red_line===
"UTF-8"
start_offset===
62
end_offset===
69
Python OUTPUT===
 voltQueueSQL(getBddStmt, keyspace, new String(rangeMin, "UTF-8"), count); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashSet<ByteWrapper> mergeSet = new HashSet<ByteWrapper>();
red_line===
<ByteWrapper>
start_offset===
47
end_offset===
60
Python OUTPUT===
<> mergeSet = new HashSet < ByteWrapper > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace Charset.forName() call with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
private static final Charset UTF8 = Charset.forName("UTF-8");
red_line===
Charset.forName("UTF-8")
start_offset===
38
end_offset===
62
Python OUTPUT===
 private static final Charset UTF8 = Charset.forName("UTF-8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new Exception("Attempt to execute '" + ddlStatements[i] + "' failed:" + cr.getStatusString());
red_line===
Exception
start_offset===
20
end_offset===
29
Python OUTPUT===
throw new Exception("Attempt to execute '" + ddlStatements[i] + "' failed:" + cr.getStatusString());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new Exception("Attempt to execute UpdateClasses failed:" + cr.getStatusString());
red_line===
Exception
start_offset===
16
end_offset===
25
Python OUTPUT===
throw new Exception("Attempt to execute UpdateClasses failed:" + cr.getStatusString());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new Exception("Attempt to execute '" + procStatements[i] + "' failed:" + cr.getStatusString());
red_line===
Exception
start_offset===
18
end_offset===
27
Python OUTPUT===
throw new Exception("Attempt to execute '" + procStatements[i] + "' failed:" + cr.getStatusString());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String partitionTableDDL = "PARTITION TABLE Store ON COLUMN key;\n";
red_line===
partitionTableDDL
start_offset===
23
end_offset===
40
Python OUTPUT===
private static final String partitionTableDDL = " PARTITION TABLE Store ON COLUMN key;\n " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String createScanAllDDL = "CREATE PROCEDURE \n" + "FROM CLASS site.ycsb.db.voltdb.procs.ScanAll;";
red_line===
createScanAllDDL
start_offset===
23
end_offset===
39
Python OUTPUT===
private static final String createScanAllDDL = " CREATE PROCEDURE \n " + " FROM CLASS site.ycsb.db.voltdb.procs.ScanAll; " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String jarFileName = "ycsb-procs.jar";
red_line===
jarFileName
start_offset===
23
end_offset===
34
Python OUTPUT===
private static final String jarFileName = " ycsb-procs.jar " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace Charset.forName() call with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
private static final Charset UTF8 = Charset.forName("UTF-8");
red_line===
Charset.forName("UTF-8")
start_offset===
38
end_offset===
62
Python OUTPUT===
 private static final Charset UTF8 = Charset.forName("UTF-8"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
fis.read(jarFileContents);
red_line===
read
start_offset===
8
end_offset===
12
Python OUTPUT===
fis.read(jarFileContents);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
e.printStackTrace();
red_line===
prin
start_offset===
8
end_offset===
12
Python OUTPUT===
e.printStackTrace();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
e.printStackTrace();
red_line===
prin
start_offset===
8
end_offset===
12
Python OUTPUT===
e.printStackTrace();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
e.printStackTrace();
red_line===
prin
start_offset===
8
end_offset===
12
Python OUTPUT===
e.printStackTrace();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
e.printStackTrace();
red_line===
prin
start_offset===
8
end_offset===
12
Python OUTPUT===
e.printStackTrace();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
e.printStackTrace();
red_line===
prin
start_offset===
8
end_offset===
12
Python OUTPUT===
e.printStackTrace();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
e.printStackTrace();
red_line===
prin
start_offset===
8
end_offset===
12
Python OUTPUT===
e.printStackTrace();
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
FileInputStream fis = new FileInputStream(file);
red_line===
new FileInputStream(file)
start_offset===
26
end_offset===
51
Python OUTPUT===
FileInputStream fis = new FileInputStream(file);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> insertMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
59
end_offset===
81
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, ByteIterator> testResult = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
56
end_offset===
78
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> insertMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
59
end_offset===
81
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, ByteIterator> testResult = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
56
end_offset===
78
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, ByteIterator> testResult = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
56
end_offset===
78
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
sum += 1 / (Math.pow(i + 1, theta));
red_line===
+
start_offset===
29
end_offset===
30
Python OUTPUT===
 sum += 1  /  (Math.pow (i + 1, theta));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> insertMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
61
end_offset===
83
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, ByteIterator> testResult = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
56
end_offset===
78
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<String> columns = new HashSet<String>();
red_line===
<String>
start_offset===
37
end_offset===
45
Python OUTPUT===
<> columns = new HashSet < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Didn\u0027t get OK on read.\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
fail("Didn't get OK on read.");
red_line===
"Didn't get OK on read."
start_offset===
13
end_offset===
37
Python OUTPUT===
fail("Didn't get OK on read.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Returned data not the same as inserted data\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
fail("Returned data not the same as inserted data");
red_line===
"Returned data not the same as inserted data"
start_offset===
13
end_offset===
58
Python OUTPUT===
fail("Returned data not the same as inserted data");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"Integer\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
Integer propertyInteger = new Integer(propertyString);
red_line===
Integer
start_offset===
36
end_offset===
43
Python OUTPUT===
 Integer propertyInteger = new (propertyString);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Too many unacknowledged insertion keys.");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException("Too many unacknowledged insertion keys.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"max\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private final long min, max, itemcount;
red_line===
max
start_offset===
26
end_offset===
29
Python OUTPUT===
private final long min, max, itemcount;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("zetan: " + newzetan);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("zetan: " + newzetan); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("" + gen.nextValue());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("" + gen.nextValue()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"zetan\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private double alpha, zetan, eta, theta, zeta2theta;
red_line===
zetan
start_offset===
24
end_offset===
29
Python OUTPUT===
private double alpha, zetan, eta, theta, zeta2theta;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"sum\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
double pw = p.weight / sum;
red_line===
sum
start_offset===
29
end_offset===
32
Python OUTPUT===
final double pw = p . weight sum ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Reload " + filename);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Reload " + filename); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(gen.nextString());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(gen.nextString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
return intervalOffset * interval * (long) 60;
red_line===
long
start_offset===
42
end_offset===
46
Python OUTPUT===
 return intervalOffset * interval * (long) 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
return intervalOffset * interval * (long) (60 * 60);
red_line===
long
start_offset===
42
end_offset===
46
Python OUTPUT===
 return intervalOffset * interval * (long) * 60); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
return intervalOffset * interval * (long) (60 * 60 * 24);
red_line===
long
start_offset===
42
end_offset===
46
Python OUTPUT===
 return intervalOffset * interval * (long) * 60 * 24); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Hotset fraction out of range. Setting to 0.0");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Hotset fraction out of range. Setting to 0.0"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Hot operation fraction out of range. Setting to 0.0");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Hot operation fraction out of range. Setting to 0.0"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use the original value instead.
scn.ruleId===
2676
scn.suspCodeStr===
value = lowerBound + Math.abs(random.nextLong()) % hotInterval;
red_line===
random.nextLong()
start_offset===
36
end_offset===
53
Python OUTPUT===
value = lowerBound + Math.abs(random.nextLong()) % hotInterval;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
gamma = -Math.log(1.0 - percentile / 100.0) / range;
red_line===
1.0/mean;
start_offset===
60
end_offset===
69
Python OUTPUT===
gamma = -Math.log(1.0 - percentile / 100.0) / range;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Got " + j + " hits.  Expect 900");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Got " + j + " hits. Expect 900"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
  e.printS
start_offset===
4
end_offset===
14
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make member \"CHAR_TYPES_BASIC_ALPHA\" \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
CHAR_TYPES_BASIC_ALPHA = new HashSet<Integer>(2);
red_line===
CHAR_TYPES_BASIC_ALPHA
start_offset===
4
end_offset===
26
Python OUTPUT===
final CHAR_TYPES_BASIC_ALPHA = new HashSet < Integer > ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
CHAR_TYPE_EXTENDED_ALPHANUMERICS = new HashSet<Integer>(8);
red_line===
<Integer>
start_offset===
50
end_offset===
59
Python OUTPUT===
<> < Integer > ( 8 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<Integer> validCharacters = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
55
end_offset===
64
Python OUTPUT===
<> > validCharacters = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<Integer> validCharacters = new ArrayList<Integer>(lastCodePoint);
red_line===
<Integer>
start_offset===
55
end_offset===
64
Python OUTPUT===
<> > validCharacters = new ArrayList < Integer > ( lastCodePoint ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Failed to open hdr histogram output file", e);
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Failed to open hdr histogram output file", e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"measurement\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
g.writeStringField("measurement", measurement);
red_line===
"measurement"
start_offset===
23
end_offset===
36
Python OUTPUT===
g.writeStringField("measurement", measurement);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"metric\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
g.writeStringField("metric", metric);
red_line===
"metric"
start_offset===
23
end_offset===
31
Python OUTPUT===
g.writeStringField("metric", metric);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
g.writeNumberField("value", i);
red_line===
"value"
start_offset===
23
end_offset===
30
Python OUTPUT===
g.writeNumberField("value", i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"metric\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
g.writeStringField("metric", metric);
red_line===
"metric"
start_offset===
23
end_offset===
31
Python OUTPUT===
g.writeStringField("metric", metric);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"granularity\" to prevent any misunderstanding/clash with field \"GRANULARITY\".
scn.ruleId===
1845
scn.suspCodeStr===
private final int granularity;
red_line===
granularity
start_offset===
20
end_offset===
31
Python OUTPUT===
private final int granularity;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
private final Vector<SeriesUnit> measurements;
red_line===
Vector<SeriesUnit>
start_offset===
16
end_offset===
34
Python OUTPUT===
private final ArrayList < SeriesUnit > measurements ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Failed to open raw data output file", e);
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Failed to open raw data output file", e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Raw data measurement: will output to stdout.");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Raw data measurement: will output to stdout."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
outputStream = System.out;
red_line===
System.out
start_offset===
21
end_offset===
31
Python OUTPUT===
 outputStream = System.out; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"thing2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private final OneMeasurement thing1, thing2;
red_line===
thing2
start_offset===
39
end_offset===
45
Python OUTPUT===
private final OneMeasurement thing1, thing2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"buckets\" to prevent any misunderstanding/clash with field \"BUCKETS\".
scn.ruleId===
1845
scn.suspCodeStr===
private final int buckets;
red_line===
buckets
start_offset===
20
end_offset===
27
Python OUTPUT===
private final int buckets;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
double variance = totalsquaredlatency / ((double) operations) - (mean * mean);
red_line===
double
start_offset===
46
end_offset===
52
Python OUTPUT===
 double variance = totalsquaredlatency  /  ( ( ) operations) - (mean *mean);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ERROR: java.lang.ArrayIndexOutOfBoundsException - ignoring and continuing");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("ERROR: java.lang.ArrayIndexOutOfBoundsException - ignoring and continuing"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
final Random random = ThreadLocalRandom.current();
red_line===
nal Random
start_offset===
6
end_offset===
16
Python OUTPUT===
 final Random random = ThreadLocalRandom.current(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
final Random random = ThreadLocalRandom.current();
red_line===
nal Random
start_offset===
6
end_offset===
16
Python OUTPUT===
 final Random random = ThreadLocalRandom.current(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
final Random random = ThreadLocalRandom.current();
red_line===
nal Random
start_offset===
6
end_offset===
16
Python OUTPUT===
 final Random random = ThreadLocalRandom.current(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027MEASUREMENT_TYPE_PROPERTY_DEFAULT\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
case "hdrhistogram":
red_line===
"hdrhistogram"
start_offset===
9
end_offset===
23
Python OUTPUT===
case "hdrhistogram":
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literals.
scn.ruleId===
1125
scn.suspCodeStr===
groupBys[i] = Integer.parseInt(gbKeys[i].trim()) == 0 ? false : true;
red_line===
false
start_offset===
64
end_offset===
69
Python OUTPUT===
 groupBys[i] = Integer.parseInt(gbKeys[i].trim()) == 0 ? false :; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"long\".
scn.ruleId===
1905
scn.suspCodeStr===
return (long) validationBuffer.toString().hashCode() ^ timestamp;
red_line===
long
start_offset===
12
end_offset===
16
Python OUTPUT===
 return (lonalidationBuffer.toString().hashCode() ^ timestamp; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"idx\".
scn.ruleId===
1854
scn.suspCodeStr===
tagCardinality[idx++] = 1;
red_line===
idx++
start_offset===
21
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final Map<String, ByteIterator> tags = new TreeMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
54
end_offset===
76
Python OUTPUT===
<> tags = new TreeMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<String> fields = new HashSet<String>();
red_line===
<String>
start_offset===
36
end_offset===
44
Python OUTPUT===
<> fields = new HashSet < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final Map<String, ByteIterator> cells = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
55
end_offset===
77
Python OUTPUT===
<> cells = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final Map<String, ByteIterator> tags = new TreeMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
54
end_offset===
76
Python OUTPUT===
<> tags = new TreeMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<String> fields = new HashSet<String>();
red_line===
<String>
start_offset===
36
end_offset===
44
Python OUTPUT===
<> fields = new HashSet < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final TreeMap<String, String> validationTags = new TreeMap<String, String>();
red_line===
<String, String>
start_offset===
62
end_offset===
78
Python OUTPUT===
<> > validationTags = new TreeMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
validationTags = new TreeMap<String, String>();
red_line===
<String, String>
start_offset===
40
end_offset===
56
Python OUTPUT===
<> , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Missing thread state.\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new IllegalStateException("Missing thread state.");
red_line===
"Missing thread state."
start_offset===
38
end_offset===
61
Python OUTPUT===
throw new IllegalStateException("Missing thread state.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("recordcount must be bigger than insertstart + insertcount.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("recordcount must be bigger than insertstart + insertcount."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"disksize\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private long disksize;
red_line===
disksize
start_offset===
15
end_offset===
23
Python OUTPUT===
 private long d 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"occupancy\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private double occupancy;
red_line===
occupancy
start_offset===
17
end_offset===
26
Python OUTPUT===
 private double o 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"storageages\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private long storageages;
red_line===
storageages
start_offset===
15
end_offset===
26
Python OUTPUT===
 private long s 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
public static final long DISK_SIZE_PROPERTY_DEFAULT = 100 * 1000 * 1000;
red_line===
*
start_offset===
67
end_offset===
68
Python OUTPUT===
 public static final long DISK_SIZE_PROPERTY_DEFAULT = 100 * 1000 * 1000;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"deleteRecordCount\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int deleteRecordCount;
red_line===
deleteRecordCount
start_offset===
14
end_offset===
31
Python OUTPUT===
 private int d 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"insertRecordCount\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int insertRecordCount;
red_line===
insertRecordCount
start_offset===
14
end_offset===
31
Python OUTPUT===
 private int i 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"readRecordCount\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int readRecordCount;
red_line===
readRecordCount
start_offset===
14
end_offset===
29
Python OUTPUT===
 private int r 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"updateRecordCount\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int updateRecordCount;
red_line===
updateRecordCount
start_offset===
14
end_offset===
31
Python OUTPUT===
 private int u 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<Integer, String> urlMap = new HashMap<Integer, String>();
red_line===
<Integer, String>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> = new HashMap < Integer , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> value = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
53
end_offset===
75
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Usage: java site.ycsb.Client [options]");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Usage: java site.ycsb.Client [options]"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Options:");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Options:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -t:  run the transactions phase of the workload (default)");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -t: run the transactions phase of the workload (default)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("           be specified, and will be processed in the order specified");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" be specified, and will be processed in the order specified"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -p name=value:  specify a property to be passed to the DB and workloads;");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -p name=value: specify a property to be passed to the DB and workloads;"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("          values in the propertyfile");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" values in the propertyfile"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -s:  show status during run (default: no status)");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -s: show status during run (default: no status)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -l label:  use label for status (e.g. to label one experiment out of a whole batch)");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -l label: use label for status (e.g. to label one experiment out of a whole batch)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Required properties:");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Required properties:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("To run the transaction phase from multiple servers, start a separate client on each.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("To run the transaction phase from multiple servers, start a separate client on each."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("To run the load phase from multiple servers, start a separate client on each; additionally,");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("To run the load phase from multiple servers, start a separate client on each; additionally,"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Missing property: " + WORKLOAD_PROPERTY);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Missing property: " + WORKLOAD_PROPERTY); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
out = System.out;
red_line===
System.out
start_offset===
14
end_offset===
24
Python OUTPUT===
 out = System.out; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
exporter.write("TOTAL_GC_TIME_%", "Time(%)", ((double) totalGCTime / runtime) * (double) 100);
red_line===
double
start_offset===
87
end_offset===
93
Python OUTPUT===
 exporter.write("TOTAL_GC_TIME_%","Time(%)",((double) totalGCTime  /  runtime) * 100);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error initializing datastore bindings.");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error initializing datastore bindings."); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
return len - off;
red_line===
-
start_offset===
15
end_offset===
16
Python OUTPUT===
 return len - off;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.print("Downsampling specification for Scan did not match configured downsampling");
red_line===
System.err
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.err.print("Downsampling specification for Scan did not match configured downsampling"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Grouping by arbitrary series is currently not supported");
red_line===
System.err
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.err.println("Grouping by arbitrary series is currently not supported"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace Charset.forName() call with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
Charset cset = Charset.forName("UTF-8");
red_line===
Charset.forName("UTF-8")
start_offset===
19
end_offset===
43
Python OUTPUT===
 Charset cset = Charset.forName("UTF-8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, String> ret = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> ret = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
return str.length() - off;
red_line===
-
start_offset===
24
end_offset===
25
Python OUTPUT===
 return str.length() - off;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case 1:
red_line===
case 1:
start_offset===
4
end_offset===
11
Python OUTPUT===
case 1:
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case 5:
red_line===
case 5:
start_offset===
4
end_offset===
11
Python OUTPUT===
case 5:
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
default:
red_line===
default:
start_offset===
4
end_offset===
12
Python OUTPUT===
default:
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Set<String> latencyTrackedErrors = new HashSet<String>();
red_line===
<String>
start_offset===
56
end_offset===
64
Python OUTPUT===
<> > latencyTrackedErrors = new HashSet < String > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"result\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
measurementName = op + "-" + result.getName();
red_line===
result.getName
start_offset===
37
end_offset===
51
Python OUTPUT===
measurementName = op + "-" + result.getName();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[TIMESTAMPS], Unique, " + timestamps.size());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("[TIMESTAMPS], Unique, " + timestamps.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[INTEGERS], Unique series, " + integers.size());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("[INTEGERS], Unique series, " + integers.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[TIMESTAMPS], Min, " + minTs);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("[TIMESTAMPS], Min, " + minTs); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[TIMESTAMPS], Max, " + maxTs);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("[TIMESTAMPS], Max, " + maxTs); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
timestamps = new HashMap<Long, Integer>();
red_line===
<Long, Integer>
start_offset===
32
end_offset===
47
Python OUTPUT===
<> Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
integers = new HashMap<Integer, Integer>();
red_line===
<Integer, Integer>
start_offset===
30
end_offset===
48
Python OUTPUT===
<> , Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
filtered = new HashSet<String>();
red_line===
<String>
start_offset===
30
end_offset===
38
Python OUTPUT===
<> < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final TreeMap<String, ByteIterator> tree = new TreeMap<String, ByteIterator>(values);
red_line===
<String, ByteIterator>
start_offset===
62
end_offset===
84
Python OUTPUT===
<> tree = new TreeMap < String , ByteIterator > ( values ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final TreeMap<String, ByteIterator> sorted = new TreeMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> sorted = new TreeMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"values\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
isFloat = ((NumericByteIterator) values.get(valueKey)).isFloatingPoint();
red_line===
values.get
start_offset===
41
end_offset===
51
Python OUTPUT===
isFloat = ((NumericByteIterator) values.get(valueKey)).isFloatingPoint();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private volatile AtomicBoolean stopRequested = new AtomicBoolean(false);
red_line===
volatile AtomicBoolean
start_offset===
10
end_offset===
32
Python OUTPUT===
private volatile AtomicBoolean stopRequested = new AtomicBoolean(false);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"workloadstate\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Object workloadstate;
red_line===
workloadstate
start_offset===
17
end_offset===
30
Python OUTPUT===
 private Object w 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"spinSleep\".
scn.ruleId===
3010
scn.suspCodeStr===
spinSleep = Boolean.valueOf(this.props.getProperty("spin.sleep", "false"));
red_line===
spinSleep
start_offset===
4
end_offset===
13
Python OUTPUT===
 spiBoolean.valueOf(this.props.getProperty("spin.sleep", "false")); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> results = new Vector<>();
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
6
end_offset===
43
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> results = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("OUCH");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("OUCH"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(msg);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class dbclass = classLoader.loadClass(dbname);
red_line===
Class
start_offset===
6
end_offset===
11
Python OUTPUT===
Class dbclass = classLoader.loadClass(dbname);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
ret = (DB) dbclass.newInstance();
red_line===
newInstance
start_offset===
25
end_offset===
36
Python OUTPUT===
 ret = (DB) dbclass.newIn
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("YCSB Command Line Client");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("YCSB Command Line Client"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Options:");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Options:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -P filename: Specify a property file");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -P filename: Specify a property file"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -p name=value: Specify a property value");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -p name=value: Specify a property value"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -db classname: Use a specified DB class (can also set the \"db\" property)");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -db classname: Use a specified DB class (can also set the \"db\" property)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println();
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Commands:");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Commands:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  read key [field1 field2 ...] - Read a record");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" read key [field1 field2 ...] - Read a record"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  scan key recordcount [field1 field2 ...] - Scan starting at key");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" scan key recordcount [field1 field2 ...] - Scan starting at key"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  insert key name1=value1 [name2=value2 ...] - Insert a new record");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" insert key name1=value1 [name2=value2 ...] - Insert a new record"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  update key name1=value1 [name2=value2 ...] - Update a record");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" update key name1=value1 [name2=value2 ...] - Update a record"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  delete key - Delete a record");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" delete key - Delete a record"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  table [tablename] - Get or [set] the name of the table");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" table [tablename] - Get or [set] the name of the table"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  quit - Quit");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" quit - Quit"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("YCSB Command Line client");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("YCSB Command Line client"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Type \"help\" for command line help");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Type \"help\" for command line help"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Start with \"-help\" for usage info");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Start with \"-help\" for usage info"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print("> ");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.print("> "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: unknown command \"" + tokens[0] + "\"");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Error: unknown command \"" + tokens[0] + "\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println((System.currentTimeMillis() - st) + " ms");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println((System.currentTimeMillis() - st) + " ms"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(e.getMessage());
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Unknown option " + args[argindex]);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Unknown option " + args[argindex]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: syntax is \"delete keyname\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Error: syntax is \"delete keyname\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Return result: " + ret.getName());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Return result: " + ret.getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: syntax is \"insert keyname name1=value1 [name2=value2 ...]\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Error: syntax is \"insert keyname name1=value1 [name2=value2 ...]\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Result: " + ret.getName());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Result: " + ret.getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: syntax is \"scan keyname scanlength [field1 field2 ...]\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Error: syntax is \"scan keyname scanlength [field1 field2 ...]\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Result: " + ret.getName());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Result: " + ret.getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("0 records");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("0 records"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("--------------------------------");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("--------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Record " + (record++));
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Record " + (record++)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ent.getKey() + "=" + ent.getValue());
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(ent.getKey() + "=" + ent.getValue()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: syntax is \"read keyname [field1 field2 ...]\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Error: syntax is \"read keyname [field1 field2 ...]\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Return code: " + ret.getName());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Return code: " + ret.getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ent.getKey() + "=" + ent.getValue());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(ent.getKey() + "=" + ent.getValue()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Using table \"" + table + "\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Using table \"" + table + "\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: syntax is \"table tablename\"");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Error: syntax is \"table tablename\""); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Maximum execution time specified as: " + maxExecutionTime + " secs");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Maximum execution time specified as: " + maxExecutionTime + " secs"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Could not wait until max specified time, TerminatorThread interrupted.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Could not wait until max specified time, TerminatorThread interrupted."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Maximum time elapsed. Requesting stop for the workload.");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Maximum time elapsed. Requesting stop for the workload."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Stop requested for workload. Now Joining!");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Stop requested for workload. Now Joining!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"verbose\" to prevent any misunderstanding/clash with field \"VERBOSE\".
scn.ruleId===
1845
scn.suspCodeStr===
protected boolean verbose;
red_line===
verbose
start_offset===
20
end_offset===
27
Python OUTPUT===
protected boolean verbose;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("***************** properties *****************");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("***************** properties *****************"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("**********************************************");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("**********************************************"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(sb);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(sb); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[READS], Uniques, " + reads.size());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("[READS], Uniques, " + reads.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[SCANS], Uniques, " + scans.size());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("[SCANS], Uniques, " + scans.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[UPDATES], Uniques, " + updates.size());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("[UPDATES], Uniques, " + updates.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[INSERTS], Uniques, " + inserts.size());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("[INSERTS], Uniques, " + inserts.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[DELETES], Uniques, " + deletes.size());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("[DELETES], Uniques, " + deletes.size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
scans = new HashMap<Integer, Integer>();
red_line===
<Integer, Integer>
start_offset===
27
end_offset===
45
Python OUTPUT===
<> , Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
inserts = new HashMap<Integer, Integer>();
red_line===
<Integer, Integer>
start_offset===
29
end_offset===
47
Python OUTPUT===
<> , Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
deletes = new HashMap<Integer, Integer>();
red_line===
<Integer, Integer>
start_offset===
29
end_offset===
47
Python OUTPUT===
<> Integer , Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> sorted = new ArrayList<String>(fields);
red_line===
<String>
start_offset===
39
end_offset===
47
Python OUTPUT===
<> sorted = new ArrayList < String > ( fields ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int[] ATOC = new int[] { 65, 66, 67 };
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final int [ ] ATOC = new int [ ] { 65 , 66 , 67 } ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BlockingQueue<Long> pending = new ArrayBlockingQueue<Long>(1000);
red_line===
<Long>
start_offset===
56
end_offset===
62
Python OUTPUT===
<> pending = new ArrayBlockingQueue < Long > ( 1000 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(", ");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.print(", "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(new String(entry.getValue().toArray()) + "}");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.print(new String(entry.getValue().toArray()) + "}"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final TreeMap<String, String> validationTags = new TreeMap<String, String>();
red_line===
<String, String>
start_offset===
64
end_offset===
80
Python OUTPUT===
<> > validationTags = new TreeMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> cells = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
59
end_offset===
81
Python OUTPUT===
<> cells = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<String> keys = new ArrayList<String>();
red_line===
<String>
start_offset===
43
end_offset===
51
Python OUTPUT===
<> > keys = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"integers\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
p.put(TimeSeriesWorkload.VALUE_TYPE_PROPERTY, "integers");
red_line===
"integers"
start_offset===
50
end_offset===
60
Python OUTPUT===
p.put(TimeSeriesWorkload.VALUE_TYPE_PROPERTY, "integers");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Expected WorkloadException\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
fail("Expected WorkloadException");
red_line===
"Expected WorkloadException"
start_offset===
11
end_offset===
39
Python OUTPUT===
fail("Expected WorkloadException");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \" WHERE \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
read.append(" WHERE ");
red_line===
" WHERE "
start_offset===
16
end_offset===
25
Python OUTPUT===
read.append(" WHERE ");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"props\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Properties props;
red_line===
props
start_offset===
21
end_offset===
26
Python OUTPUT===
 private Properties p 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Invalid " + key + " specified: " + valueStr);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Invalid " + key + " specified: " + valueStr); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Client connection already initialized.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Client connection already initialized."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Adding shard node URL: " + url);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Adding shard node URL: " + url); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Using shards: " + shardCount + ", batchSize:" + batchSize + ", fetchSize: " + jdbcFetchSize);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Using shards: " + shardCount + ", batchSize:" + batchSize + ", fetchSize: " + jdbcFetchSize); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in initializing the JDBS driver: " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in initializing the JDBS driver: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in database operation: " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in database operation: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Invalid value for fieldcount property. " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Invalid value for fieldcount property. " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in cleanup execution. " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error in cleanup execution. " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in closing the connection. " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in closing the connection. " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in processing read of table " + tableName + ": " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in processing read of table " + tableName + ": " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in processing scan of table: " + tableName + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in processing scan of table: " + tableName + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in processing update to table: " + tableName + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in processing update to table: " + tableName + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Unknown option " + args[argindex]);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Unknown option " + args[argindex]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Missing command.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Missing command."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in processing insert to table: " + tableName + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in processing insert to table: " + tableName + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
conns = new ArrayList<Connection>(3);
red_line===
<Connection>
start_offset===
27
end_offset===
39
Python OUTPUT===
<> < Connection > ( 3 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
cachedStatements = new ConcurrentHashMap<StatementType, PreparedStatement>();
red_line===
<StatementType, PreparedStatement>
start_offset===
46
end_offset===
80
Python OUTPUT===
<> PreparedStatement > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> values = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
fieldKeys += ",";
red_line===
fieldKeys
start_offset===
8
end_offset===
17
Python OUTPUT===
fieldKeys += ",";
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PreparedStatement\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PreparedStatement scanStatement = getShardConnectionByKey(key).prepareStatement(select);
red_line===
getShardConnectionByKey(key).prepareStatement(select)
start_offset===
38
end_offset===
91
Python OUTPUT===
PreparedStatement scanStatement = getShardConnectionByKey(key).prepareStatement(select);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("JdbcCli. Options:");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("JdbcCli. Options:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -p   key=value properties defined.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -p key=value properties defined."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -P   location of the properties file to load.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -P location of the properties file to load."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -c   SQL command to execute.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -c SQL command to execute."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Command  \"" + sql + "\" successfully executed.");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Command \"" + sql + "\" successfully executed."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Closing database connection.");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Closing database connection."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(e.getMessage());
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in executing command. " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in executing command. " + e); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"Statement\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
Statement stmt = conn.createStatement();
red_line===
conn.createStatement()
start_offset===
23
end_offset===
45
Python OUTPUT===
Statement stmt = conn.createStatement();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Create Table Client. Options:");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Create Table Client. Options:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -p   key=value properties defined.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -p key=value properties defined."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -P   location of the properties file to load.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -P location of the properties file to load."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -n   name of the table.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -n name of the table."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  -f   number of fields (default 10).");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" -f number of fields (default 10)."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Table " + tablename + " created..");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Table " + tablename + " created.."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Closing database connection.");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Closing database connection."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(e.getMessage());
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Invalid number for field count");
red_line===
System.err
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.err.println("Invalid number for field count"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Unknown option " + args[argindex]);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Unknown option " + args[argindex]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("table name missing.");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("table name missing."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in creating table. " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in creating table. " + e); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
myfileprops.load(new FileInputStream(propfile));
red_line===
new FileInputStream(propfile)
start_offset===
27
end_offset===
56
Python OUTPUT===
myfileprops.load(new FileInputStream(propfile));
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"Statement\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
Statement stmt = conn.createStatement();
red_line===
conn.createStatement()
start_offset===
23
end_offset===
45
Python OUTPUT===
Statement stmt = conn.createStatement();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"insertMap\".
scn.ruleId===
1854
scn.suspCodeStr===
insertMap = insertRow("user" + i);
red_line===
= insertRow("user" + i)
start_offset===
20
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
jdbcDBClient = null;
red_line===
jdbcDBClient
start_offset===
8
end_offset===
20
Python OUTPUT===
final jdbcDBClient = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> insertMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
61
end_offset===
83
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> updateMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
65
end_offset===
87
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<String> readFields = new HashSet<String>();
red_line===
<String>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> readFields = new HashSet < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> readResultMap = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
65
end_offset===
87
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, HashMap<String, ByteIterator>> keyMap = new HashMap<String, HashMap<String, ByteIterator>>();
red_line===
<String, HashMap<String, ByteIterator>>
start_offset===
71
end_offset===
110
Python OUTPUT===
<> HashMap < String , HashMap < String , ByteIterator >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<String> fieldSet = new HashSet<String>();
red_line===
<String>
start_offset===
42
end_offset===
50
Python OUTPUT===
<> fieldSet = new HashSet < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"user1\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
fauxInsertStatement.setString(1, "user1");
red_line===
"user1"
start_offset===
45
end_offset===
52
Python OUTPUT===
fauxInsertStatement.setString(1, "user1");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"user0\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
String insertKey = "user0";
red_line===
"user0"
start_offset===
31
end_offset===
38
Python OUTPUT===
String insertKey = "user0";
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PreparedStatement\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PreparedStatement fauxInsertStatement = jdbcConnection.prepareStatement(fauxInsertString.toString());
red_line===
jdbcConnection.prepareStatement(fauxInsertString.toString())
start_offset===
52
end_offset===
112
Python OUTPUT===
PreparedStatement fauxInsertStatement = jdbcConnection.prepareStatement(fauxInsertString.toString());
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PreparedStatement\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
jdbcConnection.prepareStatement(createString.toString()).execute();
red_line===
jdbcConnection.prepareStatement(createString.toString())
start_offset===
16
end_offset===
72
Python OUTPUT===
jdbcConnection.prepareStatement(createString.toString()).execute();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"clusterName\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String clusterName = "";
red_line===
clusterName
start_offset===
17
end_offset===
28
Python OUTPUT===
 private String c= ""; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"notificationAddress\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String notificationAddress = "";
red_line===
notificationAddress
start_offset===
17
end_offset===
36
Python OUTPUT===
 private String n= ""; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"notificationMember\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String notificationMember = "";
red_line===
notificationMember
start_offset===
17
end_offset===
35
Python OUTPUT===
 private String n= ""; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"notificationPort\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String notificationPort = "";
red_line===
notificationPort
start_offset===
17
end_offset===
33
Python OUTPUT===
 private String n= ""; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"password\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String password = "";
red_line===
password
start_offset===
17
end_offset===
25
Python OUTPUT===
 private String p= ""; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"userName\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String userName = "";
red_line===
userName
start_offset===
17
end_offset===
25
Python OUTPUT===
 private String u= ""; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<ColumnInfo> columnInfoList = new ArrayList<ColumnInfo>();
red_line===
<ColumnInfo>
start_offset===
51
end_offset===
63
Python OUTPUT===
<> columnInfoList = new ArrayList < ColumnInfo > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String FIELD_LENGTH = "100";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String FIELD_LENGTH = " 100 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in read()");
red_line===
"[ERROR]getCollection " + containerKey + " in read()"
start_offset===
22
end_offset===
75
Python OUTPUT===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in read()");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
LOGGER.info("fieldcount=" + fieldcount + " fieldlength=" + fieldlength);
red_line===
"fieldcount=" + fieldcount + " fieldlength=" + fieldlength
start_offset===
16
end_offset===
74
Python OUTPUT===
LOGGER.info("fieldcount=" + fieldcount + " fieldlength=" + fieldlength);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
LOGGER.severe("Error setCount = " + setCount);
red_line===
"Error setCount = " + setCount
start_offset===
22
end_offset===
52
Python OUTPUT===
LOGGER.severe("Error setCount = " + setCount);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in insert()");
red_line===
"[ERROR]getCollection " + containerKey + " in insert()"
start_offset===
22
end_offset===
77
Python OUTPUT===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in insert()");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in read()");
red_line===
"[ERROR]getCollection " + containerKey + " in read()"
start_offset===
22
end_offset===
75
Python OUTPUT===
LOGGER.severe("[ERROR]getCollection " + containerKey + " in read()");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"containerInfo\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private ContainerInfo containerInfo = null;
red_line===
containerInfo
start_offset===
26
end_offset===
39
Python OUTPUT===
 private ContainerInfo connull; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String TEST_TABLE = "testtable";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String TEST_TABLE = " testtable " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String NOTIFICATION_PORT = "31999";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String NOTIFICATION_PORT = " 31999 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String CLUSTER_NAME = "ycsbcluster";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String CLUSTER_NAME = " ycsbcluster " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String USER_NAME = "admin";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String USER_NAME = " admin " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int FIELD_COUNT = 10;
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final int FIELD_COUNT = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String DEFAULT_ROW_KEY = "user1";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String DEFAULT_ROW_KEY = " user1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> values = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> values = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
58
end_offset===
80
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027VALUE_COLUMN_NAME_PREFIX\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
ByteIterator iter = result.get("field" + i);
red_line===
"field"
start_offset===
43
end_offset===
50
Python OUTPUT===
ByteIterator iter = result.get("field" + i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
values.put(VALUE_COLUMN_NAME_PREFIX + i, new StringByteIterator("value" + i));
red_line===
"value"
start_offset===
76
end_offset===
83
Python OUTPUT===
values.put(VALUE_COLUMN_NAME_PREFIX + i, new StringByteIterator("value" + i));
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private static volatile RemoteCacheManager cacheManager = null;
red_line===
volatile RemoteCacheManager
start_offset===
17
end_offset===
44
Python OUTPUT===
private static volatile RemoteCacheManager cacheManager = null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Solr Cloud Mode = " + cloudMode);
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Solr Cloud Mode = " + cloudMode); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
entry = new HashMap<String, ByteIterator>((int) results.getNumFound());
red_line===
<String, ByteIterator>
start_offset===
27
end_offset===
49
Python OUTPUT===
<> ByteIterator > ( ( int ) results.getNumFound ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"batchSize\" to prevent any misunderstanding/clash with field \"BATCHSIZE\".
scn.ruleId===
1845
scn.suspCodeStr===
private static int batchSize;
red_line===
batchSize
start_offset===
21
end_offset===
30
Python OUTPUT===
private static int batchSize;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"tableClient\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private CloudTableClient tableClient = null;
red_line===
tableClient
start_offset===
27
end_offset===
38
Python OUTPUT===
 private CloudTableClient t= null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
batchSize = Integer.parseInt(props.getProperty(BATCHSIZE, BATCHSIZE_DEFAULT));
red_line===
batchSize
start_offset===
4
end_offset===
13
Python OUTPUT===
final batchSize = Integer . parseInt ( props . getProperty ( BATCHSIZE , BATCHSIZE_DEFAULT ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
curIdx = 0;
red_line===
curIdx
start_offset===
8
end_offset===
14
Python OUTPUT===
final curIdx = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> cur = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
55
end_offset===
77
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> tmp = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
59
end_offset===
81
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, EntityProperty> properties = new HashMap<String, EntityProperty>();
red_line===
<String, EntityProperty>
start_offset===
60
end_offset===
84
Python OUTPUT===
<> = new HashMap < String , EntityProperty > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
HashMap<String, ByteIterator> rowMap = new HashMap();
red_line===
HashMap
start_offset===
51
end_offset===
58
Python OUTPUT===
HashMap<String, ByteIterator> rowMap = new HashMap();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println(e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"tomcat\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private static Tomcat tomcat;
red_line===
tomcat
start_offset===
24
end_offset===
30
Python OUTPUT===
 private static Tomcat t 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
props.setProperty("url.prefix", props.getProperty("url.prefix").replaceAll("PORT", port.toString()));
red_line===
replaceAll
start_offset===
68
end_offset===
78
Python OUTPUT===
props.setProperty ( " url.prefix " , props.getProperty ( " url.prefix " ).replaceAll ( " PORT " , port.toString ( ) ) ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
54
end_offset===
76
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
54
end_offset===
76
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
54
end_offset===
76
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> data = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileReader\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
props.load(new FileReader(RestClientTest.class.getClassLoader().getResource("workload_rest").getPath()));
red_line===
new FileReader(RestClientTest.class.getClassLoader().getResource("workload_rest").getPath())
start_offset===
15
end_offset===
107
Python OUTPUT===
props.load(new FileReader(RestClientTest.class.getClassLoader().getResource("workload_rest").getPath()));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> list = new ArrayList<String>();
red_line===
<String>
start_offset===
37
end_offset===
45
Python OUTPUT===
<> list = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final Set<Class<?>> classes = new HashSet<Class<?>>();
red_line===
<Class<?>>
start_offset===
45
end_offset===
55
Python OUTPUT===
<> classes = new HashSet < Class < ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"headers\" to prevent any misunderstanding/clash with field \"HEADERS\".
scn.ruleId===
1845
scn.suspCodeStr===
private String[] headers;
red_line===
headers
start_offset===
19
end_offset===
26
Python OUTPUT===
private String[] headers;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"props\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Properties props;
red_line===
props
start_offset===
21
end_offset===
26
Python OUTPUT===
 private Properties p 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"StringBuffer\" by an unsynchronized one such as \"StringBuilder\".
scn.ruleId===
1149
scn.suspCodeStr===
StringBuffer responseContent = new StringBuffer();
red_line===
StringBuffer
start_offset===
6
end_offset===
18
Python OUTPUT===
StringBuilder responseContent = new StringBuilder ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private volatile Criteria requestTimedout = new Criteria(false);
red_line===
volatile Criteria
start_offset===
10
end_offset===
27
Python OUTPUT===
private volatile Criteria requestTimedout = new Criteria(false);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"responseCode\".
scn.ruleId===
1854
scn.suspCodeStr===
int responseCode = 200;
red_line===
= 200
start_offset===
21
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace charset name argument with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
red_line===
"UTF-8"
start_offset===
79
end_offset===
86
Python OUTPUT===
 BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"responseCode\".
scn.ruleId===
1854
scn.suspCodeStr===
int responseCode = 200;
red_line===
= 200
start_offset===
21
end_offset===
26
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"responseCode\".
scn.ruleId===
1854
scn.suspCodeStr===
int responseCode = 200;
red_line===
= 200
start_offset===
21
end_offset===
26
Python OUTPUT===
 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to properly start up the cluster. Reason: " + e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Unable to properly start up the cluster. Reason: " + e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("DEBUG ENABLED. Configuration parameters:");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("DEBUG ENABLED. Configuration parameters:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("-----------------------------------------");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("-----------------------------------------"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Hosts: " + Arrays.toString(hosts));
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Hosts: " + Arrays.toString(hosts)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Port: " + port);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Port: " + port); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Bucket Type: " + bucketType);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Bucket Type: " + bucketType); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("R Val: " + rvalue.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("R Val: " + rvalue.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("W Val: " + wvalue.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("W Val: " + wvalue.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Read Retry Count: " + readRetryCount);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Read Retry Count: " + readRetryCount); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Wait Time Before Retry: " + waitTimeBeforeRetry + " ms");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Wait Time Before Retry: " + waitTimeBeforeRetry + " ms"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Transaction Time Limit: " + transactionTimeLimit + " s");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Transaction Time Limit: " + transactionTimeLimit + " s"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Consistency model: " + (strongConsistency ? "Strong" : "Eventual"));
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Consistency model: " + (strongConsistency ? "Strong" : "Eventual")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to read key " + key + ". Reason: NOT FOUND");
red_line===
System.err
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.err.println("Unable to read key " + key + ". Reason: NOT FOUND"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to read key " + key + ". Reason: TIME OUT");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Unable to read key " + key + ". Reason: TIME OUT"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to update key " + key + ". Reason: TIME OUT");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Unable to update key " + key + ". Reason: TIME OUT"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to update key " + key + ". Reason: " + e.toString());
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Unable to update key " + key + ". Reason: " + e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to delete key " + key + ". Reason: TIME OUT");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Unable to delete key " + key + ". Reason: TIME OUT"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to delete key " + key + ". Reason: " + e.toString());
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Unable to delete key " + key + ". Reason: " + e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unable to properly shutdown the cluster. Reason: " + e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Unable to properly shutdown the cluster. Reason: " + e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> scannedValues = new Vector<>();
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
4
end_offset===
41
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> scannedValues = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
final Set<Map.Entry<String, ByteIterator>> theEntries = aTable.entrySet();
red_line===
Entry
start_offset===
18
end_offset===
23
Python OUTPUT===
final Set<Map.Entry<String, ByteIterator>> theEntries = aTable.entrySet();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
anInputStream.read(aSizeBuffer);
red_line===
read
start_offset===
22
end_offset===
26
Python OUTPUT===
anInputStream.read(aSizeBuffer);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
anInputStream.read(aColumnNameBuffer);
red_line===
read
start_offset===
22
end_offset===
26
Python OUTPUT===
anInputStream.read(aColumnNameBuffer);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
anInputStream.read(aSizeBuffer);
red_line===
read
start_offset===
22
end_offset===
26
Python OUTPUT===
anInputStream.read(aSizeBuffer);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Check the return value of the \"read\" call to see how many bytes were read.
scn.ruleId===
2674
scn.suspCodeStr===
anInputStream.read(aColumnValue);
red_line===
read
start_offset===
22
end_offset===
26
Python OUTPUT===
anInputStream.read(aColumnValue);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String bucket = "testBucket";
red_line===
bucket
start_offset===
30
end_offset===
36
Python OUTPUT===
private static final String bucket = "testBucket";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String keyPrefix = "testKey";
red_line===
keyPrefix
start_offset===
30
end_offset===
39
Python OUTPUT===
private static final String keyPrefix = "testKey";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final int recordsToInsert = 20;
red_line===
recordsToInsert
start_offset===
27
end_offset===
42
Python OUTPUT===
private static final int recordsToInsert = 20;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final int recordsToScan = 7;
red_line===
recordsToScan
start_offset===
27
end_offset===
40
Python OUTPUT===
private static final int recordsToScan = 7;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String firstField = "Key number";
red_line===
firstField
start_offset===
30
end_offset===
40
Python OUTPUT===
private static final String firstField = "Key number";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String secondField = "Key number doubled";
red_line===
secondField
start_offset===
30
end_offset===
41
Python OUTPUT===
private static final String secondField = "Key number doubled";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String thirdField = "Key number square";
red_line===
thirdField
start_offset===
30
end_offset===
40
Python OUTPUT===
private static final String thirdField = "Key number square";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"UPDATED\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
updateValue.put(firstField, "UPDATED");
red_line===
"UPDATED"
start_offset===
32
end_offset===
41
Python OUTPUT===
updateValue.put(firstField, "UPDATED");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static HashMap<String, ByteIterator> MOCK_DATA;
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final HashMap < String , ByteIterator > MOCK_DATA ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_TABLE = "MOCK_TABLE";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String MOCK_TABLE = " MOCK_TABLE " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String FIELD_PREFIX = CoreWorkload.FIELD_NAME_PREFIX_DEFAULT;
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String FIELD_PREFIX = CoreWorkload . FIELD_NAME_PREFIX_DEFAULT ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
e.printStackTrace();
red_line===
Trace(
start_offset===
18
end_offset===
24
Python OUTPUT===
final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
e.printStackTrace();
red_line===
Trace(
start_offset===
18
end_offset===
24
Python OUTPUT===
final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
e.printStackTrace();
red_line===
Trace(
start_offset===
18
end_offset===
24
Python OUTPUT===
final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
e.printStackTrace();
red_line===
Trace(
start_offset===
18
end_offset===
24
Python OUTPUT===
final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
e.printStackTrace();
red_line===
Trace(
start_offset===
18
end_offset===
24
Python OUTPUT===
final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"] failed with status [\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new DBException("delete [" + indexKey + "] failed with status [" + statusCode + "]");
red_line===
"] failed with status ["
start_offset===
54
end_offset===
78
Python OUTPUT===
throw new DBException("delete [" + indexKey + "] failed with status [" + statusCode + "]");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"_source\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
@SuppressWarnings("unchecked") final Map<String, Object> source = (Map<String, Object>)hit.get("_source");
red_line===
"_source"
start_offset===
101
end_offset===
110
Python OUTPUT===
@SuppressWarnings("unchecked") final Map<String, Object> source = (Map<String, Object>)hit.get("_source");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"total\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
final int total = (int)hits.get("total");
red_line===
"total"
start_offset===
38
end_offset===
45
Python OUTPUT===
final int total = (int)hits.get("total");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Completed meta prefetch for table " + table);
red_line===
System.out
start_offset===
16
end_offset===
26
Python OUTPUT===
 System.out.println("Completed meta prefetch for table " + table); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<Put> puts = new ArrayList<Put>(n);
red_line===
<Put>
start_offset===
40
end_offset===
45
Python OUTPUT===
<> > puts = new ArrayList < Put > ( n ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Could not decode JSON");
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Could not decode JSON");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Could not encode JSON value");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException("Could not encode JSON value");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"viewName\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String viewName;
red_line===
viewName
start_offset===
17
end_offset===
25
Python OUTPUT===
 private String v 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing put: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing put: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in cleanup execution. " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error in cleanup execution. " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
postgrenosqlDriver = null;
red_line===
postgrenosqlDriver
start_offset===
6
end_offset===
24
Python OUTPUT===
final postgrenosqlDriver = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> values = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"postgreSQLConnection\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private static Connection postgreSQLConnection = null;
red_line===
postgreSQLConnection
start_offset===
28
end_offset===
48
Python OUTPUT===
 private static Connection p= null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> results = new Vector<HashMap<String, ByteIterator>>();
red_line===
<HashMap<String, ByteIterator>>
start_offset===
64
end_offset===
95
Python OUTPUT===
<> new Vector < HashMap < String , ByteIterator >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Insert did not return success (0).\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat("Insert did not return success (0).", result, is(Status.OK));
red_line===
"Insert did not return success (0)."
start_offset===
17
end_offset===
53
Python OUTPUT===
assertThat("Insert did not return success (0).", result, is(Status.OK));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result = "0" + result;
red_line===
result
start_offset===
6
end_offset===
12
Python OUTPUT===
result = "0" + result;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error, must specify a columnfamily for HBase table");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error, must specify a columnfamily for HBase table"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing read for key: " + key);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Doing read for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing get: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing get: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error accessing HBase table: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Got scan result for key: " + key);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Got scan result for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error in getting/parsing scan result: " + e);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Error in getting/parsing scan result: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error accessing HBase table: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Setting up put for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Setting up put for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error accessing HBase table: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing delete for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Doing delete for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing delete: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing delete: " + e); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
private long writeBufferSize = 1024 * 1024 * 12;
red_line===
*
start_offset===
45
end_offset===
46
Python OUTPUT===
 private long writeBufferSize = 1024 * 1024 * 12;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String COLUMN_FAMILY = "cf";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String COLUMN_FAMILY = " cf " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<Put> puts = new ArrayList<Put>(n);
red_line===
<Put>
start_offset===
40
end_offset===
45
Python OUTPUT===
<> > puts = new ArrayList < Put > ( n ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> resultParam = new Vector<>(NUM_RECORDS);
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
4
end_offset===
41
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> resultParam = new ArrayList < > ( NUM_RECORDS ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static HashMap<String, ByteIterator> MOCK_DATA;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final HashMap < String , ByteIterator > MOCK_DATA ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
protected final static String MOCK_TABLE = "ycsb";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
protected static final String MOCK_TABLE = " ycsb " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY0 = "0";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String MOCK_KEY0 = " 0 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY1 = "1";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String MOCK_KEY1 = " 1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int NUM_RECORDS = 10;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final int NUM_RECORDS = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String FIELD_PREFIX = CoreWorkload.FIELD_NAME_PREFIX_DEFAULT;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String FIELD_PREFIX = CoreWorkload . FIELD_NAME_PREFIX_DEFAULT ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Solr Cloud Mode = " + cloudMode);
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Solr Cloud Mode = " + cloudMode); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> read = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
52
end_offset===
74
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> updated = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
55
end_offset===
77
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> updated = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
55
end_offset===
77
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Read did not return success (0).\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat("Read did not return success (0).", result, is(Status.OK));
red_line===
"Read did not return success (0)."
start_offset===
15
end_offset===
49
Python OUTPUT===
assertThat("Read did not return success (0).", result, is(Status.OK));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"readPreference\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
result = addUrlOption(result, "readPreference", "primary");
red_line===
"readPreference"
start_offset===
38
end_offset===
54
Python OUTPUT===
result = addUrlOption(result, "readPreference", "primary");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
mongoClient = null;
red_line===
mongoClient
start_offset===
8
end_offset===
19
Python OUTPUT===
final mongoClient = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Nothing deleted for key " + key);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Nothing deleted for key " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
8
end_offset===
15
Python OUTPUT===
 return;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("mongo connection created with " + url);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("mongo connection created with " + url); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
8
end_offset===
18
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Nothing found in scan for key " + startkey);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Nothing found in scan for key " + startkey); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Nothing found in scan for key " + startkey);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Nothing found in scan for key " + startkey); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
mongoClient = null;
red_line===
mongoClient
start_offset===
8
end_offset===
19
Python OUTPUT===
final mongoClient = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final List<Document> bulkInserts = new ArrayList<Document>();
red_line===
<Document>
start_offset===
58
end_offset===
68
Python OUTPUT===
<> Document > bulkInserts = new ArrayList < Document > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
Map.Entry<String, ByteIterator> entrySrc = itSrc.next();
red_line===
Entry
start_offset===
10
end_offset===
15
Python OUTPUT===
Map.Entry<String, ByteIterator> entrySrc = itSrc.next();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
DATA = new HashMap<String, ByteIterator>(10);
red_line===
<String, ByteIterator>
start_offset===
22
end_offset===
44
Python OUTPUT===
<> ByteIterator > ( 10 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
DATA_UPDATED = new HashMap<String, ByteIterator>(10);
red_line===
<String, ByteIterator>
start_offset===
30
end_offset===
52
Python OUTPUT===
<> ByteIterator > ( 10 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> ret = new HashMap<String, ByteIterator>(10);
red_line===
<String, ByteIterator>
start_offset===
51
end_offset===
73
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( 10 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, String> value = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
47
end_offset===
63
Python OUTPUT===
<> value = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
final Vector<HashMap<String, ByteIterator>> results = new Vector<>();
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
10
end_offset===
47
Python OUTPUT===
final ArrayList < HashMap < String , ByteIterator >> results = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String PORTS = "47500..47509";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String PORTS = " 47500..47509 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String SERVER_NODE_NAME = "YCSB Server Node";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String SERVER_NODE_NAME = " YCSB Server Node " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> strResult = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
57
end_offset===
73
Python OUTPUT===
<> > strResult = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field1", "value2");
red_line===
"value2"
start_offset===
24
end_offset===
32
Python OUTPUT===
input.put("field1", "value2");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027TABLE_NAME\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
qe.setTableName("usertable");
red_line===
"usertable"
start_offset===
20
end_offset===
31
Python OUTPUT===
qe.setTableName("usertable");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value2B\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field1", "value2B");
red_line===
"value2B"
start_offset===
24
end_offset===
33
Python OUTPUT===
input.put("field1", "value2B");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value2A\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field1", "value2A");
red_line===
"value2A"
start_offset===
24
end_offset===
33
Python OUTPUT===
input.put("field1", "value2A");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value4A\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field4", "value4A");
red_line===
"value4A"
start_offset===
24
end_offset===
33
Python OUTPUT===
input.put("field4", "value4A");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String HOST = "127.0.0.1";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String HOST = " 127.0.0.1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String PORTS = "47500..47509";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String PORTS = " 47500..47509 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value2A\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field1", "value2A");
red_line===
"value2A"
start_offset===
24
end_offset===
33
Python OUTPUT===
input.put("field1", "value2A");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"field3\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
input.put("field3", null);
red_line===
"field3"
start_offset===
14
end_offset===
22
Python OUTPUT===
input.put("field3", null);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Impossible MutationType, code bug.");
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Impossible MutationType, code bug.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
skipIndex = false;
red_line===
skipIndex
start_offset===
6
end_offset===
15
Python OUTPUT===
final skipIndex = false ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
\"NullPointerException\" will be thrown when invoking method \"doSingleItemMutation()\".
scn.ruleId===
2259
scn.suspCodeStr===
return doSingleItemMutation(table, key, null, MutationType.DELETE);
red_line===
doSingleItemMutation
start_offset===
11
end_offset===
31
Python OUTPUT===
return doSingleItemMutation(table, key, null, MutationType.DELETE);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"fdb\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private FDB fdb;
red_line===
fdb
start_offset===
14
end_offset===
17
Python OUTPUT===
 private FDB f 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
private Vector<String> batchKeys;
red_line===
Vector<String>
start_offset===
10
end_offset===
24
Python OUTPUT===
private ArrayList < String > batchKeys ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
private Vector<Map<String, ByteIterator>> batchValues;
red_line===
Vector<Map<String, ByteIterator>>
start_offset===
10
end_offset===
43
Python OUTPUT===
private ArrayList < Map < String , ByteIterator >> batchValues ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
batchValues = new Vector<Map<String, ByteIterator>>(batchSize+1);
red_line===
<Map<String, ByteIterator>>
start_offset===
30
end_offset===
57
Python OUTPUT===
<> >> ( batchSize + 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
Record record;
red_line===
record
start_offset===
13
end_offset===
19
Python OUTPUT===
Record record;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Record key " + key + " not found (read)");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Record key " + key + " not found (read)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error while reading key " + key + ": " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error while reading key " + key + ": " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Scan not implemented");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Scan not implemented"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Record key " + key + " not found (delete)");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Record key " + key + " not found (delete)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error while deleting key " + key + ": " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error while deleting key " + key + ": " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
Map.Entry<String, JsonNode> jsonField = jsonFields.next();
red_line===
Entry
start_offset===
10
end_offset===
15
Python OUTPUT===
Map.Entry<String, JsonNode> jsonField = jsonFields.next();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private static volatile OPartitionedDatabasePool databasePool;
red_line===
volatile OPartitionedDatabasePool
start_offset===
17
end_offset===
50
Python OUTPUT===
private static volatile OPartitionedDatabasePool databasePool;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
clientCounter++;
red_line===
clientCounter
start_offset===
6
end_offset===
19
Python OUTPUT===
final clientCounter ++ ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
OGlobalConfiguration.dumpConfiguration(System.out);
red_line===
System.out
start_offset===
47
end_offset===
57
Python OUTPUT===
 OGlobalConfiguration.dumpConfiguration(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
dbChecked = true;
red_line===
dbChecked
start_offset===
10
end_offset===
19
Python OUTPUT===
final dbChecked = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
initialized = true;
red_line===
initialized
start_offset===
8
end_offset===
19
Python OUTPUT===
final initialized = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
clientCounter--;
red_line===
clientCounter
start_offset===
6
end_offset===
19
Python OUTPUT===
final clientCounter -- ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
initialized = false;
red_line===
initialized
start_offset===
8
end_offset===
19
Python OUTPUT===
final initialized = false ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
continue;
red_line===
continue;
start_offset===
8
end_offset===
17
Python OUTPUT===
 continu
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSt
start_offset===
8
end_offset===
17
Python OUTPUT===
 e.printe(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
continue;
red_line===
continue;
start_offset===
8
end_offset===
17
Python OUTPUT===
 continu
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSt
start_offset===
8
end_offset===
17
Python OUTPUT===
 e.printe(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
orientDBClient = new OrientDBClient();
red_line===
orientDBClient
start_offset===
4
end_offset===
18
Python OUTPUT===
final or ientDBClient = new OrientDBClient ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String DEFAULT_ROW_KEY = "user1";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String DEFAULT_ROW_KEY = " user1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static long timeout = 120000L;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final long timeout = 120000 L ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String HOST = "localhost";
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final String HOST = " localhost " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int PORT = 9142;
red_line===
static
start_offset===
16
end_offset===
22
Python OUTPUT===
private static final int PORT = 9142 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
s3Client = null;
red_line===
s3Client
start_offset===
10
end_offset===
18
Python OUTPUT===
final s3Client = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List<String> keyList = new ArrayList();
red_line===
ArrayList
start_offset===
31
end_offset===
40
Python OUTPUT===
List<String> keyList = new ArrayList();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error in the creation of the stream :"+e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error in the creation of the stream :"+e.toString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("The client is shutdown successfully");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("The client is shutdown successfully"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Could not shutdown the S3Client: "+e.toString());
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Could not shutdown the S3Client: "+e.toString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, String> strResult = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
57
end_offset===
73
Python OUTPUT===
<> > strResult = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final Map<String, String> input = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> > input = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Not possible to delete the key "+key);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Not possible to delete the key "+key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Reusing the same client");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Reusing the same client"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Inizializing the S3 connection");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Inizializing the S3 connection"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(endPoint);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(endPoint); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Not possible to get the object :"+key);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Not possible to get the object :"+key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"s3Client\"
scn.ruleId===
1700
scn.suspCodeStr===
private static AmazonS3Client s3Client;
red_line===
s3Client
start_offset===
32
end_offset===
40
Python OUTPUT===
private static AmazonS3Client s3Client;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error, must specify a columnfamily for HBase table");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error, must specify a columnfamily for HBase table"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing read for key: " + key);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Doing read for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing get: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing get: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error accessing HBase table: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Got scan result for key: " + key);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Got scan result for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error in getting/parsing scan result: " + e);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Error in getting/parsing scan result: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error accessing HBase table: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Setting up put for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Setting up put for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing put: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing put: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error accessing HBase table: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error accessing HBase table: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing delete for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Doing delete for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing delete: " + e);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing delete: " + e); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
private long writeBufferSize = 1024 * 1024 * 12;
red_line===
*
start_offset===
45
end_offset===
46
Python OUTPUT===
 private long writeBufferSize = 1024 * 1024 * 12;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
dbOptions = options;
red_line===
dbOptions
start_offset===
4
end_offset===
13
Python OUTPUT===
final dbOptions = options ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
dbOptions = options;
red_line===
dbOptions
start_offset===
6
end_offset===
15
Python OUTPUT===
final dbOptions = options ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new Exception("Expected exactly one row for each read.");
red_line===
Exception
start_offset===
18
end_offset===
27
Python OUTPUT===
throw new Exception("Expected exactly one row for each read.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace Charset.forName() call with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
public static final Charset UTF8_CHARSET = Charset.forName("UTF8");
red_line===
Charset.forName("UTF8")
start_offset===
45
end_offset===
68
Python OUTPUT===
 public static final Charset UTF8_CHARSET = Charset.forName("UTF8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Interrupted during scan: " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Interrupted during scan: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
AzureCosmosClient.client = new DocumentClient(uri, primaryKey, connectionPolicy, consistencyLevel);
red_line===
client
start_offset===
24
end_offset===
30
Python OUTPUT===
final AzureCosmosClient . client = new DocumentClient ( uri , primaryKey , connectionPolicy , consistencyLevel ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
client = null;
red_line===
client
start_offset===
8
end_offset===
14
Python OUTPUT===
final client = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"deletedResource\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
ResourceResponse<Document> deletedResource = null;
red_line===
deletedResource
start_offset===
31
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Elasticsearch node path.home = " + settings.get("path.home"));
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Elasticsearch node path.home = " + settings.get("path.home")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Elasticsearch Remote Mode = " + remoteMode);
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Elasticsearch Remote Mode = " + remoteMode); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Elasticsearch Remote Hosts = " + props.getProperty("es.hosts.list", DEFAULT_REMOTE_HOST));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Elasticsearch Remote Hosts = " + props.getProperty("es.hosts.list", DEFAULT_REMOTE_HOST)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"path.home\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
final String pathHome = props.getProperty("path.home");
red_line===
"path.home"
start_offset===
46
end_offset===
57
Python OUTPUT===
final String pathHome = props.getProperty("path.home");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> resultParam = new Vector<>(10);
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
8
end_offset===
45
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> resultParam = new ArrayList < > ( 10 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static TemporaryFolder temp = new TemporaryFolder();
red_line===
static
start_offset===
28
end_offset===
34
Python OUTPUT===
public static final TemporaryFolder temp = new TemporaryFolder ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static HashMap<String, ByteIterator> MOCK_DATA;
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final HashMap < String , ByteIterator > MOCK_DATA ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY0 = "0";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String MOCK_KEY0 = " 0 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY1 = "1";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String MOCK_KEY1 = " 1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String MOCK_KEY2 = "2";
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String MOCK_KEY2 = " 2 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static String FIELD_PREFIX = CoreWorkload.FIELD_NAME_PREFIX_DEFAULT;
red_line===
static
start_offset===
18
end_offset===
24
Python OUTPUT===
private static final String FIELD_PREFIX = CoreWorkload . FIELD_NAME_PREFIX_DEFAULT ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Assertion Error: impossible primary key type");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException("Assertion Error: impossible primary key type");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"collectionName\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String collectionName;
red_line===
collectionName
start_offset===
17
end_offset===
31
Python OUTPUT===
 private String c 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"dropDBBeforeRun\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Boolean dropDBBeforeRun;
red_line===
dropDBBeforeRun
start_offset===
18
end_offset===
33
Python OUTPUT===
 private Boolean d 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
builder.append(String.format("\n\"%s\" : %s.%s,", field, targetName, field));
red_line===
String.format("\n\"%s\" : %s.%s,", field, targetName, field)
start_offset===
23
end_offset===
83
Python OUTPUT===
builder.append(String.format("\n\"%s\" : %s.%s,", field, targetName, field));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
return new String(byteIter.toArray());
red_line===
String
start_offset===
15
end_offset===
21
Python OUTPUT===
 return new StrteIter.toArray()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> aMap = new HashMap<String, ByteIterator>(aDocument.size());
red_line===
<String, ByteIterator>
start_offset===
56
end_offset===
78
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( aDocument.size ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"false\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String dropDBBeforeRunStr = props.getProperty("arangodb.dropDBBeforeRun", "false");
red_line===
"false"
start_offset===
80
end_offset===
87
Python OUTPUT===
String dropDBBeforeRunStr = props.getProperty("arangodb.dropDBBeforeRun", "false");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
values = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
26
end_offset===
48
Python OUTPUT===
<> ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
60
end_offset===
82
Python OUTPUT===
<> result = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<Put> puts = new ArrayList<Put>(n);
red_line===
<Put>
start_offset===
40
end_offset===
45
Python OUTPUT===
<> > puts = new ArrayList < Put > ( n ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"instance\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private RocksDBClient instance;
red_line===
instance
start_offset===
24
end_offset===
32
Python OUTPUT===
 private RocksDBClient i 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"usertable\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String usertable;
red_line===
usertable
start_offset===
17
end_offset===
26
Python OUTPUT===
 private String u 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String path = table + "/" + key;
red_line===
"/"
start_offset===
28
end_offset===
31
Python OUTPUT===
 String path = table + " / " +y; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String path = table + "/" + key;
red_line===
"/"
start_offset===
28
end_offset===
31
Python OUTPUT===
 String path = table + " / " +y; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \", exception \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
LOG.error("Error during read, table " + table + ", key " + key + ", exception " + e.getMessage());
red_line===
", exception "
start_offset===
71
end_offset===
85
Python OUTPUT===
LOG.error("Error during read, table " + table + ", key " + key + ", exception " + e.getMessage());
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Introduce a new variable instead of reusing the parameter \"result\".
scn.ruleId===
1226
scn.suspCodeStr===
result = tupleConvertFilter(response, fields);
red_line===
result
start_offset===
6
end_offset===
12
Python OUTPUT===
result = tupleConvertFilter(response, fields);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the unnecessary boolean literals.
scn.ruleId===
1125
scn.suspCodeStr===
final boolean prefetchMeta = ("true".equals(getProperties().getProperty(PREFETCH_META_PROPERTY, "false").toLowerCase())) ? true : false;
red_line===
true
start_offset===
127
end_offset===
131
Python OUTPUT===
 final boolean prefetchMeta = ("true".equals(getProperties().getProperty(PREFETCH_META_PROPERTY, "false").toLowerCase())) ? trufalse; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"updatedResource\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
ResourceResponse<Document> updatedResource = null;
red_line===
updatedResource
start_offset===
31
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
fields = new HashSet<String>();
red_line===
<String>
start_offset===
26
end_offset===
34
Python OUTPUT===
<> < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Argument '-p' expected to be in key=value format (e.g., -p operationcount=99999)");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Argument '-p' expected to be in key=value format (e.g., -p operationcount=99999)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Loading workload...");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Loading workload..."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("At least one argument specifying a workload is required.");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("At least one argument specifying a workload is required."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Boolean.parseBoolean\" for this string-to-boolean conversion.
scn.ruleId===
2130
scn.suspCodeStr===
boolean dotransactions = Boolean.valueOf(props.getProperty(DO_TRANSACTIONS_PROPERTY, String.valueOf(true)));
red_line===
Boolean.valueOf(props.getProperty(DO_TRANSACTIONS_PROPERTY, String.valueOf(true)))
start_offset===
29
end_offset===
111
Python OUTPUT===
boolean dotransactions = Boolean.valueOf(props.getProperty(DO_TRANSACTIONS_PROPERTY, String.valueOf(true)));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Missing argument value for -threads.");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Missing argument value for -threads."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Class workloadclass = classLoader.loadClass(props.getProperty(WORKLOAD_PROPERTY));
red_line===
Class
start_offset===
6
end_offset===
11
Python OUTPUT===
Class workloadclass = classLoader.loadClass(props.getProperty(WORKLOAD_PROPERTY));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println();
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.print("Command line:");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.print("Command line:"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Missing argument value for -P.");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Missing argument value for -P."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace(System.out);
red_line===
System.out
start_offset===
24
end_offset===
34
Python OUTPUT===
 e.printStackTrace(System.out); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Unknown option " + args[argindex]);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Unknown option " + args[argindex]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
printStack
start_offset===
8
end_offset===
18
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("YCSB Client " + projectProp.getProperty("version"));
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("YCSB Client " + projectProp.getProperty("version")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(" (might take a few minutes for large data sets)");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println(" (might take a few minutes for large data sets)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Retrying insertion, retry count: " + numOfRetries);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Retrying insertion, retry count: " + numOfRetries); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Unknown DB " + dbname);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Unknown DB " + dbname); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
fields = new HashSet<String>();
red_line===
<String>
start_offset===
26
end_offset===
34
Python OUTPUT===
<> < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> cells = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
53
end_offset===
75
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
fields = new HashSet<String>(fieldnames);
red_line===
<String>
start_offset===
26
end_offset===
34
Python OUTPUT===
<> < String > ( fieldnames ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Missing argument value for -target.");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Missing argument value for -target."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> cells = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
53
end_offset===
75
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println();
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Could not export measurements, error: " + e.getMessage());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Could not export measurements, error: " + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
fields = new HashSet<String>();
red_line===
<String>
start_offset===
26
end_offset===
34
Python OUTPUT===
<> < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Failed check required properties.");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Failed check required properties."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(e.getMessage());
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Warning: the threadcount is bigger than recordcount, the threadcount will be recordcount!");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Warning: the threadcount is bigger than recordcount, the threadcount will be recordcount!"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
myfileprops.load(new FileInputStream(propfile));
red_line===
new FileInputStream(propfile)
start_offset===
27
end_offset===
56
Python OUTPUT===
myfileprops.load(new FileInputStream(propfile));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Missing argument value for -p");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Missing argument value for -p"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Missing argument value for -l.");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Missing argument value for -l."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Unable to open the properties file " + propfile);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Unable to open the properties file " + propfile); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Setting up put for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Setting up put for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Missing argument value for -db.");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Missing argument value for -db."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Thread interrupted");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Thread interrupted"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing delete for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Doing delete for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Starting meta prefetch for table " + table);
red_line===
System.out
start_offset===
16
end_offset===
26
Python OUTPUT===
 System.out.println("Starting meta prefetch for table " + table); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing read for key: " + key);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Doing read for key: " + key); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Thread interrupted");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Thread interrupted"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error, must specify a columnfamily for HBase table");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error, must specify a columnfamily for HBase table"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
ex.printStackTrace();
red_line===
ex.printSt
start_offset===
6
end_offset===
16
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> tuple = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
61
end_offset===
83
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Shutting down client");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("Shutting down client"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Interrupted while sleeping on TMPFAIL backoff.", ex);
red_line===
RuntimeException
start_offset===
20
end_offset===
36
Python OUTPUT===
throw new RuntimeException("Interrupted while sleeping on TMPFAIL backoff.", ex);
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private static volatile CouchbaseEnvironment env = null;
red_line===
volatile CouchbaseEnvironment
start_offset===
17
end_offset===
46
Python OUTPUT===
private static volatile CouchbaseEnvironment env = null;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
Map.Entry<String, JsonNode> jsonField = jsonFields.next();
red_line===
Entry
start_offset===
12
end_offset===
17
Python OUTPUT===
Map.Entry<String, JsonNode> jsonField = jsonFields.next();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"cluster\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Cluster cluster;
red_line===
cluster
start_offset===
18
end_offset===
25
Python OUTPUT===
 private Cluster c 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Could not decode JSON");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException("Could not decode JSON");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Could not encode JSON value");
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException("Could not encode JSON value");
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
8
end_offset===
15
Python OUTPUT===
 return;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
8
end_offset===
15
Python OUTPUT===
 return;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
ex.printStackTrace();
red_line===
.printS
start_offset===
8
end_offset===
15
Python OUTPUT===
 ex.prinrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("mongo client connection created with " + url);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("mongo client connection created with " + url); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
printStack
start_offset===
8
end_offset===
18
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
database = null;
red_line===
database
start_offset===
8
end_offset===
16
Python OUTPUT===
final database = null ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
e1.printStackTrace();
red_line===
e1.print
start_offset===
8
end_offset===
16
Python OUTPUT===
final e1 . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Nothing deleted for key " + key);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Nothing deleted for key " + key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Nothing updated for key " + key);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Nothing updated for key " + key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println(e.toString());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println(e.toString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
ex.printStackTrace();
red_line===
ex.printSt
start_offset===
6
end_offset===
16
Python OUTPUT===
 ex.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"readPreference\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private static ReadPreference readPreference;
red_line===
readPreference
start_offset===
32
end_offset===
46
Python OUTPUT===
 private static ReadPreference r 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing set");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing set"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
HashMap<String, ByteIterator> tuple = new HashMap<String, ByteIterator>(f.size());
red_line===
<String, ByteIterator>
start_offset===
55
end_offset===
77
Python OUTPUT===
<> = new HashMap < String , ByteIterator > ( f.size ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing read: " + e.message);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing read: " + e.message); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing scan");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing scan"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing delete: " + e.message);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing delete: " + e.message); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing delete");
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing delete"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
PreparedStatement prevStmt = insertStmts.putIfAbsent(new HashSet(fields), stmt);
red_line===
HashSet
start_offset===
65
end_offset===
72
Python OUTPUT===
PreparedStatement prevStmt = insertStmts.putIfAbsent(new HashSet(fields), stmt);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String currentRow = new String(reader.get_row());
red_line===
String
start_offset===
34
end_offset===
40
Python OUTPUT===
 String currentRow = new (reader.get_row());
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error doing set: " + e.message);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Error doing set: " + e.message); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
PreparedStatement prevStmt = updateStmts.putIfAbsent(new HashSet(fields), stmt);
red_line===
HashSet
start_offset===
65
end_offset===
72
Python OUTPUT===
PreparedStatement prevStmt = updateStmts.putIfAbsent(new HashSet(fields), stmt);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing delete for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Doing delete for key: " + key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
tuple = new HashMap<String, ByteIterator>();
red_line===
<String, ByteIterator>
start_offset===
27
end_offset===
49
Python OUTPUT===
<> ByteIterator > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Doing read for key: " + key);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Doing read for key: " + key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
  e.printS
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Could not connect to S3 storage: "+ e.toString());
red_line===
System.err
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.err.println("Could not connect to S3 storage: "+ e.toString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(secretKey);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(secretKey); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<ColumnSchema> columns = new ArrayList<ColumnSchema>(fieldCount + 1);
red_line===
<ColumnSchema>
start_offset===
48
end_offset===
62
Python OUTPUT===
<> columns = new ArrayList < ColumnSchema > ( fieldCount + 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(region);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(region); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Connection successfully initialized");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Connection successfully initialized"); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("The file properties doesn't exist "+e.toString());
red_line===
System.err
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.err.println("The file properties doesn't exist "+e.toString()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
10
end_offset===
20
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Not possible to write object :"+key);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Not possible to write object :"+key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
  e.printS
start_offset===
8
end_offset===
18
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Not possible to get the object "+key);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Not possible to get the object "+key); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<HashMap<String, ByteIterator>> results = new Vector<>();
red_line===
Vector<HashMap<String, ByteIterator>>
start_offset===
4
end_offset===
41
Python OUTPUT===
ArrayList < HashMap < String , ByteIterator >> results = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Interrupted during get: " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Interrupted during get: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Failed to insert key: " + key + " " + e.getMessage());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Failed to insert key: " + key + " " + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Error, must specify a columnfamily for Bigtable table");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Error, must specify a columnfamily for Bigtable table"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Failed to delete key: " + key + " " + e.getMessage());
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Failed to delete key: " + key + " " + e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Exception during get: " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Exception during get: " + e); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Exception during scan: " + e);
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Exception during scan: " + e); 
isFixed===
false
==================
