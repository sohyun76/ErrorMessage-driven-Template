RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>();
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Don\u0027t try to be smarter than the JVM, remove this call to run the garbage collector.
scn.ruleId===
1215
scn.suspCodeStr===
System.gc();
red_line===
gc
start_offset===
10
end_offset===
12
Python OUTPUT===
System.gc();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_zM;
red_line===
m_zM
start_offset===
19
end_offset===
23
Python OUTPUT===
private double[] m_zM;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"solutionMatrix\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
distanceMatrix[i][j] = distance.compute(solutionMatrix[i], solutionMatrix[j]);
red_line===
solutionMatrix
start_offset===
48
end_offset===
62
Python OUTPUT===
distanceMatrix[i][j] = distance.compute(solutionMatrix[i], solutionMatrix[j]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
static final public double PIx2 = Math.PI * 2.0;
red_line===
PIx2
start_offset===
29
end_offset===
33
Python OUTPUT===
static final public double PIx2 = Math.PI * 2.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
f[i] = x[i];
red_line===
f[i] = x[i];
start_offset===
6
end_offset===
18
Python OUTPUT===
f[i] = x[i];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"theta\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double N = 4.0, theta = 0.25 * Math.PI;
red_line===
theta
start_offset===
20
end_offset===
25
Python OUTPUT===
double N = 4.0, theta = 0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"nk15\".
scn.ruleId===
3010
scn.suspCodeStr===
nk15 = 2;
red_line===
nk15
start_offset===
4
end_offset===
8
Python OUTPUT===
 nk12; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("invalid link");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("invalid link"); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
beta += Math.sqrt(i + 1) * x.get(i) * x.get(i);
red_line===
+
start_offset===
28
end_offset===
29
Python OUTPUT===
 beta += Math.sqrt(i + 1) * x.get(i) * x.get(i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Element_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] Element_;
red_line===
Element_
start_offset===
23
end_offset===
31
Python OUTPUT===
protected double[][] Element_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TournamentSelection<DoubleSolution> selection = new TournamentSelection<DoubleSolution>(4) ;
red_line===
<DoubleSolution>
start_offset===
75
end_offset===
91
Python OUTPUT===
<> selection = new TournamentSelection < DoubleSolution > ( 4 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Sxx, Sxzu, Sxzd, TQxy, TQxz, TTx, TTxy, TTxz;
red_line===
Sxx
start_offset===
11
end_offset===
14
Python OUTPUT===
double Sxx, Sxzu, Sxzd, TQxy, TQxz, TTx, TTxy, TTxz;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] Omax = new double[geometryCheck_[i].length];
red_line===
Omax
start_offset===
15
end_offset===
19
Python OUTPUT===
double[] Omax = new double[geometryCheck_[i].length];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Rotated Weierstrass Function";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Rotated Weierstrass Function " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"populationSize\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
int populationSize = 2;
red_line===
populationSize
start_offset===
8
end_offset===
22
Python OUTPUT===
int populationSize = 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selectionOperator = new BinaryTournamentSelection<S>(new RankingAndCrowdingDistanceComparator<S>()) ;
red_line===
<S>
start_offset===
53
end_offset===
56
Python OUTPUT===
<> < S > ( new RankingAndCrowdingDistanceComparator < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int number_of_weight_vectors = parseInt(st.nextToken());
red_line===
number_of_weight_vectors
start_offset===
7
end_offset===
31
Python OUTPUT===
int number_of_weight_vectors = parseInt(st.nextToken());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> list = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
37
end_offset===
46
Python OUTPUT===
<> list = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<DoubleSolution> ranking = new DominanceRanking<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
58
end_offset===
74
Python OUTPUT===
<> ranking = new DominanceRanking < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yl\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double y, yl, yu;
red_line===
yl
start_offset===
14
end_offset===
16
Python OUTPUT===
double y, yl, yu;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this integer division to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double coefficient = 1 + (1 - evaluations / maxEvaluations) * 0.15;
red_line===
evaluations / maxEvaluations
start_offset===
32
end_offset===
60
Python OUTPUT===
 double coefficient = 1 + ( 1 - evaluations  /  maxEvaluations) * 0.15;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int[] g_ = (int [])individual.getAttribute("g_");
red_line===
g_
start_offset===
8
end_offset===
10
Python OUTPUT===
int[] g_ = (int [])individual.getAttribute("g_");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(numberOfCores);
red_line===
<DoubleSolution>
start_offset===
60
end_offset===
76
Python OUTPUT===
<> < DoubleSolution > ( numberOfCores ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.indicatorValues = new HashMap<String, List<Double>>();
red_line===
<String, List<Double>>
start_offset===
38
end_offset===
60
Python OUTPUT===
<> < Double >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.iterations = new HashMap<String, List<Integer>>();
red_line===
<String, List<Integer>>
start_offset===
33
end_offset===
56
Python OUTPUT===
<> < Integer >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.charts = new LinkedHashMap<String, XYChart>();
red_line===
<String, XYChart>
start_offset===
35
end_offset===
52
Python OUTPUT===
<> String , XYChart > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sub4\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sub3 = 0, sub4 = 0;
red_line===
sub4
start_offset===
21
end_offset===
25
Python OUTPUT===
double sub3 = 0, sub4 = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"lb2\".
scn.ruleId===
1854
scn.suspCodeStr===
lb2 = 0;
red_line===
= 0
start_offset===
8
end_offset===
11
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tmp2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
float tmp1, tmp2;
red_line===
tmp2
start_offset===
16
end_offset===
20
Python OUTPUT===
float tmp1, tmp2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public ClassLoader loader = ClassLoader.getSystemClassLoader();
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final ClassLoader loader = ClassLoader . getSystemClassLoader ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int num_test_points = 10;
red_line===
num_test_points
start_offset===
10
end_offset===
25
Python OUTPUT===
int num_test_points = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public DecimalFormat numberFormatter = scientificFormatter;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final DecimalFormat numberFormatter = scientificFormatter ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yl\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double y, yl, yu, val, xy;
red_line===
yl
start_offset===
14
end_offset===
16
Python OUTPUT===
double y, yl, yu, val, xy;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<IntegerSolution>() ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> < IntegerSolution > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"dim\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
beta = 2.0 * beta / dim;
red_line===
dim
start_offset===
26
end_offset===
29
Python OUTPUT===
final beta = 2.0 * beta dim ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static long DEFAULT_LIMIT = 100;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
private static final long DEFAULT_LIMIT = 100 ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
jMetalProperties.load(new FileInputStream("../jmetal.properties"));
red_line===
new FileInputStream("../jmetal.properties")
start_offset===
26
end_offset===
69
Python OUTPUT===
jMetalProperties.load(new FileInputStream("../jmetal.properties"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"NewcrowdingDistance\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final SpatialSpreadDeviation<S> NewcrowdingDistance = new SpatialSpreadDeviation<S>() ;
red_line===
NewcrowdingDistance
start_offset===
42
end_offset===
61
Python OUTPUT===
private final SpatialSpreadDeviation<S> NewcrowdingDistance = new SpatialSpreadDeviation<S>() ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"NewcrowdingDistanceComparator\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final Comparator<S> NewcrowdingDistanceComparator = new SpatialSpreadDeviationComparator<S>() ;
red_line===
NewcrowdingDistanceComparator
start_offset===
30
end_offset===
59
Python OUTPUT===
private final Comparator<S> NewcrowdingDistanceComparator = new SpatialSpreadDeviationComparator<S>() ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final Comparator<S> rankComparator = new RankingComparator<S>();
red_line===
<S>
start_offset===
68
end_offset===
71
Python OUTPUT===
<> S > rankComparator = new RankingComparator < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int D = dimension;
red_line===
D
start_offset===
8
end_offset===
9
Python OUTPUT===
int D = dimension;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(stringBuilder.toString());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(stringBuilder.toString()); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
solution.setObjective(1, 1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2);
red_line===
(double)count2
start_offset===
66
end_offset===
80
Python OUTPUT===
final solution . setObjective ( 1 , 1.0 - Math . sqrt ( x [ 0 ] ) + 2.0 * sum2 ( double ) count2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"gY_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int gY_ = 4;
red_line===
gY_
start_offset===
6
end_offset===
9
Python OUTPUT===
int gY_ = 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lSecondOrderGeometric a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean lSecondOrderGeometric;
red_line===
lSecondOrderGeometric
start_offset===
17
end_offset===
38
Python OUTPUT===
public static final boolean lSecondOrderGeometric ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"curFitness\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double maxFitness, curFitness;
red_line===
curFitness
start_offset===
33
end_offset===
43
Python OUTPUT===
double maxFitness, curFitness;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double It2 = Groups_[gr][Iz_] + Groups_[gr][Iy_];
red_line===
It2
start_offset===
11
end_offset===
14
Python OUTPUT===
double It2 = Groups_[gr][Iz_] + Groups_[gr][Iy_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NumIter = 0;
red_line===
NumIter
start_offset===
8
end_offset===
15
Python OUTPUT===
int NumIter = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfNodesRestricts_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfNodesRestricts_;
red_line===
numberOfNodesRestricts_
start_offset===
16
end_offset===
39
Python OUTPUT===
protected int numberOfNodesRestricts_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"STRAIN_COMPRESS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int STRAIN_COMPRESS = 0;
red_line===
STRAIN_COMPRESS
start_offset===
6
end_offset===
21
Python OUTPUT===
int STRAIN_COMPRESS = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainMax_;
red_line===
StrainMax_
start_offset===
23
end_offset===
33
Python OUTPUT===
protected double[][] StrainMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func2_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func2_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/rastrigin_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /rastrigin_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double prev_sum, curr_sum, outer_sum;
red_line===
prev_sum
start_offset===
11
end_offset===
19
Python OUTPUT===
double prev_sum, curr_sum, outer_sum;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"populationSize\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int populationSize;
red_line===
populationSize
start_offset===
14
end_offset===
28
Python OUTPUT===
 private int p 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
private double deltaMax[];
red_line===
[]
start_offset===
25
end_offset===
27
Python OUTPUT===
private double deltaMax[];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"grid\".
scn.ruleId===
1854
scn.suspCodeStr===
grid = 0;
red_line===
= 0
start_offset===
8
end_offset===
11
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"sigma_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double sigma_;
red_line===
sigma_
start_offset===
18
end_offset===
24
Python OUTPUT===
protected double sigma_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<Integer, S> specialSolution =new HashMap<Integer, S>();
red_line===
<Integer, S>
start_offset===
46
end_offset===
58
Python OUTPUT===
<> = new HashMap < Integer , S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"gridDetalSum_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] gridDetalSum_;
red_line===
gridDetalSum_
start_offset===
22
end_offset===
35
Python OUTPUT===
protected double[][] gridDetalSum_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"gridDetal_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int[] gridDetal_;
red_line===
gridDetal_
start_offset===
17
end_offset===
27
Python OUTPUT===
protected int[] gridDetal_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistance = new CrowdingDistance<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
43
end_offset===
59
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Fbs\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double Fbs, Fbr;
red_line===
Fbs
start_offset===
16
end_offset===
19
Python OUTPUT===
private double Fbs, Fbr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"y\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private int x, y;
red_line===
y
start_offset===
17
end_offset===
18
Python OUTPUT===
private int x, y;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>();
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"Fbr\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private double Fbs, Fbr;
red_line===
Fbr
start_offset===
21
end_offset===
24
Python OUTPUT===
private double Fbs, Fbr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"pull\".
scn.ruleId===
1854
scn.suspCodeStr===
pull = null;
red_line===
= null
start_offset===
7
end_offset===
13
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final WeakHashMap<MeasureListener<?>, MeasureListener<?>> listenerCache = new WeakHashMap<MeasureListener<?>, MeasureListener<?>>();
red_line===
<MeasureListener<?>, MeasureListener<?>>
start_offset===
98
end_offset===
138
Python OUTPUT===
<> listenerCache = new WeakHashMap < MeasureListener < ? > , MeasureListener < ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"upper\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
List<Double> lower = new ArrayList<>(getNumberOfVariables()), upper = new ArrayList<>(getNumberOfVariables());
red_line===
upper
start_offset===
66
end_offset===
71
Python OUTPUT===
List<Double> lower = new ArrayList<>(getNumberOfVariables()), upper = new ArrayList<>(getNumberOfVariables());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double y_i = Math.pow(solution.getVariable(i - 1), Ft);
red_line===
y_i
start_offset===
13
end_offset===
16
Python OUTPUT===
double y_i = Math.pow(solution.getVariable(i - 1), Ft);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/rastrigin_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /rastrigin_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
static final public double PIx2 = Math.PI * 2.0;
red_line===
PIx2
start_offset===
29
end_offset===
33
Python OUTPUT===
static final public double PIx2 = Math.PI * 2.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"currX\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double prevX, currX;
red_line===
currX
start_offset===
18
end_offset===
23
Python OUTPUT===
double prevX, currX;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make sublen14 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int sublen14[], len14[];
red_line===
sublen14
start_offset===
13
end_offset===
21
Python OUTPUT===
public static final int sublen14 [ ] , len14 [ ] ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(2) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(0) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double A, Iz, Iy, It;
red_line===
A
start_offset===
11
end_offset===
12
Python OUTPUT===
double A, Iz, Iy, It;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<PointSolution> solutionList = new ArrayList<PointSolution>() ;
red_line===
<PointSolution>
start_offset===
52
end_offset===
67
Python OUTPUT===
<> solutionList = new ArrayList < PointSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double C2 = randomGenerator.nextDouble(c2Min, c2Max);
red_line===
C2
start_offset===
11
end_offset===
13
Python OUTPUT===
double C2 = randomGenerator.nextDouble(c2Min, c2Max);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double mean, sigma, N;
red_line===
N
start_offset===
24
end_offset===
25
Python OUTPUT===
double mean, sigma, N;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"swarm\" which hides the field declared at line 31.
scn.ruleId===
1117
scn.suspCodeStr===
List<DoubleSolution> swarm = new ArrayList<>(swarmSize);
red_line===
swarm
start_offset===
25
end_offset===
30
Python OUTPUT===
List<DoubleSolution> swarm = new ArrayList<>(swarmSize);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<BinarySolution> selection = new NaryRandomSelection<BinarySolution>(2) ;
red_line===
<BinarySolution>
start_offset===
75
end_offset===
91
Python OUTPUT===
<> selection = new NaryRandomSelection < BinarySolution > ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<IntegerSolution> selection = new NaryRandomSelection<IntegerSolution>(solutionsToBeReturned) ;
red_line===
<IntegerSolution>
start_offset===
76
end_offset===
93
Python OUTPUT===
<> selection = new NaryRandomSelection < IntegerSolution > ( solutionsToBeReturned ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"deltaq\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double rnd, deltaq, tempDelta;
red_line===
deltaq
start_offset===
16
end_offset===
22
Python OUTPUT===
double rnd, deltaq, tempDelta;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract this nested ternary operation into an independent statement.
scn.ruleId===
3358
scn.suspCodeStr===
return (x == y)?0:(y < x)?1:(-1);
red_line===
(y < x)?1:(-1)
start_offset===
23
end_offset===
37
Python OUTPUT===
return (x == y)?0:(y < x)?1:(-1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static PATH_FOLDER\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static String PATH_FOLDER = "html";
red_line===
PATH_FOLDER
start_offset===
23
end_offset===
34
Python OUTPUT===
public static final String PATH_FOLDER = " html " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
PATH_FOLDER = pathFolder;
red_line===
PATH_FOLDER
start_offset===
4
end_offset===
15
Python OUTPUT===
final PATH_FOLDER = pathFolder ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"dim\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
beta = 2.0 * beta / dim;
red_line===
dim
start_offset===
26
end_offset===
29
Python OUTPUT===
final beta = 2.0 * beta dim ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tmp1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
float tmp, tmp1, tmp2;
red_line===
tmp1
start_offset===
15
end_offset===
19
Python OUTPUT===
float tmp, tmp1, tmp2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"STRAIN_CUT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int STRAIN_CUT = 2;
red_line===
STRAIN_CUT
start_offset===
6
end_offset===
16
Python OUTPUT===
int STRAIN_CUT = 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"G_\" to prevent any misunderstanding/clash with field \"g_\".
scn.ruleId===
1845
scn.suspCodeStr===
int G_ = 13;
red_line===
G_
start_offset===
6
end_offset===
8
Python OUTPUT===
int G_ = 13;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"g_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double g_ = 9.81;
red_line===
g_
start_offset===
9
end_offset===
11
Python OUTPUT===
double g_ = 9.81;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double It1 = 1.3 * 1 / 3 * (2 * z * Math.pow(ey, 3) + 2 * yi * Math.pow(ez, 3));
red_line===
It1
start_offset===
11
end_offset===
14
Python OUTPUT===
double It1 = 1.3 * 1 / 3 * (2 * z * Math.pow(ey, 3) + 2 * yi * Math.pow(ez, 3));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[][] R = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
R
start_offset===
15
end_offset===
16
Python OUTPUT===
double[][] R = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: data file EBEs not readed");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Error: data file EBEs not readed"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of constraints for Stress: " + (numberOfGroupElements_ * 3));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of constraints for Stress: " + (numberOfGroupElements_ * 3)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double S = Groups_[idx][AREA];
red_line===
S
start_offset===
11
end_offset===
12
Python OUTPUT===
double S = Groups_[idx][AREA];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RpTij\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] RpTij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
RpTij
start_offset===
13
end_offset===
18
Python OUTPUT===
double[][] RpTij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iiy = yi * Math.pow(zi, 3) / 12;
red_line===
Iiy
start_offset===
11
end_offset===
14
Python OUTPUT===
double Iiy = yi * Math.pow(zi, 3) / 12;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"r\".
scn.ruleId===
1854
scn.suspCodeStr===
double[][] r = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_][numberOfLibertyDegree_]
start_offset===
17
end_offset===
77
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/E_ScafferF6_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /E_ScafferF6_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/sphere_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /sphere_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"output\".
scn.ruleId===
1488
scn.suspCodeStr===
Double output 	= (input-min.get(index))/diff;
red_line===
(input-min.get(index))/diff
start_offset===
19
end_offset===
46
Python OUTPUT===
Double output 	= (input-min.get(index))/diff;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.dominanceComparator = new DominanceComparator<S>();
red_line===
<S>
start_offset===
54
end_offset===
57
Python OUTPUT===
<> new DominanceComparator < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"L11\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public int K11, L11;
red_line===
L11
start_offset===
18
end_offset===
21
Python OUTPUT===
public int K11, L11;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result += "" + obj + " ";
red_line===
result
start_offset===
6
end_offset===
12
Python OUTPUT===
result += "" + obj + " ";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RpTji\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] RpTji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
RpTji
start_offset===
13
end_offset===
18
Python OUTPUT===
double[][] RpTji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainResidualCut_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[] StrainResidualCut_;
red_line===
StrainResidualCut_
start_offset===
21
end_offset===
39
Python OUTPUT===
protected double[] StrainResidualCut_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"L_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int L_ = 3;
red_line===
L_
start_offset===
6
end_offset===
8
Python OUTPUT===
int L_ = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"distance1\".
scn.ruleId===
1854
scn.suspCodeStr===
double distance1 = Double.MIN_VALUE ;
red_line===
= Double.MIN_VALUE
start_offset===
23
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
budders = new ArrayList<S>(population.subList(0, (int) Fa * population.size()));
red_line===
<S>
start_offset===
26
end_offset===
29
Python OUTPUT===
<> < S > ( population.subList ( 0 , ( int ) Fa * population.size ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"two\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
DoubleSolution one, two;
red_line===
two
start_offset===
24
end_offset===
27
Python OUTPUT===
DoubleSolution one, two;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double At = z * y;
red_line===
At
start_offset===
11
end_offset===
13
Python OUTPUT===
double At = z * y;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: transversal section not considerated in " + gr + " group");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Error: transversal section not considerated in " + gr + " group"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of Constraints: " + numberOfConstraints_);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of Constraints: " + numberOfConstraints_); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/rosenbrock_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /rosenbrock_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SelectionOperator<List<BinarySolution>, BinarySolution> selectionOperator = new BinaryTournamentSelection<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
109
end_offset===
125
Python OUTPUT===
<> BinarySolution > , BinarySolution > selectionOperator = new BinaryTournamentSelection < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tmp2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
float tmp1 = (float) 0.0, tmp2 = (float) 0.0;
red_line===
tmp2
start_offset===
30
end_offset===
34
Python OUTPUT===
float tmp1 = (float) 0.0, tmp2 = (float) 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
int var = 0;
red_line===
var
start_offset===
8
end_offset===
11
Python OUTPUT===
int var = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"BETA\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int BETA = 3;
red_line===
BETA
start_offset===
6
end_offset===
10
Python OUTPUT===
int BETA = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int[] g_ = (int [])individual.getAttribute("g_");
red_line===
g_
start_offset===
8
end_offset===
10
Python OUTPUT===
int[] g_ = (int [])individual.getAttribute("g_");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<DoubleSolution> offspring = new ArrayList<DoubleSolution>(2);
red_line===
<DoubleSolution>
start_offset===
50
end_offset===
66
Python OUTPUT===
<> offspring = new ArrayList < DoubleSolution > ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
strengthRawFitness = new StrengthRawFitness<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
47
end_offset===
63
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<S> ranking = new DominanceRanking<S>(dominanceComparator);
red_line===
<S>
start_offset===
45
end_offset===
48
Python OUTPUT===
<> ranking = new DominanceRanking < S > ( dominanceComparator ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
java.util.Random rnd = new java.util.Random();
red_line===
java.util.Random
start_offset===
33
end_offset===
49
Python OUTPUT===
java.util.Random rnd = new java.util.Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double round_trip_miles = 5000.0;
red_line===
round_trip_miles
start_offset===
11
end_offset===
27
Python OUTPUT===
double round_trip_miles = 5000.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double miscellaneous_DWT = 2.0 * Math.pow(DWT, 0.5);
red_line===
miscellaneous_DWT
start_offset===
11
end_offset===
28
Python OUTPUT===
double miscellaneous_DWT = 2.0 * Math.pow(DWT, 0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"d2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double d1, d2, nl;
red_line===
d2
start_offset===
17
end_offset===
19
Python OUTPUT===
double d1, d2, nl;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<S> ranking = new DominanceRanking<S>();
red_line===
<S>
start_offset===
46
end_offset===
49
Python OUTPUT===
<> ranking = new DominanceRanking < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"k_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int k_;
red_line===
k_
start_offset===
15
end_offset===
17
Python OUTPUT===
protected int k_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
int[] hypercubes = new int[(int)Math.pow(2.0, bisections * objectives)] ;
red_line===
*
start_offset===
61
end_offset===
62
Python OUTPUT===
 int[] hypercubes = new int[( int)Math.pow(2.0, bisections * objectives)] ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"eji\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] eji = new double[numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_]
start_offset===
19
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int best_idd = (int) (randomGenerator.nextDouble() * candidate.size());
red_line===
best_idd
start_offset===
10
end_offset===
18
Python OUTPUT===
int best_idd = (int) (randomGenerator.nextDouble() * candidate.size());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case -1:
red_line===
case -1:
start_offset===
10
end_offset===
18
Python OUTPUT===
case -1:
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double alpha[] = new double[2];
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
double alpha[] = new double[2];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
time = (1.0d / (double) nT) * Math.floor(counter / (double) tauT);
red_line===
double
start_offset===
20
end_offset===
26
Python OUTPUT===
 time = (1.0d  /  (double) nT) * Math.floor (counter  /   tauT);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"float\".
scn.ruleId===
1905
scn.suspCodeStr===
return correctTo01((float) 1 + tmp * (tmp1 + tmp2 + (float) 1.0 / B));
red_line===
float
start_offset===
24
end_offset===
29
Python OUTPUT===
 return correctTo01((float)1 + tmp *(tmp1 + tmp2 + 1.0  /  B));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lBuckling a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean lBuckling;
red_line===
lBuckling
start_offset===
17
end_offset===
26
Python OUTPUT===
public static final boolean lBuckling ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double outfit_weight = 1.0 * Math.pow(x_L , 0.8) * Math.pow(x_B , 0.6) * Math.pow(x_D, 0.3) * Math.pow(x_CB, 0.1);
red_line===
outfit_weight
start_offset===
11
end_offset===
24
Python OUTPUT===
double outfit_weight = 1.0 * Math.pow(x_L , 0.8) * Math.pow(x_B , 0.6) * Math.pow(x_D, 0.3) * Math.pow(x_CB, 0.1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double running_costs = 40000.0 * Math.pow(DWT, 0.3);
red_line===
running_costs
start_offset===
11
end_offset===
24
Python OUTPUT===
double running_costs = 40000.0 * Math.pow(DWT, 0.3);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double port_days = 2.0 * ((cargo_DWT / handling_rate) + 0.5);
red_line===
port_days
start_offset===
11
end_offset===
20
Python OUTPUT===
double port_days = 2.0 * ((cargo_DWT / handling_rate) + 0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double ship_cost = 1.3 * ((2000.0 * Math.pow(steel_weight, 0.85))  + (3500.0 * outfit_weight) + (2400.0 * Math.pow(power, 0.8)));
red_line===
ship_cost
start_offset===
11
end_offset===
20
Python OUTPUT===
double ship_cost = 1.3 * ((2000.0 * Math.pow(steel_weight, 0.85))  + (3500.0 * outfit_weight) + (2400.0 * Math.pow(power, 0.8)));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double V = 0.5144 * x_Vk;
red_line===
V
start_offset===
11
end_offset===
12
Python OUTPUT===
double V = 0.5144 * x_Vk;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double cargo_DWT = DWT - fuel_carried - miscellaneous_DWT;
red_line===
cargo_DWT
start_offset===
11
end_offset===
20
Python OUTPUT===
double cargo_DWT = DWT - fuel_carried - miscellaneous_DWT;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainMxzMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainMxzMin_;
red_line===
StrainMxzMin_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] StrainMxzMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"Qxy\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double Nxx, Qxy, Qxz, Mxx, Mxy, Mxz;
red_line===
Qxy
start_offset===
16
end_offset===
19
Python OUTPUT===
double Nxx, Qxy, Qxz, Mxx, Mxy, Mxz;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>();
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DisplacementNodes_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] DisplacementNodes_;
red_line===
DisplacementNodes_
start_offset===
23
end_offset===
41
Python OUTPUT===
protected double[][] DisplacementNodes_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfVariables_ = 0;
red_line===
numberOfVariables_
start_offset===
8
end_offset===
26
Python OUTPUT===
int numberOfVariables_ = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"dY_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int dY_ = 25;
red_line===
dY_
start_offset===
6
end_offset===
9
Python OUTPUT===
int dY_ = 25;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] test_f = new double[num_test_points];
red_line===
test_f
start_offset===
15
end_offset===
21
Python OUTPUT===
double[] test_f = new double[num_test_points];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"epsJ\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double eps, epsJ = 0.0, epsK = 0.0, epsTemp;
red_line===
epsJ
start_offset===
16
end_offset===
20
Python OUTPUT===
double eps, epsJ = 0.0, epsK = 0.0, epsTemp;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_zM;
red_line===
m_zM
start_offset===
19
end_offset===
23
Python OUTPUT===
private double[] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new SpatialSpreadDeviationSelection<DoubleSolution>(5);
red_line===
<DoubleSolution>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> < DoubleSolution > ( 5 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
CrowdingDistance<DoubleSolution> crowdingDistance = new CrowdingDistance<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
76
end_offset===
92
Python OUTPUT===
<> crowdingDistance = new CrowdingDistance < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make leaders a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<ArchiveWithReferencePoint<DoubleSolution>> leaders;
red_line===
leaders
start_offset===
57
end_offset===
64
Python OUTPUT===
public static final List < ArchiveWithReferencePoint < DoubleSolution >> leaders ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<S>();
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.numberOfViolatedConstraints = new NumberOfViolatedConstraints<S>() ;
red_line===
<S>
start_offset===
74
end_offset===
77
Python OUTPUT===
<> new NumberOfViolatedConstraints < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make zM a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[][] zM;
red_line===
zM
start_offset===
20
end_offset===
22
Python OUTPUT===
public static final double [ ] [ ] zM ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.overallConstraintViolation = new OverallConstraintViolation<S>();
red_line===
<S>
start_offset===
72
end_offset===
75
Python OUTPUT===
<> new OverallConstraintViolation < S > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this integer division to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double coefficient = 1 + (1 - evaluations / maxEvaluations) * 0.15;
red_line===
evaluations / maxEvaluations
start_offset===
32
end_offset===
60
Python OUTPUT===
 double coefficient = 1 + ( 1 - evaluations  /  maxEvaluations) * 0.15;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"childGridNum_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int childGridNum_;
red_line===
childGridNum_
start_offset===
15
end_offset===
28
Python OUTPUT===
protected int childGridNum_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func2_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func2_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
lBuckling = Boolean.valueOf(txt);
red_line===
lBuckling
start_offset===
8
end_offset===
17
Python OUTPUT===
final lBuckling = Boolean . valueOf ( txt ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
lLoadsOwnWeight = Boolean.valueOf(txt);
red_line===
lLoadsOwnWeight
start_offset===
8
end_offset===
23
Python OUTPUT===
final lLoadsOwnWeight = Boolean . valueOf ( txt ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
lSecondOrderGeometric = Boolean.valueOf(txt);
red_line===
lSecondOrderGeometric
start_offset===
8
end_offset===
29
Python OUTPUT===
final lSecondOrderGeometric = Boolean . valueOf ( txt ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"vj\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int vi, vj;
red_line===
vj
start_offset===
12
end_offset===
14
Python OUTPUT===
int vi, vj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"SZ\".
scn.ruleId===
1854
scn.suspCodeStr===
double SZ = 0.0;
red_line===
= 0.0
start_offset===
16
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"h\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double g = 0, h = 0, e = 0, a;
red_line===
h
start_offset===
22
end_offset===
23
Python OUTPUT===
double g = 0, h = 0, e = 0, a;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double alpha[] = new double[3];
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
double alpha[] = new double[3];
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"dim\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
beta = 2.0 * (sum - 2 * prod + 2) / dim;
red_line===
dim
start_offset===
42
end_offset===
45
Python OUTPUT===
final beta = 2.0 * ( sum - 2 * prod + 2 ) dim ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Double> aa = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> aa = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"h\".
scn.ruleId===
1488
scn.suspCodeStr===
double h = 1 - Math.sqrt(f / g);
red_line===
1 - Math.sqrt(f / g)
start_offset===
15
end_offset===
35
Python OUTPUT===
double h = 1 - Math.sqrt(f / g);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func3_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func3_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ex.getMessage());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(ex.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<DoubleSolution> solutions = new ArrayList<DoubleSolution>(3);
red_line===
<DoubleSolution>
start_offset===
50
end_offset===
66
Python OUTPUT===
<> solutions = new ArrayList < DoubleSolution > ( 3 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L13<IntegerSolution> neighborhood = new L13<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
47
end_offset===
64
Python OUTPUT===
<> neighborhood = new L13 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Double> bb = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> bb = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"h\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double g = 0, h = 0, a, b;
red_line===
h
start_offset===
22
end_offset===
23
Python OUTPUT===
double g = 0, h = 0, a, b;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VARIABLES\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VARIABLES = 19;
red_line===
VARIABLES
start_offset===
6
end_offset===
15
Python OUTPUT===
int VARIABLES = 19;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"eY_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int eY_ = 22;
red_line===
eY_
start_offset===
6
end_offset===
9
Python OUTPUT===
int eY_ = 22;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double S = Groups_[idx][AREA];
red_line===
S
start_offset===
11
end_offset===
12
Python OUTPUT===
double S = Groups_[idx][AREA];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"BLijZ_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int BLijZ_ = 15;
red_line===
BLijZ_
start_offset===
6
end_offset===
12
Python OUTPUT===
int BLijZ_ = 15;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"rZ_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int rZ_ = 27;
red_line===
rZ_
start_offset===
6
end_offset===
9
Python OUTPUT===
int rZ_ = 27;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(numberOfCores);
red_line===
<DoubleSolution>
start_offset===
58
end_offset===
74
Python OUTPUT===
<> < DoubleSolution > ( numberOfCores ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Fitness: \" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
JMetalLogger.logger.info("Fitness: " + solution.getObjective(0)) ;
red_line===
"Fitness: "
start_offset===
29
end_offset===
40
Python OUTPUT===
JMetalLogger.logger.info("Fitness: " + solution.getObjective(0)) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"AxialForcei_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[] AxialForcei_;
red_line===
AxialForcei_
start_offset===
21
end_offset===
33
Python OUTPUT===
protected double[] AxialForcei_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
txt = txt + OF_[i] + " ";
red_line===
txt
start_offset===
6
end_offset===
9
Python OUTPUT===
txt = txt + OF_[i] + " ";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainMxyMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainMxyMax_;
red_line===
StrainMxyMax_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] StrainMxyMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of groups to check geometry: " + numberOfGroupsToCheckGeometry_);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of groups to check geometry: " + numberOfGroupsToCheckGeometry_); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"aY_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int aY_ = 1;
red_line===
aY_
start_offset===
6
end_offset===
9
Python OUTPUT===
int aY_ = 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iey = y * Math.pow(z, 3) / 12;
red_line===
Iey
start_offset===
11
end_offset===
14
Python OUTPUT===
double Iey = y * Math.pow(z, 3) / 12;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Nj = AxialForcej_[e];
red_line===
Nj
start_offset===
11
end_offset===
13
Python OUTPUT===
double Nj = AxialForcej_[e];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"eii\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] eii = new double[numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_]
start_offset===
19
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Ei_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Ei_ = 5;
red_line===
Ei_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Ei_ = 5;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"STRESS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int STRESS = 31;
red_line===
STRESS
start_offset===
6
end_offset===
12
Python OUTPUT===
int STRESS = 31;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KjjSOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KjjSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KjjSOG
start_offset===
13
end_offset===
19
Python OUTPUT===
double[][] KjjSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PrintStream ps = new PrintStream("EBEs - Groups Elements.txt");
red_line===
new PrintStream("EBEs - Groups Elements.txt")
start_offset===
23
end_offset===
68
Python OUTPUT===
PrintStream ps = new PrintStream("EBEs - Groups Elements.txt");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"uY_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int uY_ = 24;
red_line===
uY_
start_offset===
6
end_offset===
9
Python OUTPUT===
int uY_ = 24;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Y = 0;
red_line===
Y
start_offset===
11
end_offset===
12
Python OUTPUT===
double Y = 0;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PrintStream ps = new PrintStream("EBEs-MKLB(" + e + ").txt");
red_line===
new PrintStream("EBEs-MKLB(" + e + ").txt")
start_offset===
23
end_offset===
66
Python OUTPUT===
PrintStream ps = new PrintStream("EBEs-MKLB(" + e + ").txt");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Effortj_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][][] Effortj_;
red_line===
Effortj_
start_offset===
25
end_offset===
33
Python OUTPUT===
protected double[][][] Effortj_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
public int sublen15[], len15[];
red_line===
[]
start_offset===
21
end_offset===
23
Python OUTPUT===
public int sublen15[], len15[];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Rastrigin's Function";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Rastrigin's Function " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SPECIFIC_WEIGHT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int SPECIFIC_WEIGHT = 30;
red_line===
SPECIFIC_WEIGHT
start_offset===
6
end_offset===
21
Python OUTPUT===
int SPECIFIC_WEIGHT = 30;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(numberOfCores);
red_line===
<DoubleSolution>
start_offset===
58
end_offset===
74
Python OUTPUT===
<> < DoubleSolution > ( numberOfCores ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Double> bb = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> bb = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Qa_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Qa_ = 6;
red_line===
Qa_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Qa_ = 6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
57
end_offset===
73
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"distance2\".
scn.ruleId===
1854
scn.suspCodeStr===
double distance2 = Double.MIN_VALUE ;
red_line===
= Double.MIN_VALUE
start_offset===
23
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.nadirPoint     = new ArrayList<Double>(this.getProblem().getNumberOfObjectives());
red_line===
<Double>
start_offset===
37
end_offset===
45
Python OUTPUT===
<> new ArrayList < Double > ( this.getProblem ( ).getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.referencePoint = new ArrayList<Double>(this.getProblem().getNumberOfObjectives());
red_line===
<Double>
start_offset===
37
end_offset===
45
Python OUTPUT===
<> new ArrayList < Double > ( this.getProblem ( ).getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func1_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func1_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(3, 3, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( 3 , 3 , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"objectives\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertNotNull(ReflectionTestUtils.getField(solution, "objectives")) ;
red_line===
"objectives"
start_offset===
57
end_offset===
69
Python OUTPUT===
assertNotNull(ReflectionTestUtils.getField(solution, "objectives")) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>(violationComparator);
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( violationComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SimplePushMeasure<Object> measure1 = new SimplePushMeasure<Object>();
red_line===
<Object>
start_offset===
60
end_offset===
68
Python OUTPUT===
<> measure1 = new SimplePushMeasure < Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"No exception thrown\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
fail("No exception thrown");
red_line===
"No exception thrown"
start_offset===
8
end_offset===
29
Python OUTPUT===
fail("No exception thrown");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_matrix\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_matrix;
red_line===
m_matrix
start_offset===
27
end_offset===
35
Python OUTPUT===
private final double[][] m_matrix;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Don\u0027t try to be smarter than the JVM, remove this call to run the garbage collector.
scn.ruleId===
1215
scn.suspCodeStr===
System.gc();
red_line===
gc
start_offset===
9
end_offset===
11
Python OUTPUT===
System.gc();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(iterations * period);
red_line===
*
start_offset===
26
end_offset===
27
Python OUTPUT===
 Thread.sleep(iterations * period);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L13<IntegerSolution> neighborhood = new L13<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
47
end_offset===
64
Python OUTPUT===
<> neighborhood = new L13 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"points\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertNull(ReflectionTestUtils.getField(front, "points"));
red_line===
"points"
start_offset===
51
end_offset===
59
Python OUTPUT===
assertNull(ReflectionTestUtils.getField(front, "points"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
static final public int Kmax = 20;
red_line===
Kmax
start_offset===
26
end_offset===
30
Python OUTPUT===
static final public int Kmax = 20;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
Random random = new Random();
red_line===
Random
start_offset===
22
end_offset===
28
Python OUTPUT===
Random random = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> audits.add(a));
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===
 auditor.addListener(( a) -> audits.add( ));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
static final public double a = 0.5;
red_line===
a
start_offset===
29
end_offset===
30
Python OUTPUT===
static final public double a = 0.5;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public double b = 3.0;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final double b = 3.0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TournamentSelection<Solution<?>> selection = new TournamentSelection<Solution<?>>(comparator, 7) ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new TournamentSelection < Solution < ? >> ( comparator , 7 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Epsilon<PointSolution> epsilon = new Epsilon<PointSolution>(referenceFront) ;
red_line===
<PointSolution>
start_offset===
48
end_offset===
63
Python OUTPUT===
<> epsilon = new Epsilon < PointSolution > ( referenceFront ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/weierstrass_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /weierstrass_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
iDominate.add(new LinkedList<Integer>());
red_line===
<Integer>
start_offset===
34
end_offset===
43
Python OUTPUT===
<> new LinkedList < Integer > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
front.add(new LinkedList<Integer>());
red_line===
<Integer>
start_offset===
30
end_offset===
39
Python OUTPUT===
<> new LinkedList < Integer > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "parent-test";
red_line===
"parent-test"
start_offset===
10
end_offset===
23
Python OUTPUT===
 return "p
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
int[] hypercubes = new int[(int)Math.pow(2.0, bisections * objectives)] ;
red_line===
*
start_offset===
61
end_offset===
62
Python OUTPUT===
 int[] hypercubes = new int[( int)Math.pow(2.0, bisections * objectives)] ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"maxIt\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int it, maxIt;
red_line===
maxIt
start_offset===
12
end_offset===
17
Python OUTPUT===
int it, maxIt;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Evaluations: " + evaluations + ". Fitness: " + objectiveValues);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Evaluations: " + evaluations + ". Fitness: " + objectiveValues); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfObjectives_ = solution.getNumberOfObjectives();
red_line===
numberOfObjectives_
start_offset===
8
end_offset===
27
Python OUTPUT===
int numberOfObjectives_ = solution.getNumberOfObjectives();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double E = 30 * 1e6;
red_line===
E
start_offset===
11
end_offset===
12
Python OUTPUT===
double E = 30 * 1e6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"solutionId\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int p, solutionId, initSolId, lastObjective = m - 1;
red_line===
solutionId
start_offset===
11
end_offset===
21
Python OUTPUT===
int p, solutionId, initSolId, lastObjective = m - 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final StrengthRawFitness<S> fitnessValue = new StrengthRawFitness<S>();
red_line===
<S>
start_offset===
75
end_offset===
78
Python OUTPUT===
<> S > fitnessValue = new StrengthRawFitness < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new HypervolumeContributionComparator<S>() ;
red_line===
<S>
start_offset===
54
end_offset===
57
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final CrowdingDistance<S> crowdingDistance = new CrowdingDistance<S>() ;
red_line===
<S>
start_offset===
75
end_offset===
78
Python OUTPUT===
<> S > crowdingDistance = new CrowdingDistance < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"x_Vk\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double x_Vk = solution.getVariable(4);
red_line===
x_Vk
start_offset===
11
end_offset===
15
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Verify that \"remove()\" is used correctly.
scn.ruleId===
5413
scn.suspCodeStr===
temporalList.remove(indexOfSolution);
red_line===
temporalList.remove(indexOfSolution)
start_offset===
10
end_offset===
46
Python OUTPUT===
temporalList.remove(indexOfSolution);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final Set<Consumer<Audit>> listeners = new HashSet<Consumer<Audit>>();
red_line===
<Consumer<Audit>>
start_offset===
59
end_offset===
76
Python OUTPUT===
<> >> listeners = new HashSet < Consumer < Audit >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double ship_cost = 1.3 * ((2000.0 * Math.pow(steel_weight, 0.85))  + (3500.0 * outfit_weight) + (2400.0 * Math.pow(power, 0.8)));
red_line===
ship_cost
start_offset===
11
end_offset===
20
Python OUTPUT===
double ship_cost = 1.3 * ((2000.0 * Math.pow(steel_weight, 0.85))  + (3500.0 * outfit_weight) + (2400.0 * Math.pow(power, 0.8)));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double fuel_cost = 1.05 * daily_consumption * sea_days * fuel_price;
red_line===
fuel_cost
start_offset===
11
end_offset===
20
Python OUTPUT===
double fuel_cost = 1.05 * daily_consumption * sea_days * fuel_price;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"data\".
scn.ruleId===
1488
scn.suspCodeStr===
double data=dte.doPrediction(index,solution);
red_line===
dte.doPrediction(index,solution)
start_offset===
15
end_offset===
47
Python OUTPUT===
double data=dte.doPrediction(index,solution);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double handling_rate = 8000.0;
red_line===
handling_rate
start_offset===
11
end_offset===
24
Python OUTPUT===
double handling_rate = 8000.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double port_cost = 6.3 * Math.pow(DWT, 0.8);
red_line===
port_cost
start_offset===
11
end_offset===
20
Python OUTPUT===
double port_cost = 6.3 * Math.pow(DWT, 0.8);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result += "" + var + " ";
red_line===
result
start_offset===
6
end_offset===
12
Python OUTPUT===
result += "" + var + " ";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"getUpperBound\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
Integer upperBound = solution.getUpperBound(index);
red_line===
getUpperBound
start_offset===
34
end_offset===
47
Python OUTPUT===
 Integer upperBound = solution.getdex); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double annual_costs = capital_costs + running_costs + voyage_costs;
red_line===
annual_costs
start_offset===
11
end_offset===
23
Python OUTPUT===
double annual_costs = capital_costs + running_costs + voyage_costs;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double annual_cargo = cargo_DWT * RTPA;
red_line===
annual_cargo
start_offset===
11
end_offset===
23
Python OUTPUT===
double annual_cargo = cargo_DWT * RTPA;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
JMetalLogger.logger.info("The fronts are NORMALIZED before computing the indicators");
red_line===
;
start_offset===
93
end_offset===
94
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_T = solution.getVariable(3);
red_line===
x_T
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_T = solution.getVariable(3);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make member \"pindex9\" \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
pindex9 = pind;
red_line===
pindex9
start_offset===
4
end_offset===
11
Python OUTPUT===
final pindex9 = pind ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(indicator.evaluate(FrontUtils.convertFrontToSolutionList(front)));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(indicator.evaluate(FrontUtils.convertFrontToSolutionList(front))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/weierstrass_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /weierstrass_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Crossover operator does not exist: " + getName());
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Crossover operator does not exist: " + getName());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
localBest = new GenericSolutionAttribute<DoubleSolution, DoubleSolution>();
red_line===
<DoubleSolution, DoubleSolution>
start_offset===
44
end_offset===
76
Python OUTPUT===
<> , DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"r2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r1, r2, c1, c2;
red_line===
r2
start_offset===
15
end_offset===
17
Python OUTPUT===
double r1, r2, c1, c2;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"r_polyline9\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public double points9[][], rangex9[][], rangey9[][], r_polyline9[][], oth_poly_points9[][];
red_line===
r_polyline9
start_offset===
55
end_offset===
66
Python OUTPUT===
public double points9[][], rangex9[][], rangey9[][], r_polyline9[][], oth_poly_points9[][];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"h\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double g = 0, h = 0, sub1;
red_line===
h
start_offset===
18
end_offset===
19
Python OUTPUT===
double g = 0, h = 0, sub1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"wmin\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double wmax, wmin;
red_line===
wmin
start_offset===
17
end_offset===
21
Python OUTPUT===
double wmax, wmin;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Fn = V / Math.pow(g * x_L, 0.5);
red_line===
Fn
start_offset===
11
end_offset===
13
Python OUTPUT===
double Fn = V / Math.pow(g * x_L, 0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double fuel_price = 100.0;
red_line===
fuel_price
start_offset===
11
end_offset===
21
Python OUTPUT===
double fuel_price = 100.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double round_trip_miles = 5000.0;
red_line===
round_trip_miles
start_offset===
11
end_offset===
27
Python OUTPUT===
double round_trip_miles = 5000.0;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
solution.setObjective(1, 1.0 - yj + 2.0*sum2 / (double)count2);
red_line===
(double)count2
start_offset===
51
end_offset===
65
Python OUTPUT===
final solution . setObjective ( 1 , 1.0 - yj + 2.0 * sum2 ( double ) count2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(0,  x[0] + 2.0*(4.0*sum1 - 2.0*prod1 + 2.0) / (double)count1);
red_line===
double
start_offset===
73
end_offset===
79
Python OUTPUT===
 solution.setObjective(0, x[0] + 2.0*(4.0*sum1 - 2.0*prod1 + 2.0)  /  (doubnt1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_B = x[1];
red_line===
x_B
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_B = x[1];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_L = x[0];
red_line===
x_L
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_L = x[0];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(1, 1.0 - x[0] + hj + 2.0*sum2 / (double)count2);
red_line===
double
start_offset===
59
end_offset===
65
Python OUTPUT===
 solution.setObjective(1, 1.0 - x[0] + hj + 2.0*sum2  /  (douunt2); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
float max_epsilon = max + EPSILON;
red_line===
max_epsilon
start_offset===
10
end_offset===
21
Python OUTPUT===
float max_epsilon = max + EPSILON;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"theta\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r = 0.1, theta = -0.25 * Math.PI;
red_line===
theta
start_offset===
20
end_offset===
25
Python OUTPUT===
double r = 0.1, theta = -0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"h\".
scn.ruleId===
1488
scn.suspCodeStr===
double h = 1.0d - Math.sqrt(f / g);
red_line===
1.0d - Math.sqrt(f / g)
start_offset===
15
end_offset===
38
Python OUTPUT===
double h = 1.0d - Math.sqrt(f / g);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OldStrainMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] OldStrainMax_;
red_line===
OldStrainMax_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] OldStrainMax_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Lj_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Lj_ = 18;
red_line===
Lj_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Lj_ = 18;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"x1\".
scn.ruleId===
1854
scn.suspCodeStr===
x1 = x[var - 1];
red_line===
= x[var - 1]
start_offset===
11
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] a_array = new double[] {2.0, 2.5, 2.5};
red_line===
a_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] a_array = new double[] {2.0, 2.5, 2.5};
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"theta\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r = 0.1, theta = -0.25 * Math.PI;
red_line===
theta
start_offset===
20
end_offset===
25
Python OUTPUT===
double r = 0.1, theta = -0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OldStrainMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] OldStrainMin_;
red_line===
OldStrainMin_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] OldStrainMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double E = Groups_[idx][E_];
red_line===
E
start_offset===
11
end_offset===
12
Python OUTPUT===
double E = Groups_[idx][E_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"omegaMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] omegaMax_;
red_line===
omegaMax_
start_offset===
23
end_offset===
32
Python OUTPUT===
protected double[][] omegaMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"QE_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int QE_ = 1;
red_line===
QE_
start_offset===
6
end_offset===
9
Python OUTPUT===
int QE_ = 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double S2Y = 0.0;
red_line===
S2Y
start_offset===
13
end_offset===
16
Python OUTPUT===
double S2Y = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> indicatorValues = new ArrayList<Double>();
red_line===
<Double>
start_offset===
48
end_offset===
56
Python OUTPUT===
<> indicatorValues = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.charts = new LinkedHashMap<String, XYChart>();
red_line===
<String, XYChart>
start_offset===
35
end_offset===
52
Python OUTPUT===
<> String , XYChart > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Repair strategy unknown: " + getName()) ;
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Repair strategy unknown: " + getName()) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> indicatorIterations = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
53
end_offset===
62
Python OUTPUT===
<> indicatorIterations = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.indicatorValues = new HashMap<String, List<Double>>();
red_line===
<String, List<Double>>
start_offset===
38
end_offset===
60
Python OUTPUT===
<> < Double >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ub2\".
scn.ruleId===
1854
scn.suspCodeStr===
ub2 = L12 - 2;
red_line===
= L12 - 2
start_offset===
8
end_offset===
17
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
protected final Double alpha = 0.5;
red_line===
alpha
start_offset===
25
end_offset===
30
Python OUTPUT===
protected static final Double alpha = 0.5 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double light_ship_weight = steel_weight + outfit_weight + machinery_weight;
red_line===
light_ship_weight
start_offset===
11
end_offset===
28
Python OUTPUT===
double light_ship_weight = steel_weight + outfit_weight + machinery_weight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_CB = x[5];
red_line===
x_CB
start_offset===
11
end_offset===
15
Python OUTPUT===
double x_CB = x[5];
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"dim\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
beta = 2.0 * sum / dim;
red_line===
dim
start_offset===
25
end_offset===
28
Python OUTPUT===
final beta = 2.0 * sum dim ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"two\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
DoubleSolution one, two;
red_line===
two
start_offset===
24
end_offset===
27
Python OUTPUT===
DoubleSolution one, two;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainMxzMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainMxzMax_;
red_line===
StrainMxzMax_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] StrainMxzMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"m_A\" to prevent any misunderstanding/clash with field \"m_a\".
scn.ruleId===
1845
scn.suspCodeStr===
private double[] m_A;
red_line===
m_A
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_A;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Schwefel's Problem 2.13";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Schwefel's Problem 2.13 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"indexOfWeight\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int index, indexOfWeight;
red_line===
indexOfWeight
start_offset===
13
end_offset===
26
Python OUTPUT===
int index, indexOfWeight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func3_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func3_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.charts = new LinkedHashMap<String, XYChart>();
red_line===
<String, XYChart>
start_offset===
35
end_offset===
52
Python OUTPUT===
<> String , XYChart > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double d, R, r, Y, y, Am, am;
red_line===
R
start_offset===
14
end_offset===
15
Python OUTPUT===
double d, R, r, Y, y, Am, am;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int[] g_ = new int[problem.getNumberOfObjectives()] ;
red_line===
g_
start_offset===
11
end_offset===
13
Python OUTPUT===
int[] g_ = new int[problem.getNumberOfObjectives()] ;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
Random rand = new Random();
red_line===
Random
start_offset===
20
end_offset===
26
Python OUTPUT===
Random rand = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Sxyl, Sxyr;
red_line===
Sxyl
start_offset===
11
end_offset===
15
Python OUTPUT===
double Sxyl, Sxyr;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iy = Groups_[idx][Iy_];
red_line===
Iy
start_offset===
11
end_offset===
13
Python OUTPUT===
double Iy = Groups_[idx][Iy_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Z_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Z_ = 21;
red_line===
Z_
start_offset===
6
end_offset===
8
Python OUTPUT===
int Z_ = 21;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("invalid link");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("invalid link"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"i_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int i_ = 1;
red_line===
i_
start_offset===
6
end_offset===
8
Python OUTPUT===
int i_ = 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfConstraintsGeometric_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public int numberOfConstraintsGeometric_;
red_line===
numberOfConstraintsGeometric_
start_offset===
13
end_offset===
42
Python OUTPUT===
public int numberOfConstraintsGeometric_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"denominator\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
fraction = Math.max(fraction, Math.sqrt(numerator) / denominator);
red_line===
denominator
start_offset===
63
end_offset===
74
Python OUTPUT===
final fraction = Math . max ( fraction , Math . sqrt ( numerator ) denominator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Iy_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Iy_ = 8;
red_line===
Iy_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Iy_ = 8;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"idx\".
scn.ruleId===
1854
scn.suspCodeStr===
int[] idx = new int[populationSize];
red_line===
= new int[populationSize]
start_offset===
14
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistanceComparator = new CrowdingDistanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
63
end_offset===
79
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
protected Comparator<DoubleSolution> fitnessComparator;
red_line===
  protected Comparator<DoubleSolution> fitnessComparator; //TODO: invert this dependency
start_offset===
0
end_offset===
88
Python OUTPUT===
protected Comparator<DoubleSolution> fitnessComparator;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Ip = Groups_[idx][It_];
red_line===
Ip
start_offset===
11
end_offset===
13
Python OUTPUT===
double Ip = Groups_[idx][It_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"crossoverDistributionIndex\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double crossoverProbability, crossoverDistributionIndex;
red_line===
crossoverDistributionIndex
start_offset===
33
end_offset===
59
Python OUTPUT===
double crossoverProbability, crossoverDistributionIndex;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"normalizeDiff\".
scn.ruleId===
1854
scn.suspCodeStr===
double normalizeDiff = 0.0D;
red_line===
= 0.0D
start_offset===
29
end_offset===
35
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MxyMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] MxyMin_;
red_line===
MxyMin_
start_offset===
23
end_offset===
30
Python OUTPUT===
protected double[][] MxyMin_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Strings and Boxed types should be compared using \"equals()\".
scn.ruleId===
4973
scn.suspCodeStr===
return (x == y)?0:(y < x)?1:(-1);
red_line===
==
start_offset===
15
end_offset===
17
Python OUTPUT===
return (x == y)?0:(y < x)?1:(-1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int sum1, sum2;
red_line===
sum2
start_offset===
12
end_offset===
16
Python OUTPUT===
int sum1, sum2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("++++++");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("++++++"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"minimizar\" to prevent any misunderstanding/clash with field \"MINIMIZAR\".
scn.ruleId===
1845
scn.suspCodeStr===
private boolean minimizar;
red_line===
minimizar
start_offset===
18
end_offset===
27
Python OUTPUT===
private boolean minimizar;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Li_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Li_ = 17;
red_line===
Li_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Li_ = 17;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OF_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
String[] OF_;
red_line===
OF_
start_offset===
11
end_offset===
14
Python OUTPUT===
String[] OF_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"STRAIN_TRACTION\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int STRAIN_TRACTION = 1;
red_line===
STRAIN_TRACTION
start_offset===
6
end_offset===
21
Python OUTPUT===
int STRAIN_TRACTION = 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"PQ\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] PQ;
red_line===
PQ
start_offset===
13
end_offset===
15
Python OUTPUT===
double[][] PQ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"crowdingDistance\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(comparator, "crowdingDistance", distance);
red_line===
"crowdingDistance"
start_offset===
45
end_offset===
63
Python OUTPUT===
ReflectionTestUtils.setField(comparator, "crowdingDistance", distance);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(2, ObjectiveComparator.Ordering.DESCENDING) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 2 , ObjectiveComparator.Ordering.DESCENDING ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"numberOfPoints\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(0, ReflectionTestUtils.getField(front, "numberOfPoints"));
red_line===
"numberOfPoints"
start_offset===
56
end_offset===
72
Python OUTPUT===
assertEquals(0, ReflectionTestUtils.getField(front, "numberOfPoints"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
24
end_offset===
25
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"randomGenerator\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(crossover, "randomGenerator", randomGenerator);
red_line===
"randomGenerator"
start_offset===
44
end_offset===
61
Python OUTPUT===
ReflectionTestUtils.setField(crossover, "randomGenerator", randomGenerator);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double B1 = Math.asin((yi - yj) / Element_[el][L_]);
red_line===
B1
start_offset===
11
end_offset===
13
Python OUTPUT===
double B1 = Math.asin((yi - yj) / Element_[el][L_]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Hypervolume<DoubleSolution> hypervolume = new PISAHypervolume<DoubleSolution>(front);
red_line===
<DoubleSolution>
start_offset===
65
end_offset===
81
Python OUTPUT===
<> hypervolume = new PISAHypervolume < DoubleSolution > ( front ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Index value invalid: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat(cause.getMessage(), containsString("Index value invalid: " + -1));
red_line===
"Index value invalid: "
start_offset===
50
end_offset===
73
Python OUTPUT===
assertThat(cause.getMessage(), containsString("Index value invalid: " + -1));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j, s;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j, s;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"solutionId\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int p, solutionId;
red_line===
solutionId
start_offset===
11
end_offset===
21
Python OUTPUT===
int p, solutionId;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Algorithm configuration: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Algorithm configuration: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make EPSILON a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static double EPSILON = 0.0000000001;
red_line===
EPSILON
start_offset===
23
end_offset===
30
Python OUTPUT===
public static final double EPSILON = 0.0000000001 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> indicatorValues = new ArrayList<Double>();
red_line===
<Double>
start_offset===
48
end_offset===
56
Python OUTPUT===
<> indicatorValues = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> indicatorIterations = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
53
end_offset===
62
Python OUTPUT===
<> indicatorIterations = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Ranking does not exist: " + getName());
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Ranking does not exist: " + getName());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"referenceFrontFilename\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private StringParameter referenceFrontFilename;
red_line===
referenceFrontFilename
start_offset===
26
end_offset===
48
Python OUTPUT===
 private StringParameter r 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"c2Max\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private double c2Max;
red_line===
c2Max
start_offset===
17
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUMBER_OF_BITS = 512 ;
red_line===
NUMBER_OF_BITS
start_offset===
8
end_offset===
22
Python OUTPUT===
int NUMBER_OF_BITS = 512 ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"c2Min\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private double c2Min;
red_line===
c2Min
start_offset===
17
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static EPSILON\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static double EPSILON = 0.0000000001;
red_line===
EPSILON
start_offset===
23
end_offset===
30
Python OUTPUT===
public static final double EPSILON = 0.0000000001 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double alpha[] = new double[2];
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
double alpha[] = new double[2];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"COMPRESSION\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int COMPRESSION = 32;
red_line===
COMPRESSION
start_offset===
6
end_offset===
17
Python OUTPUT===
int COMPRESSION = 32;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make const8 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double const8[][];
red_line===
const8
start_offset===
16
end_offset===
22
Python OUTPUT===
public static final double const8 [ ] [ ] ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double sea_days = (round_trip_miles / 24.0) * x_Vk;
red_line===
sea_days
start_offset===
11
end_offset===
19
Python OUTPUT===
double sea_days = (round_trip_miles / 24.0) * x_Vk;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double KG = 1.0 + 0.52 * x_D;
red_line===
KG
start_offset===
11
end_offset===
13
Python OUTPUT===
double KG = 1.0 + 0.52 * x_D;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_Vk = solution.getVariable(4);
red_line===
x_Vk
start_offset===
11
end_offset===
15
Python OUTPUT===
double x_Vk = solution.getVariable(4);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_D = solution.getVariable(2);
red_line===
x_D
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_D = solution.getVariable(2);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double outfit_weight = 1.0 * Math.pow(x_L , 0.8) * Math.pow(x_B , 0.6) * Math.pow(x_D, 0.3) * Math.pow(x_CB, 0.1);
red_line===
outfit_weight
start_offset===
11
end_offset===
24
Python OUTPUT===
double outfit_weight = 1.0 * Math.pow(x_L , 0.8) * Math.pow(x_B , 0.6) * Math.pow(x_D, 0.3) * Math.pow(x_CB, 0.1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_CB = solution.getVariable(5);
red_line===
x_CB
start_offset===
11
end_offset===
15
Python OUTPUT===
double x_CB = solution.getVariable(5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"int\".
scn.ruleId===
1905
scn.suspCodeStr===
int objD = (int) (i / perObjSubproblemNum);
red_line===
int
start_offset===
15
end_offset===
18
Python OUTPUT===
 int objD = ( ) ( i  /  perObjSubproblemNum);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ArrayList<Integer> J3 = new ArrayList<Integer>();
red_line===
J3
start_offset===
23
end_offset===
25
Python OUTPUT===
ArrayList<Integer> J3 = new ArrayList<Integer>();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfVariables_ = solution.getNumberOfVariables();
red_line===
numberOfVariables_
start_offset===
8
end_offset===
26
Python OUTPUT===
int numberOfVariables_ = solution.getNumberOfVariables();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Point2D.Double> polygon = new ArrayList<Point2D.Double>();
red_line===
<Point2D.Double>
start_offset===
48
end_offset===
64
Python OUTPUT===
<> polygon = new ArrayList < Point2D.Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ub\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int lb = 0, ub = 0;
red_line===
ub
start_offset===
16
end_offset===
18
Python OUTPUT===
int lb = 0, ub = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double light_ship_weight = steel_weight + outfit_weight + machinery_weight;
red_line===
light_ship_weight
start_offset===
11
end_offset===
28
Python OUTPUT===
double light_ship_weight = steel_weight + outfit_weight + machinery_weight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double KB = 0.53 * x_T;
red_line===
KB
start_offset===
11
end_offset===
13
Python OUTPUT===
double KB = 0.53 * x_T;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double machinery_weight = 0.17 * Math.pow(power, 0.9);
red_line===
machinery_weight
start_offset===
11
end_offset===
27
Python OUTPUT===
double machinery_weight = 0.17 * Math.pow(power, 0.9);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_B = solution.getVariable(1);
red_line===
x_B
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_B = solution.getVariable(1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Fn = V / Math.pow(g * x_L, 0.5);
red_line===
Fn
start_offset===
11
end_offset===
13
Python OUTPUT===
double Fn = V / Math.pow(g * x_L, 0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_L = solution.getVariable(0);
red_line===
x_L
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_L = solution.getVariable(0);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double V = 0.5144 * x_Vk;
red_line===
V
start_offset===
11
end_offset===
12
Python OUTPUT===
double V = 0.5144 * x_Vk;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double steel_weight = 0.034 * Math.pow(x_L ,1.7) * Math.pow(x_B ,0.7) * Math.pow(x_D ,0.4) * Math.pow(x_CB ,0.5);
red_line===
steel_weight
start_offset===
11
end_offset===
23
Python OUTPUT===
double steel_weight = 0.034 * Math.pow(x_L ,1.7) * Math.pow(x_B ,0.7) * Math.pow(x_D ,0.4) * Math.pow(x_CB ,0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double DWT = displacement - light_ship_weight;
red_line===
DWT
start_offset===
11
end_offset===
14
Python OUTPUT===
double DWT = displacement - light_ship_weight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double fuel_carried = daily_consumption * (sea_days + 5.0);
red_line===
fuel_carried
start_offset===
11
end_offset===
23
Python OUTPUT===
double fuel_carried = daily_consumption * (sea_days + 5.0);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int[] rank_ = new int[problem.getNumberOfObjectives()] ;
red_line===
rank_
start_offset===
11
end_offset===
16
Python OUTPUT===
int[] rank_ = new int[problem.getNumberOfObjectives()] ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_D = solution.getVariable(2);
red_line===
x_D
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_D = solution.getVariable(2);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"randomGenerator\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(crossover, "randomGenerator", randomGenerator);
red_line===
"randomGenerator"
start_offset===
44
end_offset===
61
Python OUTPUT===
ReflectionTestUtils.setField(crossover, "randomGenerator", randomGenerator);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2;
red_line===
count2
start_offset===
16
end_offset===
22
Python OUTPUT===
int count1, count2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"Observable\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
protected Observable<Map<String, Object>> observable;
red_line===
Observable
start_offset===
12
end_offset===
22
Python OUTPUT===
 protected OMap<String, Object>> observable; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(0, x[0] + hj + 2.0*sum1 / (double)count1);
red_line===
double
start_offset===
53
end_offset===
59
Python OUTPUT===
 solution.setObjective(0, x[0] + hj + 2.0*sum1  /  (douunt1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.charts = new LinkedHashMap<String, XYChart>();
red_line===
<String, XYChart>
start_offset===
35
end_offset===
52
Python OUTPUT===
<> String , XYChart > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int M = 3;
red_line===
M
start_offset===
20
end_offset===
21
Python OUTPUT===
private static final int M = 3 ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove or correct this useless self-assignment.
scn.ruleId===
1656
scn.suspCodeStr===
this.mutation = mutationOperator;
red_line===
o
start_offset===
15
end_offset===
16
Python OUTPUT===
 this.mutation  mutationOperator; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment; \"r2Min\" already holds the assigned value along all execution paths.
scn.ruleId===
4165
scn.suspCodeStr===
this.referencePoints = referencePoints ;
red_line===
this.referencePoin
start_offset===
4
end_offset===
22
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"float\".
scn.ruleId===
1905
scn.suspCodeStr===
float tmp2 = Math.min((float) 0, (float) Math.floor(C - y)) * (1 - A) * (y - C) / (1 - C);
red_line===
float
start_offset===
27
end_offset===
32
Python OUTPUT===
 float tmp2 = Math.min(( float) 0,( ) Math.floor(C - y)) *(1 - A) *( y -C)  / (1 -C);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"BLijY_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int BLijY_ = 14;
red_line===
BLijY_
start_offset===
6
end_offset===
12
Python OUTPUT===
int BLijY_ = 14;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove these useless parentheses.
scn.ruleId===
1110
scn.suspCodeStr===
temp1 = ((list1.get(i) - list1.get(0)));
red_line===
(
start_offset===
17
end_offset===
18
Python OUTPUT===
 temp1 = ((list1et(i) - list1.get(0))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func1_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func1_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"s\".
scn.ruleId===
1854
scn.suspCodeStr===
double[][] s = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_][numberOfLibertyDegree_]
start_offset===
17
end_offset===
77
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"it2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
Iterator<Integer> it1, it2;
red_line===
it2
start_offset===
27
end_offset===
30
Python OUTPUT===
Iterator<Integer> it1, it2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/supportData/schwefel_213_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /supportData/schwefel_213_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public Random random = new Random();
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final Random random = new Random ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_B\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_B;
red_line===
m_B
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_B;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
currentIteration.increment(1);
red_line===
;
start_offset===
35
end_offset===
36
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
protected double[] deltaMin;
red_line===
in
start_offset===
27
end_offset===
29
Python OUTPUT===
protected double[] deltaMin;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Remove or correct this useless self-assignment.
scn.ruleId===
1656
scn.suspCodeStr===
this.r1Max = r1Max;
red_line===
=
start_offset===
15
end_offset===
16
Python OUTPUT===
 this.r1Max = rMax; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertFalse(point.equals(new String("")));
red_line===
String
start_offset===
33
end_offset===
39
Python OUTPUT===
 assertFalse(point.equals(new Str))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Evaluations (" + i + ")                     : " + currentEvalution.get()) ;
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Evaluations (" + i + ") : " + currentEvalution.get()) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Comparator<S> equalSolutions = new EqualSolutionsComparator<S>();
red_line===
<S>
start_offset===
69
end_offset===
72
Python OUTPUT===
<> > equalSolutions = new EqualSolutionsComparator < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
private double deltaMin[];
red_line===
[]
start_offset===
25
end_offset===
27
Python OUTPUT===
private double deltaMin[];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"nodeCheck_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] nodeCheck_;
red_line===
nodeCheck_
start_offset===
23
end_offset===
33
Python OUTPUT===
protected double[][] nodeCheck_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Gt = Math.abs(Math.sin(0.5d * Math.PI * time));
red_line===
Gt
start_offset===
11
end_offset===
13
Python OUTPUT===
double Gt = Math.abs(Math.sin(0.5d * Math.PI * time));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MxyMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] MxyMax_;
red_line===
MxyMax_
start_offset===
23
end_offset===
30
Python OUTPUT===
protected double[][] MxyMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfGroupElements_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfGroupElements_;
red_line===
numberOfGroupElements_
start_offset===
16
end_offset===
38
Python OUTPUT===
protected int numberOfGroupElements_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainMin_;
red_line===
StrainMin_
start_offset===
23
end_offset===
33
Python OUTPUT===
protected double[][] StrainMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Reaction_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double Reaction_[][];
red_line===
Reaction_
start_offset===
9
end_offset===
18
Python OUTPUT===
double Reaction_[][];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KijSOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KijSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KijSOG
start_offset===
13
end_offset===
19
Python OUTPUT===
double[][] KijSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"GROUP_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int GROUP_ = 1;
red_line===
GROUP_
start_offset===
6
end_offset===
12
Python OUTPUT===
int GROUP_ = 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Ay_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Ay_ = 6;
red_line===
Ay_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Ay_ = 6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SHAPE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int SHAPE = 2;
red_line===
SHAPE
start_offset===
6
end_offset===
11
Python OUTPUT===
int SHAPE = 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"E_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int E_ = 12;
red_line===
E_
start_offset===
6
end_offset===
8
Python OUTPUT===
int E_ = 12;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Iz_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Iz_ = 7;
red_line===
Iz_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Iz_ = 7;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Y_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Y_ = 20;
red_line===
Y_
start_offset===
6
end_offset===
8
Python OUTPUT===
int Y_ = 20;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_Y_UPPER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_Y_UPPER_LIMIT = 37;
red_line===
VAR_Y_UPPER_LIMIT
start_offset===
6
end_offset===
23
Python OUTPUT===
int VAR_Y_UPPER_LIMIT = 37;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"lZ_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int lZ_ = 26;
red_line===
lZ_
start_offset===
6
end_offset===
9
Python OUTPUT===
int lZ_ = 26;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ri\".
scn.ruleId===
1854
scn.suspCodeStr===
double[][] ri = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_][numberOfLibertyDegree_]
start_offset===
20
end_offset===
80
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ART_RIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int ART_RIG = 10;
red_line===
ART_RIG
start_offset===
6
end_offset===
13
Python OUTPUT===
int ART_RIG = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ART_ART\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int ART_ART = 11;
red_line===
ART_ART
start_offset===
6
end_offset===
13
Python OUTPUT===
int ART_ART = 11;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"j_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int j_ = 2;
red_line===
j_
start_offset===
6
end_offset===
8
Python OUTPUT===
int j_ = 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"QAy_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int QAy_ = 4;
red_line===
QAy_
start_offset===
6
end_offset===
10
Python OUTPUT===
int QAy_ = 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Qb_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Qb_ = 7;
red_line===
Qb_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Qb_ = 7;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"QAz_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int QAz_ = 5;
red_line===
QAz_
start_offset===
6
end_offset===
10
Python OUTPUT===
int QAz_ = 5;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"rnd2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int rnd1, rnd2;
red_line===
rnd2
start_offset===
14
end_offset===
18
Python OUTPUT===
int rnd1, rnd2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RTij\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] RTij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
RTij
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] RTij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ex.getMessage());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(ex.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ELONGATION_NEG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int ELONGATION_NEG = 35;
red_line===
ELONGATION_NEG
start_offset===
6
end_offset===
20
Python OUTPUT===
int ELONGATION_NEG = 35;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
int var = 0;
red_line===
var
start_offset===
8
end_offset===
11
Python OUTPUT===
int var = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("invalid link");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("invalid link"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("invalid link");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("invalid link"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yl\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double y, yl, yu, val, xy;
red_line===
yl
start_offset===
14
end_offset===
16
Python OUTPUT===
double y, yl, yu, val, xy;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"egj\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] egj = new double[numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_]
start_offset===
19
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"delta1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
Double rnd, delta1, delta2, mutPow, deltaq;
red_line===
delta1
start_offset===
16
end_offset===
22
Python OUTPUT===
Double rnd, delta1, delta2, mutPow, deltaq;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
continue;
red_line===
Salto3;
start_offset===
23
end_offset===
30
Python OUTPUT===
continue;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this silly call to \"Math.floor\"
scn.ruleId===
2185
scn.suspCodeStr===
mu = (int) Math.floor(lambda / 2);
red_line===
Math.floor
start_offset===
15
end_offset===
25
Python OUTPUT===
 mu = (int) Matmbda  /  2); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"Az\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double Ay, Az;
red_line===
Az
start_offset===
15
end_offset===
17
Python OUTPUT===
double Ay, Az;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"zi\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double yi, zi;
red_line===
zi
start_offset===
15
end_offset===
17
Python OUTPUT===
double yi, zi;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ys\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double as, ys, es, al, yl, el;
red_line===
ys
start_offset===
15
end_offset===
17
Python OUTPUT===
double as, ys, es, al, yl, el;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ae\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double zl, ae, ze, ee;
red_line===
ae
start_offset===
15
end_offset===
17
Python OUTPUT===
double zl, ae, ze, ee;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"zi\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double yi, zi;
red_line===
zi
start_offset===
15
end_offset===
17
Python OUTPUT===
double yi, zi;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[][] m_data = new double[mDimension + 1][mDimension];
red_line===
m_data
start_offset===
15
end_offset===
21
Python OUTPUT===
double[][] m_data = new double[mDimension + 1][mDimension];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neighborhood = new AdaptiveRandomNeighborhood<DoubleSolution>(swarmSize, this.numberOfParticlesToInform);
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( swarmSize , this.numberOfParticlesToInform ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_A\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_A;
red_line===
m_A
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_A;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
positionInSwarm = new GenericSolutionAttribute<DoubleSolution, Integer>();
red_line===
<DoubleSolution, Integer>
start_offset===
50
end_offset===
75
Python OUTPUT===
<> Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double r1, r2, W, C1, C2;
red_line===
W
start_offset===
19
end_offset===
20
Python OUTPUT===
double r1, r2, W, C1, C2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Mat Rig Global: El archivo no pudo grabarse!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Mat Rig Global: El archivo no pudo grabarse!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Mat Rig Local: El archivo no pudo grabarse!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Mat Rig Local: El archivo no pudo grabarse!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_B\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_B;
red_line===
m_B
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_B;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
String contains no format specifiers.
scn.ruleId===
3457
scn.suspCodeStr===
ps.printf("--------------------------------------------");
red_line===
ps.printf("--------------------------------------------")
start_offset===
8
end_offset===
65
Python OUTPUT===
ps.printf("--------------------------------------------");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Esfuerzos: El archivo no pudo grabarse!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Esfuerzos: El archivo no pudo grabarse!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Desplazamientos: El archivo no pudo grabarse!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Desplazamientos: El archivo no pudo grabarse!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/ackley_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /ackley_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.next();
red_line===
= input.next()
start_offset===
14
end_offset===
28
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Warning: current problem name: " + problemName);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Warning: current problem name: " + problemName); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.next();
red_line===
= input.next()
start_offset===
14
end_offset===
28
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
String aTxt[] = txt.split(" ");
red_line===
[]
start_offset===
23
end_offset===
25
Python OUTPUT===
String aTxt[] = txt.split(" ");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make numberOfDimensions a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int numberOfDimensions;
red_line===
numberOfDimensions
start_offset===
13
end_offset===
31
Python OUTPUT===
public static final int numberOfDimensions ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
QualityIndicator<?, Double> errorRatio = new ErrorRatio<List<DoubleSolution>>(new ArrayFront()) ;
red_line===
<List<DoubleSolution>>
start_offset===
59
end_offset===
81
Python OUTPUT===
<> = new ErrorRatio < List < DoubleSolution >> ( new ArrayFront ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"theta\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double N = 4.0, theta = -0.25 * Math.PI;
red_line===
theta
start_offset===
20
end_offset===
25
Python OUTPUT===
double N = 4.0, theta = -0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make lambda a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[] lambda;
red_line===
lambda
start_offset===
18
end_offset===
24
Python OUTPUT===
public static final double [ ] lambda ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
overallConstraintViolationDegree = new OverallConstraintViolation<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
69
end_offset===
85
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double A1 = Math.asin((xi - xj) / Element_[el][L_]);
red_line===
A1
start_offset===
11
end_offset===
13
Python OUTPUT===
double A1 = Math.asin((xi - xj) / Element_[el][L_]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
String file_test = "testData/test_data_func" + func_num + ".txt";
red_line===
file_test
start_offset===
13
end_offset===
22
Python OUTPUT===
String file_test = "testData/test_data_func" + func_num + ".txt";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iy = Groups_[idx][Iy_];
red_line===
Iy
start_offset===
11
end_offset===
13
Python OUTPUT===
double Iy = Groups_[idx][Iy_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iz = Groups_[idx][Iz_];
red_line===
Iz
start_offset===
11
end_offset===
13
Python OUTPUT===
double Iz = Groups_[idx][Iz_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[][] test_x = new double[num_test_points][test_dimension];
red_line===
test_x
start_offset===
17
end_offset===
23
Python OUTPUT===
double[][] test_x = new double[num_test_points][test_dimension];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new SpatialSpreadDeviationSelection<DoubleSolution>(5);
red_line===
<DoubleSolution>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> < DoubleSolution > ( 5 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"population\" which hides the field declared at line 29.
scn.ruleId===
1117
scn.suspCodeStr===
List<S> population = new ArrayList<>(populationSize);
red_line===
population
start_offset===
12
end_offset===
22
Python OUTPUT===
List<S> population = new ArrayList<>(populationSize);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"indexOfSecondSolution\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int indexOfFirstSolution, indexOfSecondSolution, indexOfWeight;
red_line===
indexOfSecondSolution
start_offset===
28
end_offset===
49
Python OUTPUT===
int indexOfFirstSolution, indexOfSecondSolution, indexOfWeight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iiz = zi * Math.pow(yi, 3.0) / 12.0;
red_line===
Iiz
start_offset===
11
end_offset===
14
Python OUTPUT===
double Iiz = zi * Math.pow(yi, 3.0) / 12.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Ai = zi * yi;
red_line===
Ai
start_offset===
11
end_offset===
13
Python OUTPUT===
double Ai = zi * yi;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Am;
red_line===
Am
start_offset===
11
end_offset===
13
Python OUTPUT===
double Am;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"minimumValueSecondSolution\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double minimumValueFirstSolution, minimumValueSecondSolution, value;
red_line===
minimumValueSecondSolution
start_offset===
36
end_offset===
62
Python OUTPUT===
double minimumValueFirstSolution, minimumValueSecondSolution, value;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
localBest = new GenericSolutionAttribute<DoubleSolution, DoubleSolution>();
red_line===
<DoubleSolution, DoubleSolution>
start_offset===
44
end_offset===
76
Python OUTPUT===
<> , DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> selected = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
42
end_offset===
51
Python OUTPUT===
<> selected = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
localBest = new GenericSolutionAttribute<DoubleSolution, DoubleSolution>();
red_line===
<DoubleSolution, DoubleSolution>
start_offset===
44
end_offset===
76
Python OUTPUT===
<> , DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double SSTot = 0.0;
red_line===
SSTot
start_offset===
11
end_offset===
16
Python OUTPUT===
double SSTot = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
14
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double S2Z = 0.0;
red_line===
S2Z
start_offset===
13
end_offset===
16
Python OUTPUT===
double S2Z = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] MDi = new double[geometryCheck_.length];
red_line===
MDi
start_offset===
13
end_offset===
16
Python OUTPUT===
double[] MDi = new double[geometryCheck_.length];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"f2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double f1, f2;
red_line===
f2
start_offset===
17
end_offset===
19
Python OUTPUT===
double f1, f2;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 1;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
violationThresholdComparator = new ViolationThresholdComparator<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
67
end_offset===
83
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"index\" which hides the field declared at line 9.
scn.ruleId===
1117
scn.suspCodeStr===
int[] index = new int[size];
red_line===
index
start_offset===
10
end_offset===
15
Python OUTPUT===
int[] index = new int[size];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
return null ;
red_line===
    return null ; // TODO
start_offset===
0
end_offset===
25
Python OUTPUT===
return null ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Lij = Element_[e][L_];
red_line===
Lij
start_offset===
11
end_offset===
14
Python OUTPUT===
double Lij = Element_[e][L_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"xj\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double xi, xj, yi, yj, zi, zj;
red_line===
xj
start_offset===
15
end_offset===
17
Python OUTPUT===
double xi, xj, yi, yj, zi, zj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int num_dim = job.numberOfDimensions;
red_line===
num_dim
start_offset===
8
end_offset===
15
Python OUTPUT===
int num_dim = job.numberOfDimensions;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
return (sum1 - sum2 * ((double) (x.length)));
red_line===
double
start_offset===
28
end_offset===
34
Python OUTPUT===
 return (sum1 - sum2 * ((dou.length))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String CEC2005SUPPORTDATADIRECTORY = "cec2005CompetitionResources/supportData" ;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String CEC2005SUPPORTDATADIRECTORY = " cec2005CompetitionResources/supportData " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Empty subregion!!!");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Empty subregion!!!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"f2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double f1, f2, uti, delta;
red_line===
f2
start_offset===
15
end_offset===
17
Python OUTPUT===
double f1, f2, uti, delta;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> selected = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
42
end_offset===
51
Python OUTPUT===
<> selected = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tempDistance\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double tempVolume, tempDistance;
red_line===
tempDistance
start_offset===
25
end_offset===
37
Python OUTPUT===
double tempVolume, tempDistance;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"List\".
scn.ruleId===
1905
scn.suspCodeStr===
List<Double> conv_obj = (List<Double>)getAttribute(s);
red_line===
List<Double>
start_offset===
30
end_offset===
42
Python OUTPUT===
 List<Double> conv_obj = ( <Double>)getAttribute (s);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int order_ = (int) individual.getAttribute("order_");
red_line===
order_
start_offset===
6
end_offset===
12
Python OUTPUT===
int order_ = (int) individual.getAttribute("order_");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"upper\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
List<Double> lower = new ArrayList<>(getNumberOfVariables()), upper = new ArrayList<>(getNumberOfVariables());
red_line===
upper
start_offset===
66
end_offset===
71
Python OUTPUT===
List<Double> lower = new ArrayList<>(getNumberOfVariables()), upper = new ArrayList<>(getNumberOfVariables());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
List<List<Double>> A=new ArrayList<>();
red_line===
A
start_offset===
22
end_offset===
23
Python OUTPUT===
List<List<Double>> A=new ArrayList<>();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new CrowdingDistanceComparator<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
47
end_offset===
63
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<S>();
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"comparator\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Comparator<BinarySolution> comparator;
red_line===
comparator
start_offset===
37
end_offset===
47
Python OUTPUT===
 private Comparator<BinarySolution> c 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new CrowdingDistanceComparator<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
47
end_offset===
63
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
StrengthFitnessComparator<S> comparator = new StrengthFitnessComparator<S>();
red_line===
<S>
start_offset===
77
end_offset===
80
Python OUTPUT===
<> comparator = new StrengthFitnessComparator < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"childGrid_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int childGrid_;
red_line===
childGrid_
start_offset===
15
end_offset===
25
Python OUTPUT===
protected int childGrid_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"d_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[] d_;
red_line===
d_
start_offset===
20
end_offset===
22
Python OUTPUT===
protected double[] d_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
findBestSolution = new BestSolutionSelection<DoubleSolution>(fitnessComparator);
red_line===
<DoubleSolution>
start_offset===
48
end_offset===
64
Python OUTPUT===
<> < DoubleSolution > ( fitnessComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"t_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int t_;
red_line===
t_
start_offset===
15
end_offset===
17
Python OUTPUT===
protected int t_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Coordinate> coordinates = new ArrayList<Coordinate>(popSize);
red_line===
<Coordinate>
start_offset===
51
end_offset===
63
Python OUTPUT===
<> coordinates = new ArrayList < Coordinate > ( popSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Fa\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double Fa, Fd;
red_line===
Fa
start_offset===
16
end_offset===
18
Python OUTPUT===
private double Fa, Fd;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Verify that \"remove()\" is used correctly.
scn.ruleId===
5413
scn.suspCodeStr===
temporalList.remove(i);
red_line===
temporalList.remove(i)
start_offset===
20
end_offset===
42
Python OUTPUT===
temporalList.remove(i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new NonElitistEvolutionStrategy<S>(problem, mu, lambda, maxEvaluations, mutation);
red_line===
<S>
start_offset===
44
end_offset===
47
Python OUTPUT===
<> S > ( problem , mu , lambda , maxEvaluations , mutation ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<S>(0);
red_line===
<S>
start_offset===
40
end_offset===
43
Python OUTPUT===
<> < S > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Pd\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double Pd;
red_line===
Pd
start_offset===
16
end_offset===
18
Python OUTPUT===
private double Pd;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<DoubleSolution> ranking =  new DominanceRanking<DoubleSolution>(dominanceComparator);
red_line===
<DoubleSolution>
start_offset===
59
end_offset===
75
Python OUTPUT===
<> ranking = new DominanceRanking < DoubleSolution > ( dominanceComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"offspringPopulationSizeParameter\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private IntegerParameter offspringPopulationSizeParameter;
red_line===
offspringPopulationSizeParameter
start_offset===
27
end_offset===
59
Python OUTPUT===
 private IntegerParameter o 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"valueX2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int valueX1, valueX2;
red_line===
valueX2
start_offset===
17
end_offset===
24
Python OUTPUT===
int valueX1, valueX2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"y2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double y1, y2, yL, yu;
red_line===
y2
start_offset===
15
end_offset===
17
Python OUTPUT===
double y1, y2, yL, yu;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make autoConfigurableParameterList a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<Parameter<?>> autoConfigurableParameterList = new ArrayList<>();
red_line===
autoConfigurableParameterList
start_offset===
28
end_offset===
57
Python OUTPUT===
public static final List < Parameter < ? >> autoConfigurableParameterList = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make fixedParameterList a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<Parameter<?>> fixedParameterList = new ArrayList<>();
red_line===
fixedParameterList
start_offset===
28
end_offset===
46
Python OUTPUT===
public static final List < Parameter < ? >> fixedParameterList = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
CrowdingDistance<S> crowdingDistance = new CrowdingDistance<S>() ;
red_line===
<S>
start_offset===
63
end_offset===
66
Python OUTPUT===
<> crowdingDistance = new CrowdingDistance < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"rank\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i = 0, rank = 0, offset;
red_line===
rank
start_offset===
13
end_offset===
17
Python OUTPUT===
int i = 0, rank = 0, offset;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(2, 2, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( 2 , 2 , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Evaluations: " + evaluations);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Evaluations: " + evaluations); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(new DominanceComparator<S>());
red_line===
<S>
start_offset===
32
end_offset===
35
Python OUTPUT===
<> < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neighbours = new ArrayList<List<Integer>>(solutionListSize);
red_line===
<List<Integer>>
start_offset===
30
end_offset===
45
Python OUTPUT===
<> Integer >> ( solutionListSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TournamentSelection<Solution<?>> selection = new TournamentSelection<Solution<?>>(5) ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new TournamentSelection < Solution < ? >> ( 5 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
LinkedList<String> result = new LinkedList<String>();
red_line===
<String>
start_offset===
46
end_offset===
54
Python OUTPUT===
<> result = new LinkedList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Verify that \"remove()\" is used correctly.
scn.ruleId===
5413
scn.suspCodeStr===
solutionList.remove(0);
red_line===
solutionList.remove(0)
start_offset===
6
end_offset===
28
Python OUTPUT===
solutionList.remove(0);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
result[i] = array[i];
red_line===
result[i] = array[i];
start_offset===
6
end_offset===
27
Python OUTPUT===
result[i] = array[i];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
setVariable(i, JMetalRandom.getInstance().nextDouble(bounds.getLowerBound(), bounds.getUpperBound()));
red_line===
;
start_offset===
109
end_offset===
110
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"\u003c/th\u003e\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
stringBuilder.append("<th>").append("</th>");
red_line===
"</th>"
start_offset===
42
end_offset===
49
Python OUTPUT===
stringBuilder.append("<th>").append("</th>");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
LinkedList<String> result = new LinkedList<String>();
red_line===
<String>
start_offset===
46
end_offset===
54
Python OUTPUT===
<> result = new LinkedList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"delta1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double rnd, delta1, delta2, mutPow, deltaq;
red_line===
delta1
start_offset===
16
end_offset===
22
Python OUTPUT===
double rnd, delta1, delta2, mutPow, deltaq;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yl\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double y, yl, yu, val, xy;
red_line===
yl
start_offset===
14
end_offset===
16
Python OUTPUT===
double y, yl, yu, val, xy;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"bounds\" which hides the field declared at line 20.
scn.ruleId===
1117
scn.suspCodeStr===
Bounds<Double> bounds = boundsList.get(i);
red_line===
bounds
start_offset===
21
end_offset===
27
Python OUTPUT===
Bounds<Double> bounds = boundsList.get(i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Computing time (" + i + ")                  : " + currentComputingTime.get()) ;
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Computing time (" + i + ") : " + currentComputingTime.get()) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
return aux / (double) solutionSet.size();
red_line===
double
start_offset===
18
end_offset===
24
Python OUTPUT===
 return aux  /  (douolutionSet.size(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result += "" + obj + " ";
red_line===
result
start_offset===
6
end_offset===
12
Python OUTPUT===
result += "" + obj + " ";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.swingWrapper = new SwingWrapper<XYChart>(new ArrayList<XYChart>(this.charts.values()));
red_line===
<XYChart>
start_offset===
40
end_offset===
49
Python OUTPUT===
<> new SwingWrapper < XYChart > ( new ArrayList < XYChart > ( this.charts.values ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (!Arrays.equals(points, that.points)) return false;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (!Arrays.equals(points, that.points)) return false; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"getBounds\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
return getBounds().stream().map(Bounds::fromPair).collect(Collectors.toList());
red_line===
getBounds
start_offset===
11
end_offset===
20
Python OUTPUT===
 return getstream().map(Bounds::fromPair).collect(Collectors.toList()); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUMBER_OF_BITS = 256 ;
red_line===
NUMBER_OF_BITS
start_offset===
8
end_offset===
22
Python OUTPUT===
int NUMBER_OF_BITS = 256 ;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"sub2\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
t4[i] = sub1 / sub2;
red_line===
sub2
start_offset===
21
end_offset===
25
Python OUTPUT===
final t4 [ i ] = sub1 sub2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"subf1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double g = 0, subf1 = 1, subf3;
red_line===
subf1
start_offset===
18
end_offset===
23
Python OUTPUT===
double g = 0, subf1 = 1, subf3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make const4 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double const4[];
red_line===
const4
start_offset===
16
end_offset===
22
Python OUTPUT===
public static final double const4 [ ] ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfObjectives_ = solution.getNumberOfObjectives();
red_line===
numberOfObjectives_
start_offset===
8
end_offset===
27
Python OUTPUT===
int numberOfObjectives_ = solution.getNumberOfObjectives();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double machinery_weight = 0.17 * Math.pow(power, 0.9);
red_line===
machinery_weight
start_offset===
11
end_offset===
27
Python OUTPUT===
double machinery_weight = 0.17 * Math.pow(power, 0.9);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("FINISH") ;
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("FINISH") ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double annual_cargo = cargo_DWT * RTPA;
red_line===
annual_cargo
start_offset===
11
end_offset===
23
Python OUTPUT===
double annual_cargo = cargo_DWT * RTPA;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double annual_costs = capital_costs + running_costs + voyage_costs;
red_line===
annual_costs
start_offset===
11
end_offset===
23
Python OUTPUT===
double annual_costs = capital_costs + running_costs + voyage_costs;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double fuel_price = 100.0;
red_line===
fuel_price
start_offset===
11
end_offset===
21
Python OUTPUT===
double fuel_price = 100.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double port_cost = 6.3 * Math.pow(DWT, 0.8);
red_line===
port_cost
start_offset===
11
end_offset===
20
Python OUTPUT===
double port_cost = 6.3 * Math.pow(DWT, 0.8);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double handling_rate = 8000.0;
red_line===
handling_rate
start_offset===
11
end_offset===
24
Python OUTPUT===
double handling_rate = 8000.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double steel_weight = 0.034 * Math.pow(x_L ,1.7) * Math.pow(x_B ,0.7) * Math.pow(x_D ,0.4) * Math.pow(x_CB ,0.5);
red_line===
steel_weight
start_offset===
11
end_offset===
23
Python OUTPUT===
double steel_weight = 0.034 * Math.pow(x_L ,1.7) * Math.pow(x_B ,0.7) * Math.pow(x_D ,0.4) * Math.pow(x_CB ,0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double BMT = ((0.085 * x_CB - 0.002) * x_B * x_B) / (x_T * x_CB);
red_line===
BMT
start_offset===
11
end_offset===
14
Python OUTPUT===
double BMT = ((0.085 * x_CB - 0.002) * x_B * x_B) / (x_T * x_CB);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2;
red_line===
count2
start_offset===
16
end_offset===
22
Python OUTPUT===
int count1, count2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double fuel_cost = 1.05 * daily_consumption * sea_days * fuel_price;
red_line===
fuel_cost
start_offset===
11
end_offset===
20
Python OUTPUT===
double fuel_cost = 1.05 * daily_consumption * sea_days * fuel_price;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double daily_consumption = ((0.19 * power * 24.0) / 1000.0) + 0.2;
red_line===
daily_consumption
start_offset===
11
end_offset===
28
Python OUTPUT===
double daily_consumption = ((0.19 * power * 24.0) / 1000.0) + 0.2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int M = 3;
red_line===
M
start_offset===
20
end_offset===
21
Python OUTPUT===
private static final int M = 3 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"denominator\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
float tmp, denominator, numerator;
red_line===
denominator
start_offset===
15
end_offset===
26
Python OUTPUT===
float tmp, denominator, numerator;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yi\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double xi, yi, zi;
red_line===
yi
start_offset===
21
end_offset===
23
Python OUTPUT===
double xi, yi, zi;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"suma\".
scn.ruleId===
1488
scn.suspCodeStr===
double suma = vp + vq - vpq;
red_line===
vp + vq - vpq
start_offset===
18
end_offset===
31
Python OUTPUT===
double suma = vp + vq - vpq;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
points[x].objectives[j] = frente[x][j];
red_line===
points[x].objectives[j] = frente[x][j];
start_offset===
10
end_offset===
49
Python OUTPUT===
points[x].objectives[j] = frente[x][j];
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"regreso\".
scn.ruleId===
1488
scn.suspCodeStr===
double regreso = inclhv2(ps.points[0], ps.points[1]);
red_line===
inclhv2(ps.points[0], ps.points[1])
start_offset===
25
end_offset===
60
Python OUTPUT===
double regreso = inclhv2(ps.points[0], ps.points[1]);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double DWT = displacement - light_ship_weight;
red_line===
DWT
start_offset===
11
end_offset===
14
Python OUTPUT===
double DWT = displacement - light_ship_weight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L13<IntegerSolution> neighborhood = new L13<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
47
end_offset===
64
Python OUTPUT===
<> neighborhood = new L13 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double At = z * y;
red_line===
At
start_offset===
11
end_offset===
13
Python OUTPUT===
double At = z * y;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"t\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double ff = 0.0, t;
red_line===
t
start_offset===
21
end_offset===
22
Python OUTPUT===
double ff = 0.0, t;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"GravitationalAxis_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
String GravitationalAxis_;
red_line===
GravitationalAxis_
start_offset===
9
end_offset===
27
Python OUTPUT===
String GravitationalAxis_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"populationSize\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
Integer populationSize = 3;
red_line===
populationSize
start_offset===
12
end_offset===
26
Python OUTPUT===
Integer populationSize = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"populationSize\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
int populationSize = 3;
red_line===
populationSize
start_offset===
8
end_offset===
22
Python OUTPUT===
int populationSize = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"r\".
scn.ruleId===
1854
scn.suspCodeStr===
double[][] r = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_][numberOfLibertyDegree_]
start_offset===
19
end_offset===
79
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_eZ_UPPER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_eZ_UPPER_LIMIT = 43;
red_line===
VAR_eZ_UPPER_LIMIT
start_offset===
6
end_offset===
24
Python OUTPUT===
int VAR_eZ_UPPER_LIMIT = 43;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"aX_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int aX_ = 0;
red_line===
aX_
start_offset===
6
end_offset===
9
Python OUTPUT===
int aX_ = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"B\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
List<S> A, B;
red_line===
B
start_offset===
15
end_offset===
16
Python OUTPUT===
List<S> A, B;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"geometryCheck_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int[][] geometryCheck_;
red_line===
geometryCheck_
start_offset===
20
end_offset===
34
Python OUTPUT===
protected int[][] geometryCheck_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double SSRes = 0.0;
red_line===
SSRes
start_offset===
11
end_offset===
16
Python OUTPUT===
double SSRes = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Node_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] Node_;
red_line===
Node_
start_offset===
23
end_offset===
28
Python OUTPUT===
protected double[][] Node_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"sigma_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double sigma_;
red_line===
sigma_
start_offset===
19
end_offset===
25
Python OUTPUT===
protected double sigma_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int[] rank_ = (int [])individual.getAttribute("rank_");
red_line===
rank_
start_offset===
8
end_offset===
13
Python OUTPUT===
int[] rank_ = (int [])individual.getAttribute("rank_");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_Y_LOWER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_Y_LOWER_LIMIT = 36;
red_line===
VAR_Y_LOWER_LIMIT
start_offset===
6
end_offset===
23
Python OUTPUT===
int VAR_Y_LOWER_LIMIT = 36;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Rpij\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Rpij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Rpij
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] Rpij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this integer division to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double coefficient = 1 + (1 - evaluations / maxEvaluations) * 0.15;
red_line===
evaluations / maxEvaluations
start_offset===
32
end_offset===
60
Python OUTPUT===
 double coefficient = 1 + ( 1 - evaluations  /  maxEvaluations) * 0.15;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double PC = tmpVar * (1 - tmpVar2);
red_line===
PC
start_offset===
11
end_offset===
13
Python OUTPUT===
double PC = tmpVar * (1 - tmpVar2);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"grid\".
scn.ruleId===
1854
scn.suspCodeStr===
grid = 0;
red_line===
= 0
start_offset===
8
end_offset===
11
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"order_\".
scn.ruleId===
1854
scn.suspCodeStr===
int order_ = (int)individual.getAttribute("order_");
red_line===
= (int)individual.getAttribute("order_")
start_offset===
13
end_offset===
53
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"slimDetal_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int slimDetal_;
red_line===
slimDetal_
start_offset===
15
end_offset===
25
Python OUTPUT===
protected int slimDetal_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Fyz_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Fyz_ = 16;
red_line===
Fyz_
start_offset===
6
end_offset===
10
Python OUTPUT===
int Fyz_ = 16;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_POSITION\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_POSITION = 44;
red_line===
VAR_POSITION
start_offset===
6
end_offset===
18
Python OUTPUT===
int VAR_POSITION = 44;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
int var = 0;
red_line===
var
start_offset===
8
end_offset===
11
Python OUTPUT===
int var = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double At = z * y;
red_line===
At
start_offset===
11
end_offset===
13
Python OUTPUT===
double At = z * y;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"D\".
scn.ruleId===
1854
scn.suspCodeStr===
D = 0;
red_line===
= 0
start_offset===
8
end_offset===
11
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_D = x[2];
red_line===
x_D
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_D = x[2];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainCutMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainCutMax_;
red_line===
StrainCutMax_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] StrainCutMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Ai = zi * yi;
red_line===
Ai
start_offset===
11
end_offset===
13
Python OUTPUT===
double Ai = zi * yi;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Double[] lowerLimit_ = new Double[getNumberOfVariables()];
red_line===
lowerLimit_
start_offset===
13
end_offset===
24
Python OUTPUT===
Double[] lowerLimit_ = new Double[getNumberOfVariables()];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(100) ;
red_line===
<DoubleSolution>
start_offset===
74
end_offset===
90
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"zi\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double yi, zi;
red_line===
zi
start_offset===
15
end_offset===
17
Python OUTPUT===
double yi, zi;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_Z_UPPER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_Z_UPPER_LIMIT = 39;
red_line===
VAR_Z_UPPER_LIMIT
start_offset===
6
end_offset===
23
Python OUTPUT===
int VAR_Z_UPPER_LIMIT = 39;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
55
end_offset===
71
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Solution: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
JMetalLogger.logger.info("Solution: " + solution.getVariable(0)) ;
red_line===
"Solution: "
start_offset===
29
end_offset===
41
Python OUTPUT===
JMetalLogger.logger.info("Solution: " + solution.getVariable(0)) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(5, ObjectiveComparator.Ordering.DESCENDING) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 5 , ObjectiveComparator.Ordering.DESCENDING ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func1_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func1_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Rotated Expanded Scaffer's F6 Function";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Rotated Expanded Scaffer's F6 Function " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"sparkContext\".
scn.ruleId===
3010
scn.suspCodeStr===
this.sparkContext = sparkContext ;
red_line===
sparkContext
start_offset===
9
end_offset===
21
Python OUTPUT===
 this.sparkContext = ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> leadersArchive = new CrowdingDistanceArchive<DoubleSolution>(swarmSize) ;
red_line===
<DoubleSolution>
start_offset===
79
end_offset===
95
Python OUTPUT===
<> leadersArchive = new CrowdingDistanceArchive < DoubleSolution > ( swarmSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
assertEquals(0, distance.compute(new double[]{}, new double[]{}), EPSILON) ;
red_line===
;
start_offset===
81
end_offset===
82
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"bounds\" which hides the field declared at line 23.
scn.ruleId===
1117
scn.suspCodeStr===
List<Bounds<Double>> bounds = Arrays.asList(Bounds.create(0.0, 1.0)) ;
red_line===
bounds
start_offset===
25
end_offset===
31
Python OUTPUT===
List<Bounds<Double>> bounds = Arrays.asList(Bounds.create(0.0, 1.0)) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
adaptiveGrid.calculateOccupied();
red_line===
;
start_offset===
38
end_offset===
39
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"n_arity\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final int n_arity;
red_line===
n_arity
start_offset===
20
end_offset===
27
Python OUTPUT===
private final int n_arity;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(new OverallConstraintViolationComparator<S>(), 0.0) ;
red_line===
<S>
start_offset===
49
end_offset===
52
Python OUTPUT===
<> < S > ( ) , 0.0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_matrix\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_matrix;
red_line===
m_matrix
start_offset===
27
end_offset===
35
Python OUTPUT===
private final double[][] m_matrix;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_zM;
red_line===
m_zM
start_offset===
19
end_offset===
23
Python OUTPUT===
private double[] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/ackley_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /ackley_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"randomGenerator\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(mutation, "randomGenerator", randomGenerator);
red_line===
"randomGenerator"
start_offset===
43
end_offset===
60
Python OUTPUT===
ReflectionTestUtils.setField(mutation, "randomGenerator", randomGenerator);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"resourcesDirectory\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private static String resourcesDirectory ;
red_line===
resourcesDirectory
start_offset===
24
end_offset===
42
Python OUTPUT===
 private static String r; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027nonDominatedSolutionArchive::add\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
solutionList.forEach(solution -> nonDominatedSolutionArchive.add(solution));
red_line===
->
start_offset===
34
end_offset===
36
Python OUTPUT===
 solutionList.forEach(solution -> nonDominatedSolutionArchive.add(solution)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"bounds\" which hides the field declared at line 20.
scn.ruleId===
1117
scn.suspCodeStr===
Bounds<Integer> bounds = boundsList.get(i);
red_line===
bounds
start_offset===
22
end_offset===
28
Python OUTPUT===
Bounds<Integer> bounds = boundsList.get(i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_TEST_FUNC = 25;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_TEST_FUNC = 25 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int MAX_SUPPORT_DIM = 100;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int MAX_SUPPORT_DIM = 100 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"paretoOptimalSolutions\".
scn.ruleId===
1854
scn.suspCodeStr===
paretoOptimalSolutions = new ArrayList<>(front);
red_line===
= new ArrayList<>(front)
start_offset===
27
end_offset===
51
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
S result = front.get(0);
red_line===
= front.get(0)
start_offset===
13
end_offset===
27
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"m_iSqrt\".
scn.ruleId===
3010
scn.suspCodeStr===
m_iSqrt = new double[MAX_SUPPORT_DIM];
red_line===
m_iSqrt
start_offset===
4
end_offset===
11
Python OUTPUT===
 m_inew double[MAX_SUPPORT_DIM]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sub1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double eta = 0, sub1 = 0, sub2 = 1;
red_line===
sub1
start_offset===
20
end_offset===
24
Python OUTPUT===
double eta = 0, sub1 = 0, sub2 = 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ub\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int lb, ub;
red_line===
ub
start_offset===
12
end_offset===
14
Python OUTPUT===
int lb, ub;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make const2 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int const2;
red_line===
const2
start_offset===
13
end_offset===
19
Python OUTPUT===
public static final int const2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_biases\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_biases;
red_line===
m_biases
start_offset===
19
end_offset===
27
Python OUTPUT===
private double[] m_biases;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double PC = tmpVar * (1 - tmpVar2);
red_line===
PC
start_offset===
11
end_offset===
13
Python OUTPUT===
double PC = tmpVar * (1 - tmpVar2);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Pd\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double Pd;
red_line===
Pd
start_offset===
16
end_offset===
18
Python OUTPUT===
private double Pd;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int number_of_objectives     = parseInt(st.nextToken());
red_line===
number_of_objectives
start_offset===
7
end_offset===
27
Python OUTPUT===
int number_of_objectives     = parseInt(st.nextToken());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.weightVectors.add(new ArrayList<Double>());
red_line===
<Double>
start_offset===
39
end_offset===
47
Python OUTPUT===
<> add ( new ArrayList < Double > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
List<Double> ideal_point;
red_line===
ideal_point
start_offset===
17
end_offset===
28
Python OUTPUT===
List<Double> ideal_point;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RATIO_YZ\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int RATIO_YZ = 29;
red_line===
RATIO_YZ
start_offset===
6
end_offset===
14
Python OUTPUT===
int RATIO_YZ = 29;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] b_array = new double[] {8.0, 8.0};
red_line===
b_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] b_array = new double[] {8.0, 8.0};
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
List<Double> b = new ArrayList<>();
red_line===
(pop[0].objs().size(), 1.0);
start_offset===
41
end_offset===
69
Python OUTPUT===
List<Double> b = new ArrayList<>();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
iterations.increment(1);
red_line===
;
start_offset===
29
end_offset===
30
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"count3\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int count1, count2, count3;
red_line===
count3
start_offset===
23
end_offset===
29
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"sum3\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double sum1, sum2, sum3, yj;
red_line===
sum3
start_offset===
21
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Rotated Hybrid Composition Function 2";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Rotated Hybrid Composition Function 2 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"f2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double f1, f2, uti, delta;
red_line===
f2
start_offset===
15
end_offset===
17
Python OUTPUT===
double f1, f2, uti, delta;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> candidate = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
43
end_offset===
52
Python OUTPUT===
<> candidate = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new CrowdingDistanceComparator<Solution<?>>() ;
red_line===
<Solution<?>>
start_offset===
47
end_offset===
60
Python OUTPUT===
<> ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<S>();
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double C1 = randomGenerator.nextDouble(c1Min, c1Max);
red_line===
C1
start_offset===
11
end_offset===
13
Python OUTPUT===
double C1 = randomGenerator.nextDouble(c1Min, c1Max);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.rankedSubpopulations.add(new ArrayList<S>());
red_line===
<S>
start_offset===
55
end_offset===
58
Python OUTPUT===
<> add ( new ArrayList < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"minimumValueSecondSolution\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double minimumValueFirstSolution, minimumValueSecondSolution, value;
red_line===
minimumValueSecondSolution
start_offset===
42
end_offset===
68
Python OUTPUT===
double minimumValueFirstSolution, minimumValueSecondSolution, value;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int sum1,sum2;
red_line===
sum2
start_offset===
11
end_offset===
15
Python OUTPUT===
int sum1,sum2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
str += "0";
red_line===
str
start_offset===
8
end_offset===
11
Python OUTPUT===
str += "0";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = txt.substring(j);
red_line===
= txt.substring(j)
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"int\".
scn.ruleId===
1905
scn.suspCodeStr===
int objD = (int) (i / perObjSubproblemNum);
red_line===
int
start_offset===
15
end_offset===
18
Python OUTPUT===
 int objD = ( ) ( i  /  perObjSubproblemNum);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int[] rank_ = (int [])individual.getAttribute("rank_");
red_line===
rank_
start_offset===
8
end_offset===
13
Python OUTPUT===
int[] rank_ = (int [])individual.getAttribute("rank_");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"problem\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
DoubleProblem problem = new MockProblem();
red_line===
problem
start_offset===
18
end_offset===
25
Python OUTPUT===
DoubleProblem problem = new MockProblem();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
JMetalLogger.logger.info("rpssize: " + referencePoints.size());
red_line===
;
start_offset===
68
end_offset===
69
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
protected List<ReferencePoint<S>> referencePoints = new Vector<>() ;
red_line===
new Vector<>()
start_offset===
54
end_offset===
68
Python OUTPUT===
protected List < ReferencePoint < S >> referencePoints = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
fitnessComparator = new ObjectiveComparator<DoubleSolution>(objectiveId);
red_line===
<DoubleSolution>
start_offset===
47
end_offset===
63
Python OUTPUT===
<> < DoubleSolution > ( objectiveId ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
positionInSwarm = new GenericSolutionAttribute<DoubleSolution, Integer>();
red_line===
<DoubleSolution, Integer>
start_offset===
50
end_offset===
75
Python OUTPUT===
<> Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
i++;
red_line===
i
start_offset===
10
end_offset===
11
Python OUTPUT===
i++;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<List<Pair<Integer, Double>>> order = new ArrayList<List<Pair<Integer, Double>>>(numberOfProblems);
red_line===
<List<Pair<Integer, Double>>>
start_offset===
59
end_offset===
88
Python OUTPUT===
<> new ArrayList < List < Pair < Integer , Double >> > ( numberOfProblems ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double prev_func = fitnessFunction(population.get(targetIdx), lambda[location]);
red_line===
prev_func
start_offset===
15
end_offset===
24
Python OUTPUT===
double prev_func = fitnessFunction(population.get(targetIdx), lambda[location]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
sum /= (double)ig;
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 sum  / = (double)
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<Vector<Double>> data = new Vector<Vector<Double>>() ;
red_line===
Vector<Vector<Double>>
start_offset===
4
end_offset===
26
Python OUTPUT===
ArrayList < ArrayList < Double >> data = new ArrayList < ArrayList < Double >> ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"delete\".
scn.ruleId===
899
scn.suspCodeStr===
experimentDirectory.delete();
red_line===
experimentDirectory.delete();
start_offset===
6
end_offset===
35
Python OUTPUT===
experimentDirectory.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Complete the task associated to this TODO comment.
scn.ruleId===
1135
scn.suspCodeStr===
protected StrengthRawFitness<DoubleSolution> strengthRawFitness;
red_line===
  protected StrengthRawFitness<DoubleSolution> strengthRawFitness; //TODO: invert this dependency
start_offset===
0
end_offset===
97
Python OUTPUT===
protected StrengthRawFitness<DoubleSolution> strengthRawFitness;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
data.add(new Vector<Double>());
red_line===
<Double>
start_offset===
25
end_offset===
33
Python OUTPUT===
<> new Vector < Double > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"sum\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double sum = 0, prod = 1, xx;
red_line===
sum
start_offset===
13
end_offset===
16
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SelectionOperator<List<DoubleSolution>, DoubleSolution> selection = new BinaryTournamentSelection<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
101
end_offset===
117
Python OUTPUT===
<> DoubleSolution > , DoubleSolution > selection = new BinaryTournamentSelection < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
continue;
red_line===
continue;
start_offset===
12
end_offset===
21
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
Random rnd = new Random();
red_line===
Random
start_offset===
21
end_offset===
27
Python OUTPUT===
Random rnd = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double y1, z1, S1, S2, S3, S4;
red_line===
S1
start_offset===
19
end_offset===
21
Python OUTPUT===
double y1, z1, S1, S2, S3, S4;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"solutionMatrix\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
distanceMatrix[i][j] = distance.compute(solutionMatrix[i], solutionMatrix[j]) ;
red_line===
solutionMatrix
start_offset===
48
end_offset===
62
Python OUTPUT===
distanceMatrix[i][j] = distance.compute(solutionMatrix[i], solutionMatrix[j]) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"N\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private int N, M;
red_line===
N
start_offset===
13
end_offset===
14
Python OUTPUT===
private int N, M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"Fd\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private double Fa, Fd;
red_line===
Fd
start_offset===
20
end_offset===
22
Python OUTPUT===
private double Fa, Fd;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(0) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(2) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PrintStream ps = new PrintStream("EBEs-M" + s + "-H(" + hi + ").txt");
red_line===
new PrintStream("EBEs-M" + s + "-H(" + hi + ").txt")
start_offset===
23
end_offset===
75
Python OUTPUT===
PrintStream ps = new PrintStream("EBEs-M" + s + "-H(" + hi + ").txt");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PrintStream ps = new PrintStream("EBEs-Strain-H(" + hi + ").txt");
red_line===
new PrintStream("EBEs-Strain-H(" + hi + ").txt")
start_offset===
25
end_offset===
73
Python OUTPUT===
PrintStream ps = new PrintStream("EBEs-Strain-H(" + hi + ").txt");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PrintStream ps = new PrintStream("EBEs-Reaction-H(" + hi + ").txt");
red_line===
new PrintStream("EBEs-Reaction-H(" + hi + ").txt")
start_offset===
23
end_offset===
73
Python OUTPUT===
PrintStream ps = new PrintStream("EBEs-Reaction-H(" + hi + ").txt");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<Object, Measure<?>> measures = new HashMap<Object, Measure<?>>();
red_line===
<Object, Measure<?>>
start_offset===
48
end_offset===
68
Python OUTPUT===
<> new HashMap < Object , Measure < ? >> ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PrintStream ps = new PrintStream("EBEs-Efforts-H(" + hi + ").txt");
red_line===
new PrintStream("EBEs-Efforts-H(" + hi + ").txt")
start_offset===
23
end_offset===
72
Python OUTPUT===
PrintStream ps = new PrintStream("EBEs-Efforts-H(" + hi + ").txt");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
PrintStream ps = new PrintStream("EBEs-Desp-H(" + hi + ").txt");
red_line===
new PrintStream("EBEs-Desp-H(" + hi + ").txt")
start_offset===
23
end_offset===
69
Python OUTPUT===
PrintStream ps = new PrintStream("EBEs-Desp-H(" + hi + ").txt");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Optimization multi-objective: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Optimization multi-objective: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
String contains no format specifiers.
scn.ruleId===
3457
scn.suspCodeStr===
ps.printf("-----------------------------------------------------------------------------");
red_line===
ps.printf("-----------------------------------------------------------------------------")
start_offset===
6
end_offset===
96
Python OUTPUT===
ps.printf("-----------------------------------------------------------------------------");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"The front is empty\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
exception.expectMessage(containsString("The front is empty"));
red_line===
"The front is empty"
start_offset===
43
end_offset===
63
Python OUTPUT===
exception.expectMessage(containsString("The front is empty"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"pointRandomGenerator\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(crossover, "pointRandomGenerator", pointRandomGenerator);
red_line===
"pointRandomGenerator"
start_offset===
44
end_offset===
66
Python OUTPUT===
ReflectionTestUtils.setField(crossover, "pointRandomGenerator", pointRandomGenerator);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(5, ObjectiveComparator.Ordering.DESCENDING) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 5 , ObjectiveComparator.Ordering.DESCENDING ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new RankingAndCrowdingDistanceComparator<Solution<?>>() ;
red_line===
<Solution<?>>
start_offset===
57
end_offset===
70
Python OUTPUT===
<> ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"ranking\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(comparator, "ranking", ranking);
red_line===
"ranking"
start_offset===
45
end_offset===
54
Python OUTPUT===
ReflectionTestUtils.setField(comparator, "ranking", ranking);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new RankingComparator<Solution<?>>() ;
red_line===
<Solution<?>>
start_offset===
38
end_offset===
51
Python OUTPUT===
<> ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L13<IntegerSolution> neighborhood = new L13<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
47
end_offset===
64
Python OUTPUT===
<> neighborhood = new L13 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BinaryTournamentSelection<Solution<Object>> selection = new BinaryTournamentSelection<Solution<Object>>() ;
red_line===
<Solution<Object>>
start_offset===
89
end_offset===
107
Python OUTPUT===
<> = new BinaryTournamentSelection < Solution < Object >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BinaryTournamentSelection<Solution<Object>> selection = new BinaryTournamentSelection<Solution<Object>>() ;
red_line===
<Solution<Object>>
start_offset===
89
end_offset===
107
Python OUTPUT===
<> = new BinaryTournamentSelection < Solution < Object >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BinaryTournamentSelection<Solution<Object>> selection = new BinaryTournamentSelection<Solution<Object>>() ;
red_line===
<Solution<Object>>
start_offset===
89
end_offset===
107
Python OUTPUT===
<> = new BinaryTournamentSelection < Solution < Object >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"suma\".
scn.ruleId===
1488
scn.suspCodeStr===
double suma = vp + vq - vpq;
red_line===
vp + vq - vpq
start_offset===
18
end_offset===
31
Python OUTPUT===
double suma = vp + vq - vpq;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfVariables_ = solution.getNumberOfVariables();
red_line===
numberOfVariables_
start_offset===
8
end_offset===
26
Python OUTPUT===
int numberOfVariables_ = solution.getNumberOfVariables();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BinaryTournamentSelection<DoubleSolution> selection = new BinaryTournamentSelection<DoubleSolution>(comparator) ;
red_line===
<DoubleSolution>
start_offset===
87
end_offset===
103
Python OUTPUT===
<> selection = new BinaryTournamentSelection < DoubleSolution > ( comparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
QualityIndicator<?, Double> epsilon = new Epsilon<PointSolution>(new ArrayFront()) ;
red_line===
<PointSolution>
start_offset===
53
end_offset===
68
Python OUTPUT===
<> Double > epsilon = new Epsilon < PointSolution > ( new ArrayFront ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
points[x].objectives[j] = frente[x][j];
red_line===
points[x].objectives[j] = frente[x][j];
start_offset===
10
end_offset===
49
Python OUTPUT===
points[x].objectives[j] = frente[x][j];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"regreso\".
scn.ruleId===
1488
scn.suspCodeStr===
double regreso = inclhv2(ps.points[0], ps.points[1]);
red_line===
inclhv2(ps.points[0], ps.points[1])
start_offset===
23
end_offset===
58
Python OUTPUT===
double regreso = inclhv2(ps.points[0], ps.points[1]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_L = solution.getVariable(0);
red_line===
x_L
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_L = solution.getVariable(0);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_B = solution.getVariable(1);
red_line===
x_B
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_B = solution.getVariable(1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double KG = 1.0 + 0.52 * x_D;
red_line===
KG
start_offset===
11
end_offset===
13
Python OUTPUT===
double KG = 1.0 + 0.52 * x_D;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
ReflectionTestUtils.setField(problem, "upperLimit", Arrays.asList(new Double[]{1.0}));
red_line===
new Double[]{1.0}
start_offset===
70
end_offset===
87
Python OUTPUT===
 ReflectionTestUtils.setField(problem, "upperLimit", Arrays.asList(new 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"L\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double L = 14;
red_line===
L
start_offset===
17
end_offset===
18
Python OUTPUT===
private double L = 14;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
solution.setObjective(1, 1.0 - x[0] * x[0] + 2.0 * sum2 / (double) count2);
red_line===
(double) count2
start_offset===
62
end_offset===
77
Python OUTPUT===
final solution . setObjective ( 1 , 1.0 - x [ 0 ] * x [ 0 ] + 2.0 * sum2 ( double ) count2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(0, x[0] + 2.0 * sum1 / (double) count1);
red_line===
double
start_offset===
50
end_offset===
56
Python OUTPUT===
 solution.setObjective(0, x[0] + 2.0 * sum1  /  (douount1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"K10\".
scn.ruleId===
3010
scn.suspCodeStr===
K10 = numberOfObjectives - 1;
red_line===
K10
start_offset===
4
end_offset===
7
Python OUTPUT===
 K10numberOfObjectives - 1; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
this.point[i] = point[i] ;
red_line===
this.point[i] = point[i] ;
start_offset===
6
end_offset===
32
Python OUTPUT===
this.point[i] = point[i] ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result += anObjectives_ + " ";
red_line===
result
start_offset===
6
end_offset===
12
Python OUTPUT===
result += anObjectives_ + " ";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> auxiliarPoint = new ArrayList<Double>();
red_line===
<Double>
start_offset===
46
end_offset===
54
Python OUTPUT===
<> auxiliarPoint = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(2, new DominanceComparator<S>());
red_line===
<S>
start_offset===
35
end_offset===
38
Python OUTPUT===
<> new DominanceComparator < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027solutionList::get\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
return indexList.stream().map(index -> solutionList.get(index)).collect(Collectors.toList());
red_line===
->
start_offset===
40
end_offset===
42
Python OUTPUT===
 return indexList.stream().map(index -> solutionList.get(index)).collect(Collectors.toList()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neighbours.add(new ArrayList<Integer>());
red_line===
<Integer>
start_offset===
34
end_offset===
43
Python OUTPUT===
<> new ArrayList < Integer > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yOffset\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double xOffset = 1.40, yOffset = 1.40, a = 1.5, b = 6.0, r = 0.1;
red_line===
yOffset
start_offset===
27
end_offset===
34
Python OUTPUT===
double xOffset = 1.40, yOffset = 1.40, a = 1.5, b = 6.0, r = 0.1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"ranking\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int[] ranking;
red_line===
ranking
start_offset===
16
end_offset===
23
Python OUTPUT===
 private int[] r 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SOL_ID\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private int SOL_ID;
red_line===
SOL_ID
start_offset===
14
end_offset===
20
Python OUTPUT===
private int SOL_ID;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_PARABOLICA\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_PARABOLICA = 5;
red_line===
CARGA_PARABOLICA
start_offset===
6
end_offset===
22
Python OUTPUT===
int CARGA_PARABOLICA = 5;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"mutation\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private MutationOperator<DoubleSolution> mutation;
red_line===
mutation
start_offset===
43
end_offset===
51
Python OUTPUT===
 private MutationOperator<DoubleSolution> m 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"mutation\" which hides the field declared at line 33.
scn.ruleId===
1117
scn.suspCodeStr===
PolynomialMutation mutation = (PolynomialMutation) builder.getMutationOperator();
red_line===
mutation
start_offset===
23
end_offset===
31
Python OUTPUT===
PolynomialMutation mutation = (PolynomialMutation) builder.getMutationOperator();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"crossover\" which hides the field declared at line 32.
scn.ruleId===
1117
scn.suspCodeStr===
SBXCrossover crossover = (SBXCrossover) builder.getCrossoverOperator();
red_line===
crossover
start_offset===
17
end_offset===
26
Python OUTPUT===
SBXCrossover crossover = (SBXCrossover) builder.getCrossoverOperator();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
i = i - 1;
red_line===
i
start_offset===
8
end_offset===
9
Python OUTPUT===
i = i - 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"offspring2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
BinarySet offspring1, offspring2;
red_line===
offspring2
start_offset===
28
end_offset===
38
Python OUTPUT===
BinarySet offspring1, offspring2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rankedSubPopulations.add(new ArrayList<S>());
red_line===
<S>
start_offset===
46
end_offset===
49
Python OUTPUT===
<> new ArrayList < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"a\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double a = sin(i)*Math.cos(j) ;
red_line===
a
start_offset===
19
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
duplicatedSolutions = new ArrayList<int[]>(n);
red_line===
<int[]>
start_offset===
39
end_offset===
46
Python OUTPUT===
<> [ ] > ( n ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SORT_INDEX\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private int SORT_INDEX;
red_line===
SORT_INDEX
start_offset===
14
end_offset===
24
Python OUTPUT===
private int SORT_INDEX;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"it2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
Iterator<Integer> it1, it2;
red_line===
it2
start_offset===
27
end_offset===
30
Python OUTPUT===
Iterator<Integer> it1, it2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
chart = new GenericChartContainer<S>(legend, delay) ;
red_line===
<S>
start_offset===
37
end_offset===
40
Python OUTPUT===
<> < S > ( legend , delay ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"distanceSum\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
normalizedObj[i] = individual.getObjective(i) / distanceSum;
red_line===
distanceSum
start_offset===
54
end_offset===
65
Python OUTPUT===
final normalizedObj [ i ] = individual . getObjective ( i ) distanceSum ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/data/\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
algorithmDirectory = experiment.getExperimentBaseDirectory() + "/data/" + algorithm.getAlgorithmTag();
red_line===
"/data/"
start_offset===
71
end_offset===
79
Python OUTPUT===
algorithmDirectory = experiment.getExperimentBaseDirectory() + "/data/" + algorithm.getAlgorithmTag();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Fitness<S> solutionFitness = new Fitness<S>() ;
red_line===
<S>
start_offset===
50
end_offset===
53
Python OUTPUT===
<> > solutionFitness = new Fitness < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new Experiment<S, Result>(this);
red_line===
<S, Result>
start_offset===
25
end_offset===
36
Python OUTPUT===
<> > ( this ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"value2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double value1, value2;
red_line===
value2
start_offset===
19
end_offset===
25
Python OUTPUT===
double value1, value2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error in womanPref list!");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Error in womanPref list!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int best_sub = candidate.get(best_idd);
red_line===
best_sub
start_offset===
10
end_offset===
18
Python OUTPUT===
int best_sub = candidate.get(best_idd);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
n = initialPopulationSize;
red_line===
equivalent to n += duplicatedSolutions.size();
start_offset===
34
end_offset===
80
Python OUTPUT===
n = initialPopulationSize;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rankedSubPopulations.add(j, new ArrayList<S>(front.get(j).size()));
red_line===
<S>
start_offset===
47
end_offset===
50
Python OUTPUT===
<> j , new ArrayList < S > ( front.get ( j ).size ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2, count3;
red_line===
count2
start_offset===
15
end_offset===
21
Python OUTPUT===
int count1, count2, count3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final Comparator<S> crowdingDistanceComparator = new CrowdingDistanceComparator<S>() ;
red_line===
<S>
start_offset===
89
end_offset===
92
Python OUTPUT===
<> S > crowdingDistanceComparator = new CrowdingDistanceComparator < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final Comparator<S> rankComparator = new RankingComparator<S>();
red_line===
<S>
start_offset===
68
end_offset===
71
Python OUTPUT===
<> S > rankComparator = new RankingComparator < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
14
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setAttribute("dir-score", 1.0 / (double) dirVector[i]);
red_line===
double
start_offset===
54
end_offset===
60
Python OUTPUT===
 solution.setAttribute("dir-score", 1.0  /  (double) dir[i]); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"normalizeDiff\".
scn.ruleId===
1854
scn.suspCodeStr===
double normalizeDiff = 0.0D;
red_line===
= 0.0D
start_offset===
27
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, yj, hj;
red_line===
sum2
start_offset===
17
end_offset===
21
Python OUTPUT===
double sum1, sum2, yj, hj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Arrays.copyOf\", \"Arrays.asList\", \"Collections.addAll\" or \"System.arraycopy\" instead.
scn.ruleId===
3012
scn.suspCodeStr===
newPoint[j] = referenceFront[referenceFront.length -1][j];
red_line===
newPoint[j] = referenceFront[referenceFront.length -1][j];
start_offset===
8
end_offset===
66
Python OUTPUT===
newPoint[j] = referenceFront[referenceFront.length -1][j];
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.swingWrapper = new SwingWrapper<XYChart>(new ArrayList<XYChart>(this.charts.values()));
red_line===
<XYChart>
start_offset===
40
end_offset===
49
Python OUTPUT===
<> new SwingWrapper < XYChart > ( new ArrayList < XYChart > ( this.charts.values ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Non-Continuous Rotated Hybrid Composition Function 3";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Non-Continuous Rotated Hybrid Composition Function 3 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result += "1" ;
red_line===
result
start_offset===
8
end_offset===
14
Python OUTPUT===
result += "1" ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
17
end_offset===
33
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Comparator<S> dominance = new DominanceComparator<S>();
red_line===
<S>
start_offset===
53
end_offset===
56
Python OUTPUT===
<> dominance = new DominanceComparator < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
result+= "0" ;
red_line===
result
start_offset===
8
end_offset===
14
Python OUTPUT===
result+= "0" ;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
location += position[obj] * Math.pow(2.0, obj * bisections);
red_line===
*
start_offset===
52
end_offset===
53
Python OUTPUT===
 location += position[obj] * Math.pow(2.0,obj * bisections);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> leadersArchive = new CrowdingDistanceArchive<DoubleSolution>(swarmSize) ;
red_line===
<DoubleSolution>
start_offset===
79
end_offset===
95
Python OUTPUT===
<> leadersArchive = new CrowdingDistanceArchive < DoubleSolution > ( swarmSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
mutation = new PermutationSwapMutation<Integer>(mutationProbability) ;
red_line===
<Integer>
start_offset===
42
end_offset===
51
Python OUTPUT===
<> < Integer > ( mutationProbability ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"getLowerBound\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
Integer lowerBound = solution.getLowerBound(index);
red_line===
getLowerBound
start_offset===
34
end_offset===
47
Python OUTPUT===
 Integer lowerBound = solution.getdex); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
inverseSum += 1.0 / (double) hypercube;
red_line===
double
start_offset===
29
end_offset===
35
Python OUTPUT===
 inverseSum += 1.0  /  (double)cube; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Error: not considerate START OBJECTIVES FUNCTION ");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Error: not considerate START OBJECTIVES FUNCTION "); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
prod *= Math.cos(10 * Math.PI * xx / Math.sqrt(i + 1));
red_line===
+
start_offset===
57
end_offset===
58
Python OUTPUT===
 prod *= Math.cos(10 * Math.PI * xx  /  Math.sqrt(i +1));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"offset\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private double offset = DEFAULT_OFFSET;
red_line===
offset
start_offset===
17
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Rij\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Rij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Rij
start_offset===
13
end_offset===
16
Python OUTPUT===
double[][] Rij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Selection component unknown: " + getValue()) ;
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Selection component unknown: " + getValue()) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Iw_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Iw_ = 10;
red_line===
Iw_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Iw_ = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfGroupsToCheckGeometry_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfGroupsToCheckGeometry_;
red_line===
numberOfGroupsToCheckGeometry_
start_offset===
16
end_offset===
46
Python OUTPUT===
protected int numberOfGroupsToCheckGeometry_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Replacement component unknown: " + getValue());
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Replacement component unknown: " + getValue());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_MOMENTO_PUNTUAL\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_MOMENTO_PUNTUAL = 8;
red_line===
CARGA_MOMENTO_PUNTUAL
start_offset===
6
end_offset===
27
Python OUTPUT===
int CARGA_MOMENTO_PUNTUAL = 8;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfWeigthHypothesis_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfWeigthHypothesis_;
red_line===
numberOfWeigthHypothesis_
start_offset===
16
end_offset===
41
Python OUTPUT===
protected int numberOfWeigthHypothesis_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"crossoverAndMutationVariation\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
variationParameter = new VariationParameter(args, List.of("crossoverAndMutationVariation"));
red_line===
"crossoverAndMutationVariation"
start_offset===
62
end_offset===
93
Python OUTPUT===
variationParameter = new VariationParameter(args, List.of("crossoverAndMutationVariation"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Introduce the new reference point (between commas):");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Introduce the new reference point (between commas):"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"c\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int f, c;
red_line===
c
start_offset===
11
end_offset===
12
Python OUTPUT===
int f, c;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this if-then-else statement by a single return statement.
scn.ruleId===
1126
scn.suspCodeStr===
if (x > y) return true;
red_line===
if
start_offset===
4
end_offset===
6
Python OUTPUT===
 if (x > y) return true; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Groups_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] Groups_;
red_line===
Groups_
start_offset===
23
end_offset===
30
Python OUTPUT===
protected double[][] Groups_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WeightElement_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] WeightElement_;
red_line===
WeightElement_
start_offset===
23
end_offset===
37
Python OUTPUT===
protected double[][] WeightElement_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Rpji\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Rpji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Rpji
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] Rpji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Tensiones: El archivo no pudo grabarse!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Tensiones: El archivo no pudo grabarse!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
String contains no format specifiers.
scn.ruleId===
3457
scn.suspCodeStr===
ps.printf("Nodo   Restriction   X    Y   Z   MX    MY    MZ");
red_line===
ps.printf("Nodo   Restriction   X    Y   Z   MX    MY    MZ")
start_offset===
6
end_offset===
67
Python OUTPUT===
ps.printf("Nodo   Restriction   X    Y   Z   MX    MY    MZ");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"z1\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double y1, z1;
red_line===
z1
start_offset===
15
end_offset===
17
Python OUTPUT===
double y1, z1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_UNIFORME_TOTAL\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_UNIFORME_TOTAL = 0;
red_line===
CARGA_UNIFORME_TOTAL
start_offset===
6
end_offset===
26
Python OUTPUT===
int CARGA_UNIFORME_TOTAL = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("invalid link");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("invalid link"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
public double const5[];
red_line===
[]
start_offset===
22
end_offset===
24
Python OUTPUT===
public double const5[];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i = 0, j = 0;
red_line===
j
start_offset===
15
end_offset===
16
Python OUTPUT===
int i = 0, j = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"L12\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
public int K12, L12;
red_line===
L12
start_offset===
18
end_offset===
21
Python OUTPUT===
public int K12, L12;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/E_ScafferF6_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /E_ScafferF6_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Rosenbrock's Function";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Rosenbrock's Function " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func4_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func4_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("There are problems");
red_line===
System.err
start_offset===
14
end_offset===
24
Python OUTPUT===
 System.err.println("There are problems"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sub2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sub1 = 0, sub2 = 0;
red_line===
sub2
start_offset===
21
end_offset===
25
Python OUTPUT===
double sub1 = 0, sub2 = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfObjectives_ = solution.getNumberOfObjectives();
red_line===
numberOfObjectives_
start_offset===
8
end_offset===
27
Python OUTPUT===
int numberOfObjectives_ = solution.getNumberOfObjectives();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make K10 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int K10;
red_line===
K10
start_offset===
13
end_offset===
16
Python OUTPUT===
public static final int K10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j = 0;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<S> rank = new DominanceRanking<S>();
red_line===
<S>
start_offset===
42
end_offset===
45
Python OUTPUT===
<> rank = new DominanceRanking < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment; \"population\" already holds the assigned value along all execution paths.
scn.ruleId===
4165
scn.suspCodeStr===
population = insertNewIndividualWhenItDominatesTheCurrentOne(population, offspringPopulation);
red_line===
population = insertNewIndividualWhenItDominatesTheCurrentOne(population, offspringPopulation)
start_offset===
6
end_offset===
99
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027archive::add\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
originalSolutionList.forEach(solution -> archive.add(solution));
red_line===
->
start_offset===
44
end_offset===
46
Python OUTPUT===
 originalSolutionList.forEach(solution -> archive.add(solution)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double G = 12 * 1e6;
red_line===
G
start_offset===
11
end_offset===
12
Python OUTPUT===
double G = 12 * 1e6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"E\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double E = 30 * 1e6;
red_line===
E
start_offset===
17
end_offset===
18
Python OUTPUT===
private double E = 30 * 1e6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027archive::add\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
offspringPopulation.forEach(s -> archive.add(s));
red_line===
->
start_offset===
34
end_offset===
36
Python OUTPUT===
 offspringPopulation.forEach(s -> archive.add(s)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int best_idd = (int) (randomGenerator.nextDouble() * candidate.size());
red_line===
best_idd
start_offset===
10
end_offset===
18
Python OUTPUT===
int best_idd = (int) (randomGenerator.nextDouble() * candidate.size());
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
solution.setObjective(1, 1.0 - Math.sqrt(x[0]) + 2.0*(4.0*sum2 - 2.0*prod2 + 2.0) / (double)count2);
red_line===
(double)count2
start_offset===
88
end_offset===
102
Python OUTPUT===
final solution . setObjective ( 1 , 1.0 - Math . sqrt ( x [ 0 ] ) + 2.0 * ( 4.0 * sum2 - 2.0 * prod2 + 2.0 ) ( double ) count2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<S>();
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x3\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x2, x3;
red_line===
x3
start_offset===
15
end_offset===
17
Python OUTPUT===
double x2, x3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> aux = new ArrayList<Double>();
red_line===
<Double>
start_offset===
38
end_offset===
46
Python OUTPUT===
<> aux = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<S>();
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(0, Math.cos(0.5*Math.PI*x[0])*Math.cos(0.5*Math.PI*x[1]) + 2.0*sum1 / (double)count1);
red_line===
double
start_offset===
97
end_offset===
103
Python OUTPUT===
 solution.setObjective(0, Math.cos(0.5*Math.PI*x[0])*Math.cos(0.5*Math.PI*x[1]) + 2.0*sum1  /  (douunt1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(2, Math.sin(0.5*Math.PI*x[0])                       + 2.0*sum3 / (double)count3) ;
red_line===
double
start_offset===
92
end_offset===
98
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("PUSH MEASURE. Counter = " + counter+ " First solution: " + solutions.get(0)) ;
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("PUSH MEASURE. Counter = " + counter+ " First solution: " + solutions.get(0)) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Number of Nondominated solutions (" + i + "): " + nonDominatedSolutions.get()) ;
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Number of Nondominated solutions (" + i + "): " + nonDominatedSolutions.get()) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
DecisionTreeEstimator<S> dte = new DecisionTreeEstimator<S>(paretoOptimalSolutions);
red_line===
<S>
start_offset===
58
end_offset===
61
Python OUTPUT===
<> dte = new DecisionTreeEstimator < S > ( paretoOptimalSolutions ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("PUSH MEASURE. Iteration: " + value) ;
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("PUSH MEASURE. Iteration: " + value) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(0);
red_line===
<DoubleSolution>
start_offset===
54
end_offset===
70
Python OUTPUT===
<> < DoubleSolution > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
float min_epsilon = min - EPSILON;
red_line===
min_epsilon
start_offset===
10
end_offset===
21
Python OUTPUT===
float min_epsilon = min - EPSILON;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Gt = Math.abs(Math.sin(0.5d * Math.PI * time));
red_line===
Gt
start_offset===
11
end_offset===
13
Python OUTPUT===
double Gt = Math.abs(Math.sin(0.5d * Math.PI * time));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] a_array = new double[] {2.0, 2.5, 2.5};
red_line===
a_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] a_array = new double[] {2.0, 2.5, 2.5};
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] b_array = new double[] {6.0, 12.0, 10.0};
red_line===
b_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] b_array = new double[] {6.0, 12.0, 10.0};
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"tmp2\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
return correctTo01(tmp1 / tmp2);
red_line===
tmp2
start_offset===
30
end_offset===
34
Python OUTPUT===
final return correctTo01 ( tmp1 tmp2 ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(10 * period);
red_line===
*
start_offset===
18
end_offset===
19
Python OUTPUT===
 Thread.sleep(10 * period);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"xi\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double aux, xi, xj;
red_line===
xi
start_offset===
16
end_offset===
18
Python OUTPUT===
double aux, xi, xj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
sum1 += StrictMath.pow(x[i] - (1.0 / StrictMath.sqrt((double) numberOfVariables)), 2.0);
red_line===
double
start_offset===
60
end_offset===
66
Python OUTPUT===
 sum1 += StrictMath.pow(x[i] - (1.0  /  StrictMath.sqrt((doublberOfVariables)), 2.0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfEval_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfEval_;
red_line===
numberOfEval_
start_offset===
16
end_offset===
29
Python OUTPUT===
protected int numberOfEval_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfLibertyDegree_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfLibertyDegree_ = 6;
red_line===
numberOfLibertyDegree_
start_offset===
16
end_offset===
38
Python OUTPUT===
protected int numberOfLibertyDegree_ = 6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String referenceSetFileName = outputDirectoryName + "/" + problem.getTag() + ".csv" ;
red_line===
"/"
start_offset===
58
end_offset===
61
Python OUTPUT===
 String referenceSetFileName = outputDirectoryName + " / " +oblem.getTag() + ".csv" ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of objective function: " + getNumberOfObjectives());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of objective function: " + getNumberOfObjectives()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of Variables: " + getNumberOfVariables());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of Variables: " + getNumberOfVariables()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(0, ObjectiveComparator.Ordering.DESCENDING) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 0 , ObjectiveComparator.Ordering.DESCENDING ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double N = 4.0, theta = 0.25 * Math.PI;
red_line===
N
start_offset===
11
end_offset===
12
Python OUTPUT===
double N = 4.0, theta = 0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"Double.parseDouble\" for this string-to-double conversion.
scn.ruleId===
2130
scn.suspCodeStr===
double value = Double.valueOf(st.nextToken());
red_line===
Double.valueOf(st.nextToken())
start_offset===
25
end_offset===
55
Python OUTPUT===
double value = Double.valueOf(st.nextToken());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yOffset\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double xOffset = 1.6, yOffset = 1.6, a = 1.5, b = 6.0, r = 0.1;
red_line===
yOffset
start_offset===
26
end_offset===
33
Python OUTPUT===
double xOffset = 1.6, yOffset = 1.6, a = 1.5, b = 6.0, r = 0.1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rankedSubPopulations = new ArrayList<ArrayList<S>>();
red_line===
<ArrayList<S>>
start_offset===
40
end_offset===
54
Python OUTPUT===
<> S >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"The front is empty\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Check.that(front.length > 0, "The front is empty");
red_line===
"The front is empty"
start_offset===
33
end_offset===
53
Python OUTPUT===
Check.that(front.length > 0, "The front is empty");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"voyage_costs\".
scn.ruleId===
1854
scn.suspCodeStr===
double voyage_costs = (fuel_cost + port_cost) * RTPA;
red_line===
= (fuel_cost + port_cost) * RTPA
start_offset===
24
end_offset===
56
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"EPSILON\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private static final double EPSILON = 0.0000000000001;
red_line===
EPSILON
start_offset===
30
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUMBER_OF_BITS = 512;
red_line===
NUMBER_OF_BITS
start_offset===
8
end_offset===
22
Python OUTPUT===
int NUMBER_OF_BITS = 512;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"running_costs\".
scn.ruleId===
1854
scn.suspCodeStr===
double running_costs = 40000.0 * Math.pow(DWT, 0.3);
red_line===
= 40000.0 * Math.pow(DWT, 0.3)
start_offset===
25
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"capital_costs\".
scn.ruleId===
1854
scn.suspCodeStr===
double capital_costs = 0.2 * ship_cost;
red_line===
= 0.2 * ship_cost
start_offset===
25
end_offset===
42
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
assertEquals((Math.sqrt(4+4)), receivedValue, EPSILON) ;
red_line===
+
start_offset===
29
end_offset===
30
Python OUTPUT===
 assertEquals((Math.sqrt(4+4)), receivedValue, EPSILON) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sub2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sub1, sub2 = 0;
red_line===
sub2
start_offset===
17
end_offset===
21
Python OUTPUT===
double sub1, sub2 = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(0, yj + 2.0*sum1 / (double)count1);
red_line===
double
start_offset===
46
end_offset===
52
Python OUTPUT===
 solution.setObjective(0, yj + 2.0*sum1  /  (douunt1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iz = Groups_[idx][Iz_];
red_line===
Iz
start_offset===
11
end_offset===
13
Python OUTPUT===
double Iz = Groups_[idx][Iz_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2;
red_line===
count2
start_offset===
15
end_offset===
21
Python OUTPUT===
int count1, count2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final WeakHashMap<PushMeasure<?>, PushMeasure<?>> measureCache = new WeakHashMap<PushMeasure<?>, PushMeasure<?>>();
red_line===
<PushMeasure<?>, PushMeasure<?>>
start_offset===
89
end_offset===
121
Python OUTPUT===
<> measureCache = new WeakHashMap < PushMeasure < ? > , PushMeasure < ? >> ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
solution.setObjective(0, x[0] + 2.0 * sum1 / (double)count1);
red_line===
(double)count1
start_offset===
49
end_offset===
63
Python OUTPUT===
final solution . setObjective ( 0 , x [ 0 ] + 2.0 * sum1 ( double ) count1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double y_i = Math.pow(solution.getVariable(i - 1), Ft);
red_line===
y_i
start_offset===
13
end_offset===
16
Python OUTPUT===
double y_i = Math.pow(solution.getVariable(i - 1), Ft);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double y_1 = Math.pow(solution.getVariable(0), Ft);
red_line===
y_1
start_offset===
11
end_offset===
14
Python OUTPUT===
double y_1 = Math.pow(solution.getVariable(0), Ft);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfWeigthsNodes_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfWeigthsNodes_;
red_line===
numberOfWeigthsNodes_
start_offset===
16
end_offset===
37
Python OUTPUT===
protected int numberOfWeigthsNodes_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KGjj\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KGjj = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KGjj
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] KGjj = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Kii\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Kii = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Kii
start_offset===
13
end_offset===
16
Python OUTPUT===
double[][] Kii = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yj\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double xj, yj, zj;
red_line===
yj
start_offset===
21
end_offset===
23
Python OUTPUT===
double xj, yj, zj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int N = geometryCheck_[i].length;
red_line===
N
start_offset===
10
end_offset===
11
Python OUTPUT===
int N = geometryCheck_[i].length;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"INDEX_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int INDEX_ = 0;
red_line===
INDEX_
start_offset===
6
end_offset===
12
Python OUTPUT===
int INDEX_ = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"b\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double a, b, r, max;
red_line===
b
start_offset===
14
end_offset===
15
Python OUTPUT===
double a, b, r, max;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
protected Fitness<S> solutionFitness = new Fitness<S>();
red_line===
<S>
start_offset===
52
end_offset===
55
Python OUTPUT===
<> > solutionFitness = new Fitness < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
indicatorValues = new ArrayList<List<Double>>();
red_line===
<List<Double>>
start_offset===
35
end_offset===
49
Python OUTPUT===
<> Double >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>();
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double E = Groups_[idx][E_];
red_line===
E
start_offset===
11
end_offset===
12
Python OUTPUT===
double E = Groups_[idx][E_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"subproblemNum_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int subproblemNum_;
red_line===
subproblemNum_
start_offset===
15
end_offset===
29
Python OUTPUT===
protected int subproblemNum_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TournamentSelection<Solution<?>> selection = new TournamentSelection<Solution<?>>(comparator, 2) ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new TournamentSelection < Solution < ? >> ( comparator , 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TournamentSelection<Solution<?>> selection = new TournamentSelection<Solution<?>>(4) ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new TournamentSelection < Solution < ? >> ( 4 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
ReflectionTestUtils.setField(problem, "lowerLimit", Arrays.asList(new Double[]{1.0}));
red_line===
new Double[]{1.0}
start_offset===
70
end_offset===
87
Python OUTPUT===
 ReflectionTestUtils.setField(problem, "lowerLimit", Arrays.asList(new 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double SY = 0.0;
red_line===
SY
start_offset===
13
end_offset===
15
Python OUTPUT===
double SY = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RTji\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] RTji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
RTji
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] RTji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  " + txt);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" " + txt); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double RTPA = 350.0 / (sea_days + port_days);
red_line===
RTPA
start_offset===
11
end_offset===
15
Python OUTPUT===
double RTPA = 350.0 / (sea_days + port_days);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_Vk = x[4];
red_line===
x_Vk
start_offset===
11
end_offset===
15
Python OUTPUT===
double x_Vk = x[4];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_T = x[3];
red_line===
x_T
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_T = x[3];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double KB = 0.53 * x_T;
red_line===
KB
start_offset===
11
end_offset===
13
Python OUTPUT===
double KB = 0.53 * x_T;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"xx\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum = 0, xx;
red_line===
xx
start_offset===
22
end_offset===
24
Python OUTPUT===
double sum = 0, xx;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of constraints for Geometric: " + numberOfConstraintsGeometric_);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of constraints for Geometric: " + numberOfConstraintsGeometric_); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Gt = Math.abs(Math.sin(0.5d * Math.PI * time));
red_line===
Gt
start_offset===
11
end_offset===
13
Python OUTPUT===
double Gt = Math.abs(Math.sin(0.5d * Math.PI * time));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Ft = 1.0d + 100.0d * Math.pow(Math.sin(0.5d * Math.PI * time), 4.0d);
red_line===
Ft
start_offset===
11
end_offset===
13
Python OUTPUT===
double Ft = 1.0d + 100.0d * Math.pow(Math.sin(0.5d * Math.PI * time), 4.0d);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"aZ_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int aZ_ = 2;
red_line===
aZ_
start_offset===
6
end_offset===
9
Python OUTPUT===
int aZ_ = 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4, x5, x6;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4, x5, x6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iz = Groups_[idx][Iz_];
red_line===
Iz
start_offset===
11
end_offset===
13
Python OUTPUT===
double Iz = Groups_[idx][Iz_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double fuel_carried = daily_consumption * (sea_days + 5.0);
red_line===
fuel_carried
start_offset===
11
end_offset===
23
Python OUTPUT===
double fuel_carried = daily_consumption * (sea_days + 5.0);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double voyage_costs = (fuel_cost + port_cost) * RTPA;
red_line===
voyage_costs
start_offset===
11
end_offset===
23
Python OUTPUT===
double voyage_costs = (fuel_cost + port_cost) * RTPA;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double capital_costs = 0.2 * ship_cost;
red_line===
capital_costs
start_offset===
11
end_offset===
24
Python OUTPUT===
double capital_costs = 0.2 * ship_cost;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ys\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double as, ys, es, al, yl, el;
red_line===
ys
start_offset===
15
end_offset===
17
Python OUTPUT===
double as, ys, es, al, yl, el;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_BIAS = CEC2005SUPPORTDATADIRECTORY + "/fbias_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_BIAS = CEC2005SUPPORTDATADIRECTORY + " /fbias_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final private String CEC2005Code = "org.uma.jmetal.problem.singleobjective.cec2005competitioncode" ;
red_line===
private
start_offset===
15
end_offset===
22
Python OUTPUT===
private static final String CEC2005Code = " org.uma.jmetal.problem.singleobjective.cec2005competitioncode " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ejj\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] ejj = new double[numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_]
start_offset===
19
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_MOMENTO_DISTRIBUIDO\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_MOMENTO_DISTRIBUIDO = 6;
red_line===
CARGA_MOMENTO_DISTRIBUIDO
start_offset===
6
end_offset===
31
Python OUTPUT===
int CARGA_MOMENTO_DISTRIBUIDO = 6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
idealPoint.update(population);
red_line===
;
start_offset===
35
end_offset===
36
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_matrix\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_matrix;
red_line===
m_matrix
start_offset===
27
end_offset===
35
Python OUTPUT===
private final double[][] m_matrix;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"f2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double f1, f2;
red_line===
f2
start_offset===
15
end_offset===
17
Python OUTPUT===
double f1, f2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int test_dimension = 50;
red_line===
test_dimension
start_offset===
10
end_offset===
24
Python OUTPUT===
int test_dimension = 50;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func1_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func1_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static private double[] m_iSqrt;
red_line===
private
start_offset===
9
end_offset===
16
Python OUTPUT===
private static final double [ ] m_iSqrt ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selectionOperator = new BinaryTournamentSelection<S>(new RankingAndCrowdingDistanceComparator<S>());
red_line===
<S>
start_offset===
53
end_offset===
56
Python OUTPUT===
<> < S > ( new RankingAndCrowdingDistanceComparator < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"neighbourSize\".
scn.ruleId===
1854
scn.suspCodeStr===
neighbourSize = neighborhood[subproblemId].length;
red_line===
= neighborhood[subproblemId].length
start_offset===
16
end_offset===
51
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"referencePoint\".
scn.ruleId===
1854
scn.suspCodeStr===
List<Double> referencePoint = new ArrayList<>() ;
red_line===
= new ArrayList<>()
start_offset===
32
end_offset===
51
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
problem = new Srinivas() ;
red_line===
new Osyczka2();
start_offset===
33
end_offset===
48
Python OUTPUT===
problem = new Srinivas() ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make parentPublic a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean parentPublic = true;
red_line===
parentPublic
start_offset===
17
end_offset===
29
Python OUTPUT===
public static final boolean parentPublic = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_a\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_a;
red_line===
m_a
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_a;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_b\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_b;
red_line===
m_b
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_b;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
mult *= Math.cos(x[var] / Math.sqrt(var + 1));
red_line===
+
start_offset===
46
end_offset===
47
Python OUTPUT===
 mult *= Math.cos(x[var]  /  Math.sqrt(var + 1));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"solutionRun\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private S solutionRun=null;
red_line===
solutionRun
start_offset===
12
end_offset===
23
Python OUTPUT===
 private S snull; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"offspringPopulationSize\".
scn.ruleId===
1854
scn.suspCodeStr===
int offspringPopulationSize = populationSize;
red_line===
= populationSize
start_offset===
32
end_offset===
48
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"populationSize\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
int populationSize = 4;
red_line===
populationSize
start_offset===
8
end_offset===
22
Python OUTPUT===
int populationSize = 4;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"vectorStrList\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
referenceVectors = new double[vectorStrList.size()][];
red_line===
vectorStrList.size
start_offset===
34
end_offset===
52
Python OUTPUT===
referenceVectors = new double[vectorStrList.size()][];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"Observable\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
protected Observable<Map<String, Object>> observable;
red_line===
Observable
start_offset===
12
end_offset===
22
Python OUTPUT===
 protected OMap<String, Object>> observable; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"evaluations\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(algorithm, "evaluations", 15);
red_line===
"evaluations"
start_offset===
44
end_offset===
57
Python OUTPUT===
ReflectionTestUtils.setField(algorithm, "evaluations", 15);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int min_rp = -1;
red_line===
min_rp
start_offset===
8
end_offset===
14
Python OUTPUT===
int min_rp = -1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CONSTRAINT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CONSTRAINT = 28;
red_line===
CONSTRAINT
start_offset===
6
end_offset===
16
Python OUTPUT===
int CONSTRAINT = 28;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of constraints for Deflection: " + numberOfConstraintsNodes_);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of constraints for Deflection: " + numberOfConstraintsNodes_); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<double[]> listOfWeights = new Vector<>();
red_line===
Vector<double[]>
start_offset===
2
end_offset===
18
Python OUTPUT===
ArrayList < double [ ] > listOfWeights = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make alpha a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double alpha = 0.0;
red_line===
alpha
start_offset===
15
end_offset===
20
Python OUTPUT===
public static final double alpha = 0.0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make utility a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double utility = Double.POSITIVE_INFINITY;
red_line===
utility
start_offset===
15
end_offset===
22
Python OUTPUT===
public static final double utility = Double . POSITIVE_INFINITY ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make rank a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int rank = Integer.MAX_VALUE;
red_line===
rank
start_offset===
12
end_offset===
16
Python OUTPUT===
public static final int rank = Integer . MAX_VALUE ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"a\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double a = sin(i) * Math.cos(j);
red_line===
a
start_offset===
19
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double min_dist = Double.MAX_VALUE;
red_line===
min_dist
start_offset===
11
end_offset===
19
Python OUTPUT===
double min_dist = Double.MAX_VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final var min_rp = first.remove(min_rp_index);
red_line===
min_rp
start_offset===
13
end_offset===
19
Python OUTPUT===
final var min_rp = first.remove(min_rp_index);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
List<Double>   ideal_point    = translateObjectives(source);
red_line===
ideal_point
start_offset===
17
end_offset===
28
Python OUTPUT===
List<Double>   ideal_point    = translateObjectives(source);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
final var min_rp_index = 1 == first.size() ? 0 : rand.nextInt(0, first.size() - 1);
red_line===
min_rp_index
start_offset===
13
end_offset===
25
Python OUTPUT===
final var min_rp_index = 1 == first.size() ? 0 : rand.nextInt(0, first.size() - 1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
public boolean HasPotentialMember() { return potentialMembers.size()>0; }
red_line===
HasPotentialMember
start_offset===
17
end_offset===
35
Python OUTPUT===
public boolean HasPotentialMember() { return potentialMembers.size()>0; }
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.dominanceComparator = new DominanceComparator<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
54
end_offset===
70
Python OUTPUT===
<> new DominanceComparator < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<DoubleSolution> ranking = new DominanceRanking<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
58
end_offset===
74
Python OUTPUT===
<> ranking = new DominanceRanking < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int best_sub = candidate.get(best_idd);
red_line===
best_sub
start_offset===
10
end_offset===
18
Python OUTPUT===
int best_sub = candidate.get(best_idd);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"populationSize\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
Integer populationSize = 0;
red_line===
populationSize
start_offset===
12
end_offset===
26
Python OUTPUT===
Integer populationSize = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"f2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double f1, f2;
red_line===
f2
start_offset===
17
end_offset===
19
Python OUTPUT===
double f1, f2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"d2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double d1, d2, nl;
red_line===
d2
start_offset===
17
end_offset===
19
Python OUTPUT===
double d1, d2, nl;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make sigma a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[] sigma;
red_line===
sigma
start_offset===
18
end_offset===
23
Python OUTPUT===
public static final double [ ] sigma ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make shiftGlobalOptimum a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[][] shiftGlobalOptimum;
red_line===
shiftGlobalOptimum
start_offset===
20
end_offset===
38
Python OUTPUT===
public static final double [ ] [ ] shiftGlobalOptimum ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make biases a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[] biases;
red_line===
biases
start_offset===
18
end_offset===
24
Python OUTPUT===
public static final double [ ] biases ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make fmax a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[] fmax;
red_line===
fmax
start_offset===
18
end_offset===
22
Python OUTPUT===
public static final double [ ] fmax ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"config\" which hides the field declared at line 113.
scn.ruleId===
1117
scn.suspCodeStr===
Config config = new Config();
red_line===
config
start_offset===
11
end_offset===
17
Python OUTPUT===
Config config = new Config();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("dMOPSO.fitnessFunction: unknown type " + functionType);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("dMOPSO.fitnessFunction: unknown type " + functionType); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"offSpringSolutionSet\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
List<S> solutionSet, offSpringSolutionSet;
red_line===
offSpringSolutionSet
start_offset===
25
end_offset===
45
Python OUTPUT===
List<S> solutionSet, offSpringSolutionSet;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"evaluations\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int evaluations;
red_line===
evaluations
start_offset===
14
end_offset===
25
Python OUTPUT===
 private int e 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"minimumValue\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double value, minimumValue;
red_line===
minimumValue
start_offset===
22
end_offset===
34
Python OUTPUT===
double value, minimumValue;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.environmentalSelection = new EnvironmentalSelection<S>(populationSize, k);
red_line===
<S>
start_offset===
60
end_offset===
63
Python OUTPUT===
<> new EnvironmentalSelection < S > ( populationSize , k ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"indexOfWeight\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int index, indexOfWeight;
red_line===
indexOfWeight
start_offset===
19
end_offset===
32
Python OUTPUT===
int index, indexOfWeight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"minimumDistance\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int minimumDistance;
red_line===
minimumDistance
start_offset===
14
end_offset===
29
Python OUTPUT===
 private int m 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
LinkedList<Integer> freeMen = new LinkedList<Integer>();
red_line===
<Integer>
start_offset===
48
end_offset===
57
Python OUTPUT===
<> freeMen = new LinkedList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<S> larvae = new ArrayList<S>(broadcastSpawners.size() / 2);
red_line===
<S>
start_offset===
32
end_offset===
35
Python OUTPUT===
<> larvae = new ArrayList < S > ( broadcastSpawners.size ( ) 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"random\" which hides the field declared at line 26.
scn.ruleId===
1117
scn.suspCodeStr===
MersenneTwisterGenerator random = new MersenneTwisterGenerator();
red_line===
random
start_offset===
27
end_offset===
33
Python OUTPUT===
MersenneTwisterGenerator random = new MersenneTwisterGenerator();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"f2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double f1, f2;
red_line===
f2
start_offset===
17
end_offset===
19
Python OUTPUT===
double f1, f2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"tc\".
scn.ruleId===
1854
scn.suspCodeStr===
int tc = (int) (0.8 * maxEvaluations / populationSize);
red_line===
= (int) (0.8 * maxEvaluations / populationSize)
start_offset===
11
end_offset===
58
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<S>(0);
red_line===
<S>
start_offset===
40
end_offset===
43
Python OUTPUT===
<> < S > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("invalid link");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("invalid link"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
c = 1.0 / 2.0 + Math.log(2);
red_line===
1.193;
start_offset===
35
end_offset===
41
Python OUTPUT===
c = 1.0 / 2.0 + Math.log(2);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
weight = 1.0 / (2.0 * Math.log(2));
red_line===
0.721;
start_offset===
42
end_offset===
48
Python OUTPUT===
weight = 1.0 / (2.0 * Math.log(2));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"pB\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
DoubleSolution gB, pB;
red_line===
pB
start_offset===
25
end_offset===
27
Python OUTPUT===
DoubleSolution gB, pB;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
56
end_offset===
72
Python OUTPUT===
<> new SequentialSolutionListEvaluator < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/EF8F2_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /EF8F2_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
GenericSolutionAttribute<PointSolution, String> solutionAttribute = new GenericSolutionAttribute<PointSolution, String>()  ;
red_line===
<PointSolution, String>
start_offset===
100
end_offset===
123
Python OUTPUT===
<> = new GenericSolutionAttribute < PointSolution , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String referenceFrontFileName = outputDirectoryName + "/" + problem.getReferenceFront();
red_line===
"/"
start_offset===
58
end_offset===
61
Python OUTPUT===
 String referenceFrontFileName = outputDirectoryName + " / "problem.getReferenceFront(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
holmValues[i] = 0.05 / (double) (i);
red_line===
double
start_offset===
30
end_offset===
36
Python OUTPUT===
 holmValues[i] = 0.05  /  (doubl; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Ranking\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
results.addColumns(algorithms, DoubleColumn.create("Ranking", rank));
red_line===
"Ranking"
start_offset===
55
end_offset===
64
Python OUTPUT===
results.addColumns(algorithms, DoubleColumn.create("Ranking", rank));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"EPSILON\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double EPSILON = 0.0000000001;
red_line===
EPSILON
start_offset===
17
end_offset===
24
Python OUTPUT===
private double EPSILON = 0.0000000001;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"DTLZ1.3D.csv\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
problemList.add(new ExperimentProblem<>(new DTLZ1()).setReferenceFront("DTLZ1.3D.csv"));
red_line===
"DTLZ1.3D.csv"
start_offset===
75
end_offset===
89
Python OUTPUT===
problemList.add(new ExperimentProblem<>(new DTLZ1()).setReferenceFront("DTLZ1.3D.csv"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
46
end_offset===
59
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new RandomSelection<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
35
end_offset===
51
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Introduce the new reference point (between commas):");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Introduce the new reference point (between commas):"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Warning: the problem name is not used anymore and may be removed later.") ;
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Warning: the problem name is not used anymore and may be removed later.") ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(numberOfCores);
red_line===
<DoubleSolution>
start_offset===
56
end_offset===
72
Python OUTPUT===
<> < DoubleSolution > ( numberOfCores ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double S = 189000.0;
red_line===
S
start_offset===
11
end_offset===
12
Python OUTPUT===
double S = 189000.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(100) ;
red_line===
<DoubleSolution>
start_offset===
72
end_offset===
88
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(numberOfCores);
red_line===
<DoubleSolution>
start_offset===
56
end_offset===
72
Python OUTPUT===
<> < DoubleSolution > ( numberOfCores ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SimplePushMeasure<Object> wrapped = new SimplePushMeasure<Object>();
red_line===
<Object>
start_offset===
59
end_offset===
67
Python OUTPUT===
<> wrapped = new SimplePushMeasure < Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SimplePushMeasure<Object> wrapped = new SimplePushMeasure<Object>();
red_line===
<Object>
start_offset===
59
end_offset===
67
Python OUTPUT===
<> wrapped = new SimplePushMeasure < Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Vmbp = 10.58 - 0.674 * x1 * x2 - 0.67275 * x2;
red_line===
Vmbp
start_offset===
11
end_offset===
15
Python OUTPUT===
double Vmbp = 10.58 - 0.674 * x1 * x2 - 0.67275 * x2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"g\".
scn.ruleId===
1854
scn.suspCodeStr===
double g = 9.8065;
red_line===
= 9.8065
start_offset===
13
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Integer> candidate = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
43
end_offset===
52
Python OUTPUT===
<> candidate = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2;
red_line===
count2
start_offset===
16
end_offset===
22
Python OUTPUT===
int count1, count2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"l5\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int s2, l5, l6, ln, r;
red_line===
l5
start_offset===
12
end_offset===
14
Python OUTPUT===
int s2, l5, l6, ln, r;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/schwefel_206_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /schwefel_206_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
public int pindex9[];
red_line===
[]
start_offset===
20
end_offset===
22
Python OUTPUT===
public int pindex9[];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"numberOfParticlesToInform\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int numberOfParticlesToInform;
red_line===
numberOfParticlesToInform
start_offset===
14
end_offset===
39
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"rho\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double thera = Math.PI / 2, rho = r;
red_line===
rho
start_offset===
32
end_offset===
35
Python OUTPUT===
double thera = Math.PI / 2, rho = r;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "parent-private";
red_line===
"parent-private"
start_offset===
10
end_offset===
26
Python OUTPUT===
 return "p
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "child-test";
red_line===
"child-test"
start_offset===
10
end_offset===
22
Python OUTPUT===
 return "c
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Vmbp = 10.58 - 0.674 * x1 * x2 - 0.67275 * x2;
red_line===
Vmbp
start_offset===
11
end_offset===
15
Python OUTPUT===
double Vmbp = 10.58 - 0.674 * x1 * x2 - 0.67275 * x2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Vfd = 16.45 - 0.489 * x3 * x7 - 0.843 * x5 * x6;
red_line===
Vfd
start_offset===
11
end_offset===
14
Python OUTPUT===
double Vfd = 16.45 - 0.489 * x3 * x7 - 0.843 * x5 * x6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double R = Math.sqrt(tmpVar);
red_line===
R
start_offset===
11
end_offset===
12
Python OUTPUT===
double R = Math.sqrt(tmpVar);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"vectorStrList\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
referenceVectors = new double[vectorStrList.size()][];
red_line===
vectorStrList.size
start_offset===
34
end_offset===
52
Python OUTPUT===
referenceVectors = new double[vectorStrList.size()][];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double objetiveMaxn[] = new double[numberOfObjectives];
red_line===
[]
start_offset===
23
end_offset===
25
Python OUTPUT===
double objetiveMaxn[] = new double[numberOfObjectives];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException();
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"finalize\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
super.finalize();
red_line===
finalize
start_offset===
10
end_offset===
18
Python OUTPUT===
 super.fin 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(outputDirectory + " exists and it is a file");
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException(outputDirectory + " exists and it is a file");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Unable to create the directory") ;
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Unable to create the directory") ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Variation component unknown: " + getValue());
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Variation component unknown: " + getValue());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"overallConstraintViolationSolution2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double overallConstraintViolationSolution1, overallConstraintViolationSolution2;
red_line===
overallConstraintViolationSolution2
start_offset===
46
end_offset===
81
Python OUTPUT===
double overallConstraintViolationSolution1, overallConstraintViolationSolution2;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Call \"Optional#isPresent()\" before accessing the value.
scn.ruleId===
3655
scn.suspCodeStr===
int numberOfObjectives = lines.findFirst().get().split(" ").length ;
red_line===
lines.findFirst()
start_offset===
29
end_offset===
46
Python OUTPUT===
int numberOfObjectives = lines.findFirst().get().split(" ").length ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"M9\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
public int M9;
red_line===
M9
start_offset===
13
end_offset===
15
Python OUTPUT===
public int M9;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this integer division to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
sub2 = K11 / (numberOfObjectives - 1);
red_line===
K11 / (numberOfObjectives - 1)
start_offset===
11
end_offset===
41
Python OUTPUT===
 sub2 = K11  /  (numberOfObjectives -1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfVariables_ = solution.getNumberOfVariables();
red_line===
numberOfVariables_
start_offset===
8
end_offset===
26
Python OUTPUT===
int numberOfVariables_ = solution.getNumberOfVariables();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(0, 0.5*(yj + 2*x[0])*x[1]		+ 2.0*sum1 / (double)count1);
red_line===
double
start_offset===
67
end_offset===
73
Python OUTPUT===
 solution.setObjective(0, 0.5*(yj + 2*x[0])*x[1] + 2.0*sum1  /  (doubnt1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This accessibility update should be removed.
scn.ruleId===
3011
scn.suspCodeStr===
c.setAccessible(true);
red_line===
c.setAccessible(true)
start_offset===
4
end_offset===
25
Python OUTPUT===
c.setAccessible(true);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> leadersArchive = new CrowdingDistanceArchive<DoubleSolution>(swarmSize) ;
red_line===
<DoubleSolution>
start_offset===
79
end_offset===
95
Python OUTPUT===
<> leadersArchive = new CrowdingDistanceArchive < DoubleSolution > ( swarmSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"sum1\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double sum1 = 0.0;
red_line===
sum1
start_offset===
11
end_offset===
15
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"sum2\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double sum2 = 0.0;
red_line===
sum2
start_offset===
11
end_offset===
15
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
equalComparator = new EqualSolutionsComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
50
end_offset===
66
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
56
end_offset===
72
Python OUTPUT===
<> new SequentialSolutionListEvaluator < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"DristributionIndex\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double probabilityPolynomial, DristributionIndex;
red_line===
DristributionIndex
start_offset===
34
end_offset===
52
Python OUTPUT===
double probabilityPolynomial, DristributionIndex;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<BinarySolution>() ;
red_line===
<BinarySolution>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Warning: the problem name is not used anymore and may be removed later.");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Warning: the problem name is not used anymore and may be removed later."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(3, 3, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( 3 , 3 , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(10 * period);
red_line===
*
start_offset===
18
end_offset===
19
Python OUTPUT===
 Thread.sleep(10 * period);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
parameterList.forEach(System.out::println);
red_line===
System.out
start_offset===
26
end_offset===
36
Python OUTPUT===
 parameterList.forEach(System.out::println); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<Solution<?>> ranking = new DominanceRanking<Solution<?>>() ;
red_line===
<Solution<?>>
start_offset===
55
end_offset===
68
Python OUTPUT===
<> = new DominanceRanking < Solution < ? >> ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(10 * period);
red_line===
*
start_offset===
18
end_offset===
19
Python OUTPUT===
 Thread.sleep(10 * period);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "child-private";
red_line===
"child-private"
start_offset===
10
end_offset===
25
Python OUTPUT===
 return "c
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"i\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
RandomGenerator<Integer> generator = RandomGenerator.filter(() -> random.nextInt(5), (i) -> i != 2);
red_line===
(
start_offset===
87
end_offset===
88
Python OUTPUT===
 RandomGenerator<Integer> generator = RandomGenerator.filter(() -> random.nextInt(5),(i) -> != 2);
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
Random random = new Random();
red_line===
Random
start_offset===
22
end_offset===
28
Python OUTPUT===
Random random = new Random();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
Random random = new Random();
red_line===
Random
start_offset===
22
end_offset===
28
Python OUTPUT===
Random random = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
RankingAndCrowdingSelection<Solution<?>> selection = new RankingAndCrowdingSelection<Solution<?>>(1) ;
red_line===
<Solution<?>>
start_offset===
88
end_offset===
101
Python OUTPUT===
<> = new RankingAndCrowdingSelection < Solution < ? >> ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
RankingAndCrowdingSelection<DoubleSolution> selection = new RankingAndCrowdingSelection<DoubleSolution>(4) ;
red_line===
<DoubleSolution>
start_offset===
91
end_offset===
107
Python OUTPUT===
<> selection = new RankingAndCrowdingSelection < DoubleSolution > ( 4 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"dmaxx\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double dminn, dmaxx;
red_line===
dmaxx
start_offset===
18
end_offset===
23
Python OUTPUT===
double dminn, dmaxx;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double objetiveMinn[] = new double[numberOfObjectives];
red_line===
[]
start_offset===
23
end_offset===
25
Python OUTPUT===
double objetiveMinn[] = new double[numberOfObjectives];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Double> bb = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> bb = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"aux\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
double aux = 0.0;
red_line===
aux
start_offset===
11
end_offset===
14
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.selectionOperator = new PESA2Selection<S>();
red_line===
<S>
start_offset===
47
end_offset===
50
Python OUTPUT===
<> new PESA2Selection < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
setMaxPopulationSize(populationSize);
red_line===
;
start_offset===
42
end_offset===
43
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"overall2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double overall1, overall2;
red_line===
overall2
start_offset===
21
end_offset===
29
Python OUTPUT===
double overall1, overall2;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
jMetalProperties.load(new FileInputStream("../jmetal.properties"));
red_line===
new FileInputStream("../jmetal.properties")
start_offset===
26
end_offset===
69
Python OUTPUT===
jMetalProperties.load(new FileInputStream("../jmetal.properties"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"frontToEvaluate\".
scn.ruleId===
1854
scn.suspCodeStr===
Front frontToEvaluate = new ArrayFront(frontDirectory + "/ZDT1.pf");
red_line===
= new ArrayFront(frontDirectory + "/ZDT1.pf")
start_offset===
26
end_offset===
71
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"value\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double minValue, value;
red_line===
value
start_offset===
21
end_offset===
26
Python OUTPUT===
double minValue, value;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"distance\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double volume, distance;
red_line===
distance
start_offset===
19
end_offset===
27
Python OUTPUT===
double volume, distance;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(0, x[0] + hj + 2.0*(4.0*sum1 - 2.0*prod1 + 2.0) / (double)count1);
red_line===
double
start_offset===
77
end_offset===
83
Python OUTPUT===
 solution.setObjective(0, x[0] + hj + 2.0*(4.0*sum1 - 2.0*prod1 + 2.0)  /  (douunt1); 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
solution.setObjective(1, 1.0 - x[0] + hj + 2.0*(4.0*sum2 - 2.0*prod2 + 2.0) / (double)count2);
red_line===
(double)count2
start_offset===
82
end_offset===
96
Python OUTPUT===
final solution . setObjective ( 1 , 1.0 - x [ 0 ] + hj + 2.0 * ( 4.0 * sum2 - 2.0 * prod2 + 2.0 ) ( double ) count2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"tempDistance\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double tempVolume, tempDistance;
red_line===
tempDistance
start_offset===
25
end_offset===
37
Python OUTPUT===
double tempVolume, tempDistance;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
mean = mean / (double) (numberOfPoints - 1);
red_line===
double
start_offset===
19
end_offset===
25
Python OUTPUT===
 mean = mean  /  (dounumberOfPoints - 1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Density estimator does not exist: " + getName());
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Density estimator does not exist: " + getName());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func2_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func2_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
archive = new HypervolumeArchive<DoubleSolution>(100, new PISAHypervolume<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
36
end_offset===
52
Python OUTPUT===
<> < DoubleSolution > ( 100 , new PISAHypervolume < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
builder = new PESA2Builder<DoubleSolution>(problem, crossover, mutation);
red_line===
<DoubleSolution>
start_offset===
30
end_offset===
46
Python OUTPUT===
<> < DoubleSolution > ( problem , crossover , mutation ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"mutation\" which hides the field declared at line 30.
scn.ruleId===
1117
scn.suspCodeStr===
PolynomialMutation mutation = (PolynomialMutation) builder.getMutationOperator();
red_line===
mutation
start_offset===
23
end_offset===
31
Python OUTPUT===
PolynomialMutation mutation = (PolynomialMutation) builder.getMutationOperator();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new SpatialSpreadDeviationSelection<DoubleSolution>(5);
red_line===
<DoubleSolution>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> < DoubleSolution > ( 5 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Iteration (" + i + ")            : " + currentIteration.get()) ;
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Iteration (" + i + ") : " + currentIteration.get()) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Computing time (" + i + ")       : " + currentComputingTime.get()) ;
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Computing time (" + i + ") : " + currentComputingTime.get()) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
return sum / (double) lambda.length;
red_line===
double
start_offset===
18
end_offset===
24
Python OUTPUT===
 return sum  /  (douambda.length; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Structure");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Structure"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("PUSH MEASURE. Counter = " + counter+ " First solution: " + solutions.get(0).getVariable(0)) ;
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("PUSH MEASURE. Counter = " + counter+ " First solution: " + solutions.get(0).getVariable(0)) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("PUSH MEASURE. Iteration: " + value) ;
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("PUSH MEASURE. Iteration: " + value) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.selectionOperator = new RandomSelection<S>() ;
red_line===
<S>
start_offset===
48
end_offset===
51
Python OUTPUT===
<> new RandomSelection < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"perturbation\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double probabilityUniform, perturbation;
red_line===
perturbation
start_offset===
31
end_offset===
43
Python OUTPUT===
double probabilityUniform, perturbation;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Hypervolume: " + value) ;
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Hypervolume: " + value) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SimplePushMeasure<Object> measure2 = new SimplePushMeasure<Object>();
red_line===
<Object>
start_offset===
60
end_offset===
68
Python OUTPUT===
<> measure2 = new SimplePushMeasure < Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
15
end_offset===
31
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SelectionOperator<List<DoubleSolution>, DoubleSolution> selectionOperator = new BinaryTournamentSelection<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
109
end_offset===
125
Python OUTPUT===
<> DoubleSolution > , DoubleSolution > selectionOperator = new BinaryTournamentSelection < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"populationSize\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
Integer populationSize = 3;
red_line===
populationSize
start_offset===
12
end_offset===
26
Python OUTPUT===
Integer populationSize = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
sub2 *= (Math.cos(x[i] / Math.sqrt(i + 1)));
red_line===
+
start_offset===
43
end_offset===
44
Python OUTPUT===
 sub2 *= (Math.cos (x[i]  / Math.sqrt (i + 1)));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"QAx_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int QAx_ = 3;
red_line===
QAx_
start_offset===
6
end_offset===
10
Python OUTPUT===
int QAx_ = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"M\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private int N, M;
red_line===
M
start_offset===
16
end_offset===
17
Python OUTPUT===
private int N, M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static private JavaSparkContext sparkContext ;
red_line===
private
start_offset===
9
end_offset===
16
Python OUTPUT===
private static final JavaSparkContext sparkContext ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
mutation = new PermutationSwapMutation<Integer>(mutationProbability);
red_line===
<Integer>
start_offset===
42
end_offset===
51
Python OUTPUT===
<> < Integer > ( mutationProbability ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"yi\".
scn.ruleId===
1854
scn.suspCodeStr===
yi = y - ey;
red_line===
= y - ey
start_offset===
7
end_offset===
15
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"eZ_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int eZ_ = 23;
red_line===
eZ_
start_offset===
6
end_offset===
9
Python OUTPUT===
int eZ_ = 23;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_eY_UPPER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_eY_UPPER_LIMIT = 41;
red_line===
VAR_eY_UPPER_LIMIT
start_offset===
6
end_offset===
24
Python OUTPUT===
int VAR_eY_UPPER_LIMIT = 41;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Kij\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Kij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Kij
start_offset===
13
end_offset===
16
Python OUTPUT===
double[][] Kij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"QH_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int QH_ = 0;
red_line===
QH_
start_offset===
6
end_offset===
9
Python OUTPUT===
int QH_ = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"t\".
scn.ruleId===
1854
scn.suspCodeStr===
double[][] t = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_][numberOfLibertyDegree_]
start_offset===
17
end_offset===
77
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] Emax = new double[geometryCheck_[i].length];
red_line===
Emax
start_offset===
15
end_offset===
19
Python OUTPUT===
double[] Emax = new double[geometryCheck_[i].length];
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
jMetalProperties.load(new FileInputStream("../jmetal.properties"));
red_line===
new FileInputStream("../jmetal.properties")
start_offset===
26
end_offset===
69
Python OUTPUT===
jMetalProperties.load(new FileInputStream("../jmetal.properties"));
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ELONGATION_POS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int ELONGATION_POS = 34;
red_line===
ELONGATION_POS
start_offset===
6
end_offset===
20
Python OUTPUT===
int ELONGATION_POS = 34;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Efforti_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][][] Efforti_;
red_line===
Efforti_
start_offset===
25
end_offset===
33
Python OUTPUT===
protected double[][][] Efforti_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"SSTot\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
ENS += SSRes / SSTot;
red_line===
SSTot
start_offset===
21
end_offset===
26
Python OUTPUT===
final ENS += SSRes SSTot ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double D;
red_line===
D
start_offset===
11
end_offset===
12
Python OUTPUT===
double D;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"gZ_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int gZ_ = 5;
red_line===
gZ_
start_offset===
6
end_offset===
9
Python OUTPUT===
int gZ_ = 5;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"c\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int f, c, q;
red_line===
c
start_offset===
11
end_offset===
12
Python OUTPUT===
int f, c, q;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_TEMPERATURA\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_TEMPERATURA = 10;
red_line===
CARGA_TEMPERATURA
start_offset===
6
end_offset===
23
Python OUTPUT===
int CARGA_TEMPERATURA = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Y = 0;
red_line===
Y
start_offset===
11
end_offset===
12
Python OUTPUT===
double Y = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<S>(0);
red_line===
<S>
start_offset===
40
end_offset===
43
Python OUTPUT===
<> < S > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"r\".
scn.ruleId===
1854
scn.suspCodeStr===
double r = 0.0;
red_line===
= 0.0
start_offset===
15
end_offset===
20
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int num_func = job.numberOfBasicFunctions;
red_line===
num_func
start_offset===
8
end_offset===
16
Python OUTPUT===
int num_func = job.numberOfBasicFunctions;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<S>() ;
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_Z_LOWER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_Z_LOWER_LIMIT = 38;
red_line===
VAR_Z_LOWER_LIMIT
start_offset===
6
end_offset===
23
Python OUTPUT===
int VAR_Z_LOWER_LIMIT = 38;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KGij\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KGij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KGij
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] KGij = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Strainj_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][][] Strainj_;
red_line===
Strainj_
start_offset===
25
end_offset===
33
Python OUTPUT===
protected double[][][] Strainj_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"elementsBetweenDiffGreat_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int elementsBetweenDiffGreat_;
red_line===
elementsBetweenDiffGreat_
start_offset===
16
end_offset===
41
Python OUTPUT===
protected int elementsBetweenDiffGreat_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"STRESS_CUT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int STRESS_CUT = 33;
red_line===
STRESS_CUT
start_offset===
6
end_offset===
16
Python OUTPUT===
int STRESS_CUT = 33;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iy = Groups_[idx][Iy_];
red_line===
Iy
start_offset===
11
end_offset===
13
Python OUTPUT===
double Iy = Groups_[idx][Iy_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double MD = 0.0;
red_line===
MD
start_offset===
11
end_offset===
13
Python OUTPUT===
double MD = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.next();
red_line===
= input.next()
start_offset===
14
end_offset===
28
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RIG_ART\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int RIG_ART = 1;
red_line===
RIG_ART
start_offset===
6
end_offset===
13
Python OUTPUT===
int RIG_ART = 1;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iez = z * Math.pow(y, 3.0) / 12.0;
red_line===
Iez
start_offset===
11
end_offset===
14
Python OUTPUT===
double Iez = z * Math.pow(y, 3.0) / 12.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.next();
red_line===
= input.next()
start_offset===
16
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"theta\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r = 0.1, theta = -0.25 * Math.PI;
red_line===
theta
start_offset===
20
end_offset===
25
Python OUTPUT===
double r = 0.1, theta = -0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
14
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double G = Groups_[idx][G_];
red_line===
G
start_offset===
11
end_offset===
12
Python OUTPUT===
double G = Groups_[idx][G_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double G1 = Math.asin((zi - zj) / Element_[el][L_]);
red_line===
G1
start_offset===
11
end_offset===
13
Python OUTPUT===
double G1 = Math.asin((zi - zj) / Element_[el][L_]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"matrixWidthBand_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int matrixWidthBand_;
red_line===
matrixWidthBand_
start_offset===
16
end_offset===
32
Python OUTPUT===
protected int matrixWidthBand_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] a_array = new double[] {2.0, 2.0};
red_line===
a_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] a_array = new double[] {2.0, 2.0};
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Ai = zi * yi;
red_line===
Ai
start_offset===
11
end_offset===
13
Python OUTPUT===
double Ai = zi * yi;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
String contains no format specifiers.
scn.ruleId===
3457
scn.suspCodeStr===
ps.printf("Elements  Nodo   Stracc    Scomp     Scut");
red_line===
ps.printf("Elements  Nodo   Stracc    Scomp     Scut")
start_offset===
8
end_offset===
62
Python OUTPUT===
ps.printf("Elements  Nodo   Stracc    Scomp     Scut");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] b_array = new double[] {6.0, 12.0, 10.0};
red_line===
b_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] b_array = new double[] {6.0, 12.0, 10.0};
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("invalid link");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("invalid link"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainResidualMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[] StrainResidualMax_;
red_line===
StrainResidualMax_
start_offset===
21
end_offset===
39
Python OUTPUT===
protected double[] StrainResidualMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_UNIFORME_PARCIAL\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_UNIFORME_PARCIAL = 2;
red_line===
CARGA_UNIFORME_PARCIAL
start_offset===
6
end_offset===
28
Python OUTPUT===
int CARGA_UNIFORME_PARCIAL = 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KGii\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KGii = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KGii
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] KGii = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"WeightNode_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] WeightNode_;
red_line===
WeightNode_
start_offset===
23
end_offset===
34
Python OUTPUT===
protected double[][] WeightNode_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.next();
red_line===
= input.next()
start_offset===
14
end_offset===
28
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iez = z * Math.pow(y, 3.0) / 12.0;
red_line===
Iez
start_offset===
11
end_offset===
14
Python OUTPUT===
double Iez = z * Math.pow(y, 3.0) / 12.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Az_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Az_ = 5;
red_line===
Az_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Az_ = 5;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Lij = Element_[e][L_];
red_line===
Lij
start_offset===
11
end_offset===
14
Python OUTPUT===
double Lij = Element_[e][L_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"AREA\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int AREA = 4;
red_line===
AREA
start_offset===
6
end_offset===
10
Python OUTPUT===
int AREA = 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"It_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int It_ = 9;
red_line===
It_
start_offset===
6
end_offset===
9
Python OUTPUT===
int It_ = 9;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"TypeMaterial_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int TypeMaterial_ = 11;
red_line===
TypeMaterial_
start_offset===
6
end_offset===
19
Python OUTPUT===
int TypeMaterial_ = 11;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainResidualMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[] StrainResidualMin_;
red_line===
StrainResidualMin_
start_offset===
21
end_offset===
39
Python OUTPUT===
protected double[] StrainResidualMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of Nodes: " + numberOfNodes);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of Nodes: " + numberOfNodes); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double ENS = 0.0;
red_line===
ENS
start_offset===
11
end_offset===
14
Python OUTPUT===
double ENS = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"nj\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int ni, nj;
red_line===
nj
start_offset===
12
end_offset===
14
Python OUTPUT===
int ni, nj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ni\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, ni, nj;
red_line===
ni
start_offset===
11
end_offset===
13
Python OUTPUT===
int i, ni, nj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
str += "0";
red_line===
str
start_offset===
8
end_offset===
11
Python OUTPUT===
str += "0";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double S = Groups_[idx][AREA];
red_line===
S
start_offset===
11
end_offset===
12
Python OUTPUT===
double S = Groups_[idx][AREA];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_PUNTUAL\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_PUNTUAL = 1;
red_line===
CARGA_PUNTUAL
start_offset===
6
end_offset===
19
Python OUTPUT===
int CARGA_PUNTUAL = 1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"NxxMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] NxxMax_;
red_line===
NxxMax_
start_offset===
23
end_offset===
30
Python OUTPUT===
protected double[][] NxxMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KjiSOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KjiSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KjiSOG
start_offset===
13
end_offset===
19
Python OUTPUT===
double[][] KjiSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KiiSOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KiiSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KiiSOG
start_offset===
13
end_offset===
19
Python OUTPUT===
double[][] KiiSOG = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(1, 1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double) count2);
red_line===
double
start_offset===
67
end_offset===
73
Python OUTPUT===
 solution.setObjective(1, 1.0 - Math.sqrt(x[0]) + 2.0 * sum2  /  (douount2); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"RIG_RIG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int RIG_RIG = 0;
red_line===
RIG_RIG
start_offset===
6
end_offset===
13
Python OUTPUT===
int RIG_RIG = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
fitnessComparator = new ObjectiveComparator<DoubleSolution>(objectiveId);
red_line===
<DoubleSolution>
start_offset===
47
end_offset===
63
Python OUTPUT===
<> < DoubleSolution > ( objectiveId ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"r2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r1, r2;
red_line===
r2
start_offset===
15
end_offset===
17
Python OUTPUT===
double r1, r2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
findBestSolution = new BestSolutionSelection<DoubleSolution>(fitnessComparator);
red_line===
<DoubleSolution>
start_offset===
48
end_offset===
64
Python OUTPUT===
<> < DoubleSolution > ( fitnessComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(2, 1.0 - x[1]                   + 2.0*sum3 / (double)count3) ;
red_line===
double
start_offset===
72
end_offset===
78
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"problem\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
DoubleProblem problem = new MockProblem();
red_line===
problem
start_offset===
18
end_offset===
25
Python OUTPUT===
DoubleProblem problem = new MockProblem();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"problem\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
DoubleProblem problem = new MockProblem();
red_line===
problem
start_offset===
18
end_offset===
25
Python OUTPUT===
DoubleProblem problem = new MockProblem();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"problem\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
DoubleProblem problem = new MockProblem();
red_line===
problem
start_offset===
18
end_offset===
25
Python OUTPUT===
DoubleProblem problem = new MockProblem();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"problem\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
DoubleProblem problem = new MockProblem();
red_line===
problem
start_offset===
18
end_offset===
25
Python OUTPUT===
DoubleProblem problem = new MockProblem();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"population\" which hides the field declared at line 29.
scn.ruleId===
1117
scn.suspCodeStr===
List<S> population = new ArrayList<>(populationSize);
red_line===
population
start_offset===
12
end_offset===
22
Python OUTPUT===
List<S> population = new ArrayList<>(populationSize);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<S> ranking = new DominanceRanking<S>();
red_line===
<S>
start_offset===
45
end_offset===
48
Python OUTPUT===
<> ranking = new DominanceRanking < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"distance\".
scn.ruleId===
1488
scn.suspCodeStr===
double distance = norm_vector(realB);
red_line===
norm_vector(realB)
start_offset===
22
end_offset===
40
Python OUTPUT===
double distance = norm_vector(realB);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
i++;
red_line===
i
start_offset===
10
end_offset===
11
Python OUTPUT===
i++;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int num_ranks = 0;
red_line===
num_ranks
start_offset===
8
end_offset===
17
Python OUTPUT===
int num_ranks = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int level_size = frontSize.get(curRank);
red_line===
level_size
start_offset===
18
end_offset===
28
Python OUTPUT===
int level_size = frontSize.get(curRank);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"minDist\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double distance, minDist;
red_line===
minDist
start_offset===
21
end_offset===
28
Python OUTPUT===
double distance, minDist;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int level_size = frontSize.get(i);
red_line===
level_size
start_offset===
14
end_offset===
24
Python OUTPUT===
int level_size = frontSize.get(i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Stagnation\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double Stagnation = 0.0;
red_line===
Stagnation
start_offset===
17
end_offset===
27
Python OUTPUT===
private double Stagnation = 0.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
archiveSSD = new SpatialSpreadDeviationArchive<S>(archiveSize);
red_line===
<S>
start_offset===
50
end_offset===
53
Python OUTPUT===
<> < S > ( archiveSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SpatialSpreadDeviation<S> SSD = new SpatialSpreadDeviation<S>();
red_line===
<S>
start_offset===
62
end_offset===
65
Python OUTPUT===
<> SSD = new SpatialSpreadDeviation < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
archive = new AdaptiveGridArchive<S>(archiveSize, biSections, problem.getNumberOfObjectives());
red_line===
<S>
start_offset===
37
end_offset===
40
Python OUTPUT===
<> < S > ( archiveSize , biSections , problem.getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<S>();
red_line===
<S>
start_offset===
40
end_offset===
43
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Utilization\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] Utilization;
red_line===
Utilization
start_offset===
19
end_offset===
30
Python OUTPUT===
private double[] Utilization;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"r\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
s = e[i] / r;
red_line===
r
start_offset===
17
end_offset===
18
Python OUTPUT===
final s = e [ i ] r ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new PAES<S>(problem, archiveSize, maxEvaluations, biSections, mutationOperator);
red_line===
<S>
start_offset===
19
end_offset===
22
Python OUTPUT===
<> S > ( problem , archiveSize , maxEvaluations , biSections , mutationOperator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j, k, res = 0;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j, k, res = 0;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
weights[i] = (Math.log(mu + 0.5) - Math.log(i + 1));
red_line===
+
start_offset===
52
end_offset===
53
Python OUTPUT===
 weights[i] = (Math.log (mu + 0.5) -Math.log (i + 1));
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"sum2\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
muEff = sum1 * sum1 / sum2;
red_line===
sum2
start_offset===
26
end_offset===
30
Python OUTPUT===
final muEff = sum1 * sum1 sum2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String referenceSetFileName = outputDirectoryName + "/" + problem.getTag() + ".ps";
red_line===
"/"
start_offset===
56
end_offset===
59
Python OUTPUT===
 String referenceSetFileName = outputDirectoryName + " / "problem.getTag() + ".ps"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<DoubleSolution>(0);
red_line===
<DoubleSolution>
start_offset===
40
end_offset===
56
Python OUTPUT===
<> < DoubleSolution > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("-----");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("-----"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(indicatorFileName);
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println(indicatorFileName); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(fileArray);
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println(fileArray); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
42
end_offset===
55
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Introduce the new reference point (between commas):");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Introduce the new reference point (between commas):"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
42
end_offset===
55
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(numberOfCores);
red_line===
<DoubleSolution>
start_offset===
56
end_offset===
72
Python OUTPUT===
<> < DoubleSolution > ( numberOfCores ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"a\".
scn.ruleId===
1854
scn.suspCodeStr===
double a = sin(i) * Math.cos(j);
red_line===
= sin(i) * Math.cos(j)
start_offset===
21
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "child-protected";
red_line===
"child-protected"
start_offset===
10
end_offset===
27
Python OUTPUT===
 return "c
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this method and declare a constant for this value.
scn.ruleId===
3400
scn.suspCodeStr===
return "parent-protected";
red_line===
"parent-protected"
start_offset===
10
end_offset===
28
Python OUTPUT===
 return "p
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(10 * period);
red_line===
*
start_offset===
18
end_offset===
19
Python OUTPUT===
 Thread.sleep(10 * period);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
Random random = new Random();
red_line===
Random
start_offset===
22
end_offset===
28
Python OUTPUT===
Random random = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"ranking\" which hides the field declared at line 20.
scn.ruleId===
1117
scn.suspCodeStr===
Ranking<Solution<?>> ranking = new ExperimentalFastNonDominanceRanking<>();
red_line===
ranking
start_offset===
25
end_offset===
32
Python OUTPUT===
Ranking<Solution<?>> ranking = new ExperimentalFastNonDominanceRanking<>();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
assertEquals((int)Math.pow(2.0, bisections * objectives), adaptiveGrid.getHypercubes().length) ;
red_line===
*
start_offset===
47
end_offset===
48
Python OUTPUT===
 assertEquals((int)Math.pow(2.0, bisections * objectives), adaptiveGrid.getHypercubes().length) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"hypercubes\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(adaptiveGrid, "hypercubes", hypercubes);
red_line===
"hypercubes"
start_offset===
47
end_offset===
59
Python OUTPUT===
ReflectionTestUtils.setField(adaptiveGrid, "hypercubes", hypercubes);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
int[] hypercubes = new int[(int)Math.pow(2.0, bisections * objectives)] ;
red_line===
*
start_offset===
61
end_offset===
62
Python OUTPUT===
 int[] hypercubes = new int[( int)Math.pow(2.0, bisections * objectives)] ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(100) ;
red_line===
<DoubleSolution>
start_offset===
72
end_offset===
88
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
GenerationalDistance<DoubleSolution> gd = new GenerationalDistance<DoubleSolution>(front);
red_line===
<DoubleSolution>
start_offset===
70
end_offset===
86
Python OUTPUT===
<> gd = new GenerationalDistance < DoubleSolution > ( front ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(new DominanceComparator<S>(), n_arity) ;
red_line===
<S>
start_offset===
32
end_offset===
35
Python OUTPUT===
<> < S > ( ) , n_arity ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"beta\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double alpha, beta, betaq;
red_line===
beta
start_offset===
18
end_offset===
22
Python OUTPUT===
double alpha, beta, betaq;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
front.add(new LinkedList<Integer>());
red_line===
<Integer>
start_offset===
30
end_offset===
39
Python OUTPUT===
<> new LinkedList < Integer > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rankedSubPopulations.add(j, new ArrayList<S>(front.get(j).size()));
red_line===
<S>
start_offset===
47
end_offset===
50
Python OUTPUT===
<> j , new ArrayList < S > ( front.get ( j ).size ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
grid = new AdaptiveGrid<S>(bisections, objectives);
red_line===
<S>
start_offset===
27
end_offset===
30
Python OUTPUT===
<> < S > ( bisections , objectives ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"valueX2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double valueX1, valueX2;
red_line===
valueX2
start_offset===
20
end_offset===
27
Python OUTPUT===
double valueX1, valueX2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"c2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double c1, c2;
red_line===
c2
start_offset===
15
end_offset===
17
Python OUTPUT===
double c1, c2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistanceComparator = new CrowdingDistanceComparator<S>() ;
red_line===
<S>
start_offset===
63
end_offset===
66
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistance = new CrowdingDistance<S>() ;
red_line===
<S>
start_offset===
43
end_offset===
46
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(new SimplePushMeasure<Value>(name, description), null);
red_line===
<Value>
start_offset===
28
end_offset===
35
Python OUTPUT===
<> < Value > ( name , description ) , null ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, PullMeasure<?>> measures = new HashMap<String, PullMeasure<?>>();
red_line===
<String, PullMeasure<?>>
start_offset===
52
end_offset===
76
Python OUTPUT===
<> new HashMap < String , PullMeasure < ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Evaluation<Solution, Value> evaluation = new Evaluation<Solution, Value>();
red_line===
<Solution, Value>
start_offset===
57
end_offset===
74
Python OUTPUT===
<> = new Evaluation < Solution , Value > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
double result = sum / (sumOfDistancesToIdealPoint(solution1) * sumOfDistancesToIdealPoint(solution2)) ;
red_line===
sum / (sumOfDistancesToIdealPoint(solution1) * sumOfDistancesToIdealPoint(solution2))
start_offset===
20
end_offset===
105
Python OUTPUT===
double result = sum / (sumOfDistancesToIdealPoint(solution1) * sumOfDistancesToIdealPoint(solution2)) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"DISTANCES_\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
solutionList.get(i).setAttribute("DISTANCES_", distances);
red_line===
"DISTANCES_"
start_offset===
39
end_offset===
51
Python OUTPUT===
solutionList.get(i).setAttribute("DISTANCES_", distances);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double result = Math.sqrt((diffX * diffX) + (diffY * diffY));
red_line===
+
start_offset===
45
end_offset===
46
Python OUTPUT===
 double result = Math.sqrt((diffX *diffX) +(diffY *diffY));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make maxinter9 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int maxinter9;
red_line===
maxinter9
start_offset===
13
end_offset===
22
Python OUTPUT===
public static final int maxinter9 ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this integer division to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
sub2 = (numberOfVariables - K11) / 2;
red_line===
(numberOfVariables - K11) / 2
start_offset===
11
end_offset===
40
Python OUTPUT===
 sub2 = (numberOfVariables - K11)  / 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sub2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sub1 = 0, sub2 = 0;
red_line===
sub2
start_offset===
21
end_offset===
25
Python OUTPUT===
double sub1 = 0, sub2 = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(fileName) ;
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(fileName) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double P = 6000;
red_line===
P
start_offset===
11
end_offset===
12
Python OUTPUT===
double P = 6000;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double J = 2 * Math.sqrt(2) * x1 * x2 * tmpVar;
red_line===
J
start_offset===
11
end_offset===
12
Python OUTPUT===
double J = 2 * Math.sqrt(2) * x1 * x2 * tmpVar;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double G = 12 * 1e6;
red_line===
G
start_offset===
11
end_offset===
12
Python OUTPUT===
double G = 12 * 1e6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double L = 14;
red_line===
L
start_offset===
11
end_offset===
12
Python OUTPUT===
double L = 14;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double K = (G * x3 * x3 * x3 * x3) / (8 * x1 * x2 * x2 * x2);
red_line===
K
start_offset===
11
end_offset===
12
Python OUTPUT===
double K = (G * x3 * x3 * x3 * x3) / (8 * x1 * x2 * x2 * x2);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"P\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double P = 6000;
red_line===
P
start_offset===
17
end_offset===
18
Python OUTPUT===
private double P = 6000;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double J = 2 * Math.sqrt(2) * x1 * x2 * tmpVar;
red_line===
J
start_offset===
11
end_offset===
12
Python OUTPUT===
double J = 2 * Math.sqrt(2) * x1 * x2 * tmpVar;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Vfd = 16.45 - 0.489 * x3 * x7 - 0.843 * x5 * x6;
red_line===
Vfd
start_offset===
11
end_offset===
14
Python OUTPUT===
double Vfd = 16.45 - 0.489 * x3 * x7 - 0.843 * x5 * x6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Vmbp = 10.58 - 0.674 * x1 * x2 - 0.67275 * x2;
red_line===
Vmbp
start_offset===
11
end_offset===
15
Python OUTPUT===
double Vmbp = 10.58 - 0.674 * x1 * x2 - 0.67275 * x2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Vfd = 16.45 - 0.489 * x3 * x7 - 0.843 * x5 * x6;
red_line===
Vfd
start_offset===
11
end_offset===
14
Python OUTPUT===
double Vfd = 16.45 - 0.489 * x3 * x7 - 0.843 * x5 * x6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"h\".
scn.ruleId===
1488
scn.suspCodeStr===
double h = 1.0 - Math.pow((f / g), HT);
red_line===
1.0 - Math.pow((f / g), HT)
start_offset===
15
end_offset===
42
Python OUTPUT===
double h = 1.0 - Math.pow((f / g), HT);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double HT = 0.2 + 4.8 * Math.pow(time, 2.0);
red_line===
HT
start_offset===
11
end_offset===
13
Python OUTPUT===
double HT = 0.2 + 4.8 * Math.pow(time, 2.0);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"theta\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r = 0.1, theta = -0.25 * Math.PI;
red_line===
theta
start_offset===
20
end_offset===
25
Python OUTPUT===
double r = 0.1, theta = -0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func2_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func2_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"problem\" which hides the field declared at line 28.
scn.ruleId===
1117
scn.suspCodeStr===
DoubleProblem problem = new MockProblem();
red_line===
problem
start_offset===
18
end_offset===
25
Python OUTPUT===
DoubleProblem problem = new MockProblem();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
sum /= (double) ig;
red_line===
double
start_offset===
16
end_offset===
22
Python OUTPUT===
 sum  / = (double)
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use isEmpty() to check whether the collection is empty or not.
scn.ruleId===
1155
scn.suspCodeStr===
return initialTasks.size() > 0;
red_line===
initialTasks.size() > 0
start_offset===
11
end_offset===
34
Python OUTPUT===
return initialTasks.size() > 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>(violationComparator);
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( violationComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(0) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
14
end_offset===
30
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Don\u0027t try to be smarter than the JVM, remove this call to run the garbage collector.
scn.ruleId===
1215
scn.suspCodeStr===
System.gc();
red_line===
gc
start_offset===
10
end_offset===
12
Python OUTPUT===
System.gc();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make childPublic a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean childPublic = false;
red_line===
childPublic
start_offset===
17
end_offset===
28
Python OUTPUT===
public static final boolean childPublic = false ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Entity 2\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(set.add(new SimpleDescribedEntity("Entity 2")));
red_line===
"Entity 2"
start_offset===
47
end_offset===
57
Python OUTPUT===
assertTrue(set.add(new SimpleDescribedEntity("Entity 2")));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Entity 3\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(set.add(new SimpleDescribedEntity("Entity 3")));
red_line===
"Entity 3"
start_offset===
47
end_offset===
57
Python OUTPUT===
assertTrue(set.add(new SimpleDescribedEntity("Entity 3")));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Entity 4\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(set.add(new SimpleDescribedEntity("Entity 4")));
red_line===
"Entity 4"
start_offset===
47
end_offset===
57
Python OUTPUT===
assertTrue(set.add(new SimpleDescribedEntity("Entity 4")));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> audits.add(a));
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===
 auditor.addListener(( a) -> audits.add( ));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"crossoverRandomGenerator\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(crossover, "crossoverRandomGenerator", crossoverRandomGenerator);
red_line===
"crossoverRandomGenerator"
start_offset===
44
end_offset===
70
Python OUTPUT===
ReflectionTestUtils.setField(crossover, "crossoverRandomGenerator", crossoverRandomGenerator);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"The population has less than 3 solutions: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertThat(cause.getMessage(), containsString("The population has less than 3 solutions: " + 1));
red_line===
"The population has less than 3 solutions: "
start_offset===
50
end_offset===
94
Python OUTPUT===
assertThat(cause.getMessage(), containsString("The population has less than 3 solutions: " + 1));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final double EPSILON = 0.00000001 ;
red_line===
EPSILON
start_offset===
23
end_offset===
30
Python OUTPUT===
private static final double EPSILON = 0.00000001 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"finalize\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
super.finalize();
red_line===
finalize
start_offset===
8
end_offset===
16
Python OUTPUT===
 super.f); 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
A \"List\u003cS\u003e\" cannot contain a \"S\".
scn.ruleId===
2175
scn.suspCodeStr===
temporal.remove(solution);
red_line===
remove
start_offset===
15
end_offset===
21
Python OUTPUT===
temporal.remove(solution);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"r2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r1, r2, c1, c2;
red_line===
r2
start_offset===
15
end_offset===
17
Python OUTPUT===
double r1, r2, c1, c2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"replacement\" to prevent any misunderstanding/clash with method \"replacement\".
scn.ruleId===
1845
scn.suspCodeStr===
protected Replacement<S> replacement;
red_line===
replacement
start_offset===
27
end_offset===
38
Python OUTPUT===
protected Replacement<S> replacement;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make keyHit a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean keyHit ;
red_line===
keyHit
start_offset===
17
end_offset===
23
Python OUTPUT===
public static final boolean keyHit ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Press any key and hit return") ;
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Press any key and hit return") ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
RankingAndCrowdingSelection<Solution<?>> selection = new RankingAndCrowdingSelection<Solution<?>>(4) ;
red_line===
<Solution<?>>
start_offset===
88
end_offset===
101
Python OUTPUT===
<> = new RankingAndCrowdingSelection < Solution < ? >> ( 4 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
RankingAndCrowdingSelection<Solution<?>> selection = new RankingAndCrowdingSelection<Solution<?>>(solutionsToSelect) ;
red_line===
<Solution<?>>
start_offset===
88
end_offset===
101
Python OUTPUT===
<> = new RankingAndCrowdingSelection < Solution < ? >> ( solutionsToSelect ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
return (dExtrems + mean) / (dExtrems + (numberOfPoints*dmean));
red_line===
(dExtrems + (numberOfPoints*dmean))
start_offset===
33
end_offset===
68
Python OUTPUT===
final return ( dExtrems + mean ) ( dExtrems + ( numberOfPoints * dmean ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"selection\" to prevent any misunderstanding/clash with method \"selection\".
scn.ruleId===
1845
scn.suspCodeStr===
protected MatingPoolSelection<S> selection;
red_line===
selection
start_offset===
35
end_offset===
44
Python OUTPUT===
protected MatingPoolSelection<S> selection;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"result\".
scn.ruleId===
1488
scn.suspCodeStr===
int result = flagComparison(solution1, solution2);
red_line===
flagComparison(solution1, solution2)
start_offset===
17
end_offset===
53
Python OUTPUT===
int result = flagComparison(solution1, solution2);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case -1:
red_line===
case -1:
start_offset===
10
end_offset===
18
Python OUTPUT===
case -1:
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
mean = mean / (double) (numberOfPoints - 1);
red_line===
double
start_offset===
19
end_offset===
25
Python OUTPUT===
 mean = mean  /  (dounumberOfPoints - 1); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"subf3\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double subf1 = 1, subf3 = 1 + g;
red_line===
subf3
start_offset===
22
end_offset===
27
Python OUTPUT===
double subf1 = 1, subf3 = 1 + g;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2;
red_line===
count2
start_offset===
15
end_offset===
21
Python OUTPUT===
int count1, count2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, prod1, prod2, yj, pj;
red_line===
sum2
start_offset===
15
end_offset===
19
Python OUTPUT===
double sum1, sum2, prod1, prod2, yj, pj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, sum3, yj;
red_line===
sum2
start_offset===
15
end_offset===
19
Python OUTPUT===
double sum1, sum2, sum3, yj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] b_array = new double[] {4.0, 8.0};
red_line===
b_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] b_array = new double[] {4.0, 8.0};
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Vij_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Vij_ = 4;
red_line===
Vij_
start_offset===
6
end_offset===
10
Python OUTPUT===
int Vij_ = 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Kji\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Kji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Kji
start_offset===
13
end_offset===
16
Python OUTPUT===
double[][] Kji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Lij = Element_[e][L_];
red_line===
Lij
start_offset===
11
end_offset===
14
Python OUTPUT===
double Lij = Element_[e][L_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"egi\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] egi = new double[numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_]
start_offset===
19
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ex.getCause());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(ex.getCause()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double E = Groups_[idx][E_];
red_line===
E
start_offset===
11
end_offset===
12
Python OUTPUT===
double E = Groups_[idx][E_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"NodeRestrict_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] NodeRestrict_;
red_line===
NodeRestrict_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] NodeRestrict_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"rj\".
scn.ruleId===
1854
scn.suspCodeStr===
double[][] rj = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_][numberOfLibertyDegree_]
start_offset===
20
end_offset===
80
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfConstraints_ = 0;
red_line===
numberOfConstraints_
start_offset===
8
end_offset===
28
Python OUTPUT===
int numberOfConstraints_ = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MAX_COLUMN\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int MAX_COLUMN = 45;
red_line===
MAX_COLUMN
start_offset===
6
end_offset===
16
Python OUTPUT===
int MAX_COLUMN = 45;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfElements_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfElements_;
red_line===
numberOfElements_
start_offset===
16
end_offset===
33
Python OUTPUT===
protected int numberOfElements_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[][][] Strain = new double[3][numberOfElements_][numberOfWeigthHypothesis_];
red_line===
Strain
start_offset===
17
end_offset===
23
Python OUTPUT===
double[][][] Strain = new double[3][numberOfElements_][numberOfWeigthHypothesis_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainMxyMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainMxyMin_;
red_line===
StrainMxyMin_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] StrainMxyMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Ej_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int Ej_ = 6;
red_line===
Ej_
start_offset===
6
end_offset===
9
Python OUTPUT===
int Ej_ = 6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Sphere Function";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Sphere Function " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make C a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double C;
red_line===
C
start_offset===
16
end_offset===
17
Python OUTPUT===
public static final double C ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DESCRIPTION\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int DESCRIPTION = 45;
red_line===
DESCRIPTION
start_offset===
6
end_offset===
17
Python OUTPUT===
int DESCRIPTION = 45;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func4_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func4_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public DecimalFormat percentageFormatter = new DecimalFormat("0.0000000000");
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final DecimalFormat percentageFormatter = new DecimalFormat ( " 0.0000000000 " ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Error in Benchmark.java\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
JMetalLogger.logger.log(Level.SEVERE, "Error in Benchmark.java", e);
red_line===
"Error in Benchmark.java"
start_offset===
44
end_offset===
69
Python OUTPUT===
JMetalLogger.logger.log(Level.SEVERE, "Error in Benchmark.java", e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
ReflectionTestUtils.setField(problem, "lowerLimit", Arrays.asList(new Integer[]{1}));
red_line===
new Integer[]{1}
start_offset===
70
end_offset===
86
Python OUTPUT===
 ReflectionTestUtils.setField(problem, "lowerLimit", Arrays.asList(new 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"sum\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
result[indexOfWeight][indexOfComponent] = (1.0 / weights[indexOfWeight][indexOfComponent]) / sum;
red_line===
sum
start_offset===
98
end_offset===
101
Python OUTPUT===
final result [ indexOfWeight ] [ indexOfComponent ] = ( 1.0 weights [ indexOfWeight ] [ indexOfComponent ] ) sum ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"BufferedReader\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
BufferedReader buffer = new BufferedReader(isr);
red_line===
new BufferedReader(isr)
start_offset===
26
end_offset===
49
Python OUTPUT===
BufferedReader buffer = new BufferedReader(isr);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
List<Double> new_vector = new ArrayList<>(number_of_objectives);
red_line===
new_vector
start_offset===
17
end_offset===
27
Python OUTPUT===
List<Double> new_vector = new ArrayList<>(number_of_objectives);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<double[]> listOfWeights = new Vector<>();
red_line===
Vector<double[]>
start_offset===
2
end_offset===
18
Python OUTPUT===
ArrayList < double [ ] > listOfWeights = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<Solution<?>> selection = new NaryRandomSelection<Solution<?>>() ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new NaryRandomSelection < Solution < ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<Solution<?>> selection = new NaryRandomSelection<Solution<?>>() ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new NaryRandomSelection < Solution < ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<Solution<?>> selection = new NaryRandomSelection<Solution<?>>(solutionsToBeReturned) ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new NaryRandomSelection < Solution < ? >> ( solutionsToBeReturned ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"currentNeighbors\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private List<DoubleSolution> currentNeighbors;
red_line===
currentNeighbors
start_offset===
31
end_offset===
47
Python OUTPUT===
 private List<DoubleSolution> c 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"population\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private List<DoubleSolution> population ;
red_line===
population
start_offset===
31
end_offset===
41
Python OUTPUT===
 private List<DoubleSolution> p; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"population\" which hides the field declared at line 30.
scn.ruleId===
1117
scn.suspCodeStr===
List<DoubleSolution> population = new ArrayList<>(populationSize);
red_line===
population
start_offset===
25
end_offset===
35
Python OUTPUT===
List<DoubleSolution> population = new ArrayList<>(populationSize);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<Solution<?>> selection = new NaryRandomSelection<Solution<?>>(2) ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new NaryRandomSelection < Solution < ? >> ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<BinarySolution> selection = new NaryRandomSelection<BinarySolution>(solutionsToBeReturned) ;
red_line===
<BinarySolution>
start_offset===
75
end_offset===
91
Python OUTPUT===
<> selection = new NaryRandomSelection < BinarySolution > ( solutionsToBeReturned ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<DoubleSolution> selection = new NaryRandomSelection<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
75
end_offset===
91
Python OUTPUT===
<> selection = new NaryRandomSelection < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"problem\".
scn.ruleId===
1854
scn.suspCodeStr===
problem = ProblemUtils.<DoubleSolution>loadProblem(problemName);
red_line===
= ProblemUtils.<DoubleSolution>loadProblem(problemName)
start_offset===
12
end_offset===
67
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ranking = new DominanceRanking<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
34
end_offset===
50
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SelectionOperator<List<BinarySolution>, BinarySolution> selectionOperator = new BinaryTournamentSelection<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
107
end_offset===
123
Python OUTPUT===
<> BinarySolution > , BinarySolution > selectionOperator = new BinaryTournamentSelection < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"flag2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int flag1, flag2, flag3;
red_line===
flag2
start_offset===
15
end_offset===
20
Python OUTPUT===
int flag1, flag2, flag3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"offSpringSolutionSet\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
List<S> solutionSet, offSpringSolutionSet;
red_line===
offSpringSolutionSet
start_offset===
25
end_offset===
45
Python OUTPUT===
List<S> solutionSet, offSpringSolutionSet;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
boolean flag_dep;
red_line===
flag_dep
start_offset===
12
end_offset===
20
Python OUTPUT===
boolean flag_dep;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
protected double deltaMin[];
red_line===
[]
start_offset===
27
end_offset===
29
Python OUTPUT===
protected double deltaMin[];
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
protected double deltaMax[];
red_line===
[]
start_offset===
27
end_offset===
29
Python OUTPUT===
protected double deltaMax[];
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"numberOfViolatedConstraintsBySolution2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int numberOfViolatedConstraintsBySolution1, numberOfViolatedConstraintsBySolution2;
red_line===
numberOfViolatedConstraintsBySolution2
start_offset===
52
end_offset===
90
Python OUTPUT===
int numberOfViolatedConstraintsBySolution1, numberOfViolatedConstraintsBySolution2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"r2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r1, r2;
red_line===
r2
start_offset===
15
end_offset===
17
Python OUTPUT===
double r1, r2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double G;
red_line===
G
start_offset===
17
end_offset===
18
Python OUTPUT===
double G;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neighborhood = new AdaptiveRandomNeighborhood<DoubleSolution>(swarmSize, this.numberOfParticlesToInform);
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( swarmSize , this.numberOfParticlesToInform ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
latexTabularAlignment += " | " ;
red_line===
latexTabularAlignment
start_offset===
6
end_offset===
27
Python OUTPUT===
latexTabularAlignment += " | " ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String rFileName = rDirectoryName + "/" + indicator.getName() + ".Wilcoxon" + ".R";
red_line===
"/"
start_offset===
42
end_offset===
45
Python OUTPUT===
 String rFileName = rDirectoryName + " / " +dicator.getName() + ".Wilcoxon" + ".R"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String rFileName = rDirectoryName + "/" + indicator.getName() + ".Boxplot" + ".R";
red_line===
"/"
start_offset===
41
end_offset===
44
Python OUTPUT===
 String rFileName = rDirectoryName + " / " ndicator.getName() + ".Boxplot" + ".R"; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Vector<Integer> pendingToVisit= new Vector<Integer>();
red_line===
<Integer>
start_offset===
48
end_offset===
57
Python OUTPUT===
<> pendingToVisit = new Vector < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<BinarySolution>() ;
red_line===
<BinarySolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(20) ;
red_line===
<DoubleSolution>
start_offset===
72
end_offset===
88
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 20 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Warning: current problem name: " + problemName) ;
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Warning: current problem name: " + problemName) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
C9<IntegerSolution> neighborhood = new C9<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new C9 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<Solution<?>> neighborhood = new TwoDimensionalMesh<Solution<?>>(3, 3, new int[][]{north, south, east, west}) ;
red_line===
<Solution<?>>
start_offset===
73
end_offset===
86
Python OUTPUT===
<> = new TwoDimensionalMesh < Solution < ? >> ( 3 , 3 , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(1, 1, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( 1 , 1 , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(10 * period);
red_line===
*
start_offset===
18
end_offset===
19
Python OUTPUT===
 Thread.sleep(10 * period);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(10 * period);
red_line===
*
start_offset===
18
end_offset===
19
Python OUTPUT===
 Thread.sleep(10 * period);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"pointDimensions\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals(0, ReflectionTestUtils.getField(front, "pointDimensions"));
red_line===
"pointDimensions"
start_offset===
56
end_offset===
73
Python OUTPUT===
assertEquals(0, ReflectionTestUtils.getField(front, "pointDimensions"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"The front is null\" 7 times.
scn.ruleId===
1192
scn.suspCodeStr===
exception.expectMessage(containsString("The front is null"));
red_line===
"The front is null"
start_offset===
43
end_offset===
62
Python OUTPUT===
exception.expectMessage(containsString("The front is null"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"EPSILON\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double EPSILON = 0.00000000000001;
red_line===
EPSILON
start_offset===
17
end_offset===
24
Python OUTPUT===
private double EPSILON = 0.00000000000001;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<Solution<?>> selection = new NaryRandomSelection<Solution<?>>(4) ;
red_line===
<Solution<?>>
start_offset===
72
end_offset===
85
Python OUTPUT===
<> = new NaryRandomSelection < Solution < ? >> ( 4 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"randomGenerator\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(mutation, "randomGenerator", randomGenerator);
red_line===
"randomGenerator"
start_offset===
43
end_offset===
60
Python OUTPUT===
ReflectionTestUtils.setField(mutation, "randomGenerator", randomGenerator);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<IntegerSolution> offspring = new ArrayList<IntegerSolution>(2);
red_line===
<IntegerSolution>
start_offset===
51
end_offset===
68
Python OUTPUT===
<> offspring = new ArrayList < IntegerSolution > ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"c2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double c1, c2;
red_line===
c2
start_offset===
15
end_offset===
17
Python OUTPUT===
double c1, c2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> audits.add(a));
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===
 auditor.addListener(( a) -> audits.add( ));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"beta\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double alpha, beta, betaq;
red_line===
beta
start_offset===
18
end_offset===
22
Python OUTPUT===
double alpha, beta, betaq;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
int[] hypercubes = new int[(int)Math.pow(2.0, bisections * objectives)] ;
red_line===
*
start_offset===
61
end_offset===
62
Python OUTPUT===
 int[] hypercubes = new int[( int)Math.pow(2.0, bisections * objectives)] ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<S> ranking = new DominanceRanking<S>(dominanceComparator);
red_line===
<S>
start_offset===
45
end_offset===
48
Python OUTPUT===
<> ranking = new DominanceRanking < S > ( dominanceComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(solutionsToSelect, new DominanceComparator<S>()) ;
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> new DominanceComparator < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
chart = new ChartForDynamicProblemsContainer<S>(legend, delay) ;
red_line===
<S>
start_offset===
48
end_offset===
51
Python OUTPUT===
<> < S > ( legend , delay ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"evaluations\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Integer evaluations ;
red_line===
evaluations
start_offset===
18
end_offset===
29
Python OUTPUT===
 private Integer e; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(outputDirectory+ " exists and it is a directory");
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException(outputDirectory+ " exists and it is a directory");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.archive = new NonDominatedSolutionListArchive<S>();
red_line===
<S>
start_offset===
54
end_offset===
57
Python OUTPUT===
<> new NonDominatedSolutionListArchive < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"incBsLstWord\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private int incBsFstWord, incBsLstWord;
red_line===
incBsLstWord
start_offset===
27
end_offset===
39
Python OUTPUT===
private int incBsFstWord, incBsLstWord;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
double temp[] = null;
red_line===
[]
start_offset===
15
end_offset===
17
Python OUTPUT===
double temp[] = null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"overall2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double overall1, overall2;
red_line===
overall2
start_offset===
21
end_offset===
29
Python OUTPUT===
double overall1, overall2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
return aux / (double) solutionSet.size();
red_line===
double
start_offset===
18
end_offset===
24
Python OUTPUT===
 return aux  /  (douolutionSet.size(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
TwoDimensionalMesh<IntegerSolution> neighborhood = new TwoDimensionalMesh<IntegerSolution>(rows, columns, new int[][]{north, south, east, west}) ;
red_line===
<IntegerSolution>
start_offset===
77
end_offset===
94
Python OUTPUT===
<> neighborhood = new TwoDimensionalMesh < IntegerSolution > ( rows , columns , new int [ ] [ ] { north , south , east , west } ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(10 * period);
red_line===
*
start_offset===
18
end_offset===
19
Python OUTPUT===
 Thread.sleep(10 * period);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this lambda with method reference \u0027random::nextDouble\u0027. (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1612
scn.suspCodeStr===
BoundedRandomGenerator<Double> generator = BoundedRandomGenerator.bound(() -> random.nextDouble());
red_line===
->
start_offset===
77
end_offset===
79
Python OUTPUT===
 BoundedRandomGenerator<Double> generator = BoundedRandomGenerator.bound(() -> random.nextDouble()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.swingWrapper = new SwingWrapper<XYChart>(new ArrayList<XYChart>(this.charts.values()));
red_line===
<XYChart>
start_offset===
40
end_offset===
49
Python OUTPUT===
<> new SwingWrapper < XYChart > ( new ArrayList < XYChart > ( this.charts.values ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.iterations = new HashMap<String, List<Integer>>();
red_line===
<String, List<Integer>>
start_offset===
33
end_offset===
56
Python OUTPUT===
<> < Integer >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
createNewSolutionsStrategy.create(solutionList, problem, numberOfRemovedSolutions);
red_line===
;
start_offset===
88
end_offset===
89
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
NaryRandomSelection<IntegerSolution> selection = new NaryRandomSelection<IntegerSolution>(1) ;
red_line===
<IntegerSolution>
start_offset===
76
end_offset===
93
Python OUTPUT===
<> selection = new NaryRandomSelection < IntegerSolution > ( 1 ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
hypercubes = new int[(int) Math.pow(2.0, this.bisections * numberOfObjectives)];
red_line===
*
start_offset===
61
end_offset===
62
Python OUTPUT===
 hypercubes = new int[( int) Math.pow(2.0, this.bisections * numberOfObjectives)];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
accumulatedSum += 1.0 / (double) hypercubes[hypercube];
red_line===
double
start_offset===
33
end_offset===
39
Python OUTPUT===
 accumulatedSum += 1.0  /  (double)cubes[hypercube]; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use the built-in formatting to construct this argument.
scn.ruleId===
2629
scn.suspCodeStr===
logger.info("Loggers configured with " + propertyFile);
red_line===
"Loggers configured with " + propertyFile
start_offset===
14
end_offset===
55
Python OUTPUT===
logger.info("Loggers configured with " + propertyFile);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"y2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double y1, y2, lowerBound, upperBound;
red_line===
y2
start_offset===
15
end_offset===
17
Python OUTPUT===
double y1, y2, lowerBound, upperBound;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"createInitialPopulation\" to prevent any misunderstanding/clash with method \"createInitialPopulation\".
scn.ruleId===
1845
scn.suspCodeStr===
protected SolutionsCreation<S> createInitialPopulation;
red_line===
createInitialPopulation
start_offset===
33
end_offset===
56
Python OUTPUT===
protected SolutionsCreation<S> createInitialPopulation;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
return sum / (double) lambda.length;
red_line===
double
start_offset===
18
end_offset===
24
Python OUTPUT===
 return sum  /  (douambda.length; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
AutoNSGAII NSGAII = new AutoNSGAII();
red_line===
NSGAII
start_offset===
15
end_offset===
21
Python OUTPUT===
AutoNSGAII NSGAII = new AutoNSGAII();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"offspringPopulationSizeParameter\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private IntegerParameter offspringPopulationSizeParameter;
red_line===
offspringPopulationSizeParameter
start_offset===
27
end_offset===
59
Python OUTPUT===
 private IntegerParameter o 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make autoConfigurableParameterList a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<Parameter<?>> autoConfigurableParameterList = new ArrayList<>();
red_line===
autoConfigurableParameterList
start_offset===
28
end_offset===
57
Python OUTPUT===
public static final List < Parameter < ? >> autoConfigurableParameterList = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> leadersArchive = new CrowdingDistanceArchive<DoubleSolution>(swarmSize) ;
red_line===
<DoubleSolution>
start_offset===
79
end_offset===
95
Python OUTPUT===
<> leadersArchive = new CrowdingDistanceArchive < DoubleSolution > ( swarmSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selectionOperator = new NaryRandomSelection<S>(selectCurrentSolution ? matingPoolSize - 1 : matingPoolSize);
red_line===
<S>
start_offset===
47
end_offset===
50
Python OUTPUT===
<> < S > ( selectCurrentSolution ? matingPoolSize - 1 : matingPoolSize ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"sub2\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
t4[numberOfObjectives_ - 1] = sub1 / sub2;
red_line===
sub2
start_offset===
41
end_offset===
45
Python OUTPUT===
final t4 [ numberOfObjectives_ - 1 ] = sub1 sub2 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfVariables_ = solution.getNumberOfVariables();
red_line===
numberOfVariables_
start_offset===
8
end_offset===
26
Python OUTPUT===
int numberOfVariables_ = solution.getNumberOfVariables();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ub\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int lb = 0, ub = 0;
red_line===
ub
start_offset===
16
end_offset===
18
Python OUTPUT===
int lb = 0, ub = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"subf3\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double subf1 = 1, subf3 = 1 + g;
red_line===
subf3
start_offset===
22
end_offset===
27
Python OUTPUT===
double subf1 = 1, subf3 = 1 + g;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
c5[i] = Math.pow(2, i + 1);
red_line===
+
start_offset===
28
end_offset===
29
Python OUTPUT===
 c5[i] = Math.pow(2,i + 1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make nk14 a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int nk14;
red_line===
nk14
start_offset===
13
end_offset===
17
Python OUTPUT===
public static final int nk14 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int LAST_WORD_RANGE = 1;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
private static final int LAST_WORD_RANGE = 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int N_BIT_ADDR = 6;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
private static final int N_BIT_ADDR = 6 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"h\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int p = 0, h = 0;
red_line===
h
start_offset===
15
end_offset===
16
Python OUTPUT===
int p = 0, h = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfVariables_ = solution.getNumberOfVariables();
red_line===
numberOfVariables_
start_offset===
8
end_offset===
26
Python OUTPUT===
int numberOfVariables_ = solution.getNumberOfVariables();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double M = P * (L + (x2 / 2));
red_line===
M
start_offset===
11
end_offset===
12
Python OUTPUT===
double M = P * (L + (x2 / 2));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(1, Math.cos(0.5*Math.PI*x[0])*Math.sin(0.5*Math.PI*x[1]) + 2.0*sum2 / (double)count2);
red_line===
double
start_offset===
97
end_offset===
103
Python OUTPUT===
 solution.setObjective(1, Math.cos(0.5*Math.PI*x[0])*Math.sin(0.5*Math.PI*x[1]) + 2.0*sum2  /  (douunt2); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
archive = new NonDominatedSolutionListArchive<IntegerSolution>(comparator) ;
red_line===
<IntegerSolution>
start_offset===
49
end_offset===
66
Python OUTPUT===
<> < IntegerSolution > ( comparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int WORD_SIZE = 1 << N_BIT_ADDR;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
private static final int WORD_SIZE = 1 << N_BIT_ADDR ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<S>();
red_line===
<S>
start_offset===
49
end_offset===
52
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, yj, hj, pj ;
red_line===
sum2
start_offset===
17
end_offset===
21
Python OUTPUT===
double sum1, sum2, yj, hj, pj ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, yj, hj ;
red_line===
sum2
start_offset===
15
end_offset===
19
Python OUTPUT===
double sum1, sum2, yj, hj ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, yj;
red_line===
sum2
start_offset===
17
end_offset===
21
Python OUTPUT===
double sum1, sum2, yj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"expectedArray\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] expectedArray = {0.0, 0.0, 0.0, 0.0, 0.0} ;
red_line===
= {0.0, 0.0, 0.0, 0.0, 0.0}
start_offset===
27
end_offset===
54
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"pointDimensions\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] pointDimensions = (double[])ReflectionTestUtils.getField(point, "point");
red_line===
= (double[])ReflectionTestUtils.getField(point, "point")
start_offset===
29
end_offset===
85
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"EPSILON\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static double EPSILON = 0.0000001 ;
red_line===
EPSILON
start_offset===
24
end_offset===
31
Python OUTPUT===
private static double EPSILON = 0.0000001 ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertFalse(solution.equals(new String("")));
red_line===
String
start_offset===
36
end_offset===
42
Python OUTPUT===
 assertFalse(solution.equals(new Str))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
assertArrayEquals(expectedArray, pointDimensions, EPSILON);
red_line===
;
start_offset===
64
end_offset===
65
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>(violationComparator);
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( violationComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>(violationComparator);
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( violationComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>(violationComparator);
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( violationComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, PullMeasure<?>> measures = new HashMap<String, PullMeasure<?>>();
red_line===
<String, PullMeasure<?>>
start_offset===
52
end_offset===
76
Python OUTPUT===
<> new HashMap < String , PullMeasure < ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int limitInfII = 1;
red_line===
limitInfII
start_offset===
20
end_offset===
30
Python OUTPUT===
private static final int limitInfII = 1 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"push\".
scn.ruleId===
1854
scn.suspCodeStr===
push = null;
red_line===
= null
start_offset===
10
end_offset===
16
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This block of commented-out lines of code should be removed.
scn.ruleId===
125
scn.suspCodeStr===
f[1] = g * h;
red_line===
1-Math.sqrt(f[0]);
start_offset===
21
end_offset===
39
Python OUTPUT===
f[1] = g * h;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"pull\".
scn.ruleId===
1854
scn.suspCodeStr===
pull = null;
red_line===
= null
start_offset===
10
end_offset===
16
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> y = new ArrayList<Double>(getNumberOfObjectives());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> y = new ArrayList < Double > ( getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int M = x.length;
red_line===
M
start_offset===
8
end_offset===
9
Python OUTPUT===
int M = x.length;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"v\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
float result, v, exp;
red_line===
v
start_offset===
18
end_offset===
19
Python OUTPUT===
float result, v, exp;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"float\".
scn.ruleId===
1905
scn.suspCodeStr===
float tmp1 = Math.min((float) 0, (float) Math.floor(y - B)) * A * (B - y) / B;
red_line===
float
start_offset===
27
end_offset===
32
Python OUTPUT===
 float tmp1 = Math.min(( float) 0,( ) Math.floor(y - B)) * A *( B -y)  /  B;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] a_array = new double[] {2.0, 2.0};
red_line===
a_array
start_offset===
13
end_offset===
20
Python OUTPUT===
double[] a_array = new double[] {2.0, 2.0};
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Mutation operator does not exist: " + getName());
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException("Mutation operator does not exist: " + getName());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"theta\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double N = 4.0, theta = 0.25 * Math.PI;
red_line===
theta
start_offset===
20
end_offset===
25
Python OUTPUT===
double N = 4.0, theta = 0.25 * Math.PI;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yOffset\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double xOffset = 1.1, yOffset = 1.2, a = 2, b = 4.0, r = 0.1;
red_line===
yOffset
start_offset===
26
end_offset===
33
Python OUTPUT===
double xOffset = 1.1, yOffset = 1.2, a = 2, b = 4.0, r = 0.1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static final Double[] UPPERLIMIT = {0.45, 0.10, 0.10};
red_line===
UPPERLIMIT
start_offset===
31
end_offset===
41
Python OUTPUT===
protected static final Double [ ] UPPERLIMIT = { 0.45 , 0.10 , 0.10 } ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static final Double[] LOWERLIMIT = {0.01, 0.01, 0.01};
red_line===
LOWERLIMIT
start_offset===
31
end_offset===
41
Python OUTPUT===
protected static final Double [ ] LOWERLIMIT = { 0.01 , 0.01 , 0.01 } ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Total computing time: " + nsgaII.getTotalComputingTime()) ;
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Total computing time: " + nsgaII.getTotalComputingTime()) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
mutation = new PermutationSwapMutation<Integer>(mutationProbability);
red_line===
<Integer>
start_offset===
42
end_offset===
51
Python OUTPUT===
<> < Integer > ( mutationProbability ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> leadersArchive = new CrowdingDistanceArchive<DoubleSolution>(swarmSize) ;
red_line===
<DoubleSolution>
start_offset===
79
end_offset===
95
Python OUTPUT===
<> leadersArchive = new CrowdingDistanceArchive < DoubleSolution > ( swarmSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"temp2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double temp1, temp2;
red_line===
temp2
start_offset===
18
end_offset===
23
Python OUTPUT===
double temp1, temp2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4, x5, x6, x7;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4, x5, x6, x7;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
sum2 += StrictMath.pow(x[i] + (1.0 / StrictMath.sqrt((double) numberOfVariables)), 2.0);
red_line===
double
start_offset===
60
end_offset===
66
Python OUTPUT===
 sum2 += StrictMath.pow(x[i] + (1.0  /  StrictMath.sqrt((doublberOfVariables)), 2.0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"j\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int i, j;
red_line===
j
start_offset===
11
end_offset===
12
Python OUTPUT===
int i, j;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"value\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double minValue, value;
red_line===
value
start_offset===
21
end_offset===
26
Python OUTPUT===
double minValue, value;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"distance\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double volume, distance;
red_line===
distance
start_offset===
19
end_offset===
27
Python OUTPUT===
double volume, distance;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of Groups: " + numberOfGroupElements_);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of Groups: " + numberOfGroupElements_); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Straini_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][][] Straini_;
red_line===
Straini_
start_offset===
25
end_offset===
33
Python OUTPUT===
protected double[][][] Straini_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double S = Groups_[idx][AREA];
red_line===
S
start_offset===
11
end_offset===
12
Python OUTPUT===
double S = Groups_[idx][AREA];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainNxxMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainNxxMax_;
red_line===
StrainNxxMax_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] StrainNxxMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"subf3\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double subf1 = 1, subf3 = 1 + g;
red_line===
subf3
start_offset===
22
end_offset===
27
Python OUTPUT===
double subf1 = 1, subf3 = 1 + g;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfConstraintsNodes_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfConstraintsNodes_;
red_line===
numberOfConstraintsNodes_
start_offset===
16
end_offset===
41
Python OUTPUT===
protected int numberOfConstraintsNodes_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MxzMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] MxzMin_;
red_line===
MxzMin_
start_offset===
23
end_offset===
30
Python OUTPUT===
protected double[][] MxzMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Iiz = zi * Math.pow(yi, 3.0) / 12.0;
red_line===
Iiz
start_offset===
11
end_offset===
14
Python OUTPUT===
double Iiz = zi * Math.pow(yi, 3.0) / 12.0;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
solution.setObjective(0, x[0] + 2.0 * sum1 / (double) count1);
red_line===
(double) count1
start_offset===
49
end_offset===
64
Python OUTPUT===
final solution . setObjective ( 0 , x [ 0 ] + 2.0 * sum1 ( double ) count1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double G = 11.5 * 1e+6;
red_line===
G
start_offset===
11
end_offset===
12
Python OUTPUT===
double G = 11.5 * 1e+6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, yj;
red_line===
sum2
start_offset===
17
end_offset===
21
Python OUTPUT===
double sum1, sum2, yj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Fp = 300.0;
red_line===
Fp
start_offset===
11
end_offset===
13
Python OUTPUT===
double Fp = 300.0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2 ;
red_line===
count2
start_offset===
15
end_offset===
21
Python OUTPUT===
int count1, count2 ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"prod2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double prod1, prod2 ;
red_line===
prod2
start_offset===
18
end_offset===
23
Python OUTPUT===
double prod1, prod2 ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
overallConstraintViolationDegree = new OverallConstraintViolation<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
69
end_offset===
85
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"KGji\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] KGji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
KGji
start_offset===
13
end_offset===
17
Python OUTPUT===
double[][] KGji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"QT_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int QT_ = 2;
red_line===
QT_
start_offset===
6
end_offset===
9
Python OUTPUT===
int QT_ = 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ae\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double zl, ae, ze, ee;
red_line===
ae
start_offset===
15
end_offset===
17
Python OUTPUT===
double zl, ae, ze, ee;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Schwefel's Problem 2.6 with Global Optimum on Bounds";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Schwefel's Problem 2.6 with Global Optimum on Bounds " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rValue = new HashMap<Integer, Double>() ;
red_line===
<Integer, Double>
start_offset===
24
end_offset===
41
Python OUTPUT===
<> Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make w a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[] w;
red_line===
w
start_offset===
18
end_offset===
19
Python OUTPUT===
public static final double [ ] w ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make numberOfBasicFunctions a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public int numberOfBasicFunctions;
red_line===
numberOfBasicFunctions
start_offset===
13
end_offset===
35
Python OUTPUT===
public static final int numberOfBasicFunctions ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"m_iSqrt\".
scn.ruleId===
3010
scn.suspCodeStr===
m_iSqrt[i] = Math.sqrt(((double) i) + 1.0);
red_line===
m_iSqrt
start_offset===
6
end_offset===
13
Python OUTPUT===
 m_iSq Math.sqrt(((double) i) + 1.0); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[][] m_data = new double[100 + 100 + 1][mDimension];
red_line===
m_data
start_offset===
15
end_offset===
21
Python OUTPUT===
double[][] m_data = new double[100 + 100 + 1][mDimension];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/schwefel_102_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /schwefel_102_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Schwefel's Problem 1.2 with Noise in Fitness";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Schwefel's Problem 1.2 with Noise in Fitness " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make linearTransformationMatrix a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[][][] linearTransformationMatrix;
red_line===
linearTransformationMatrix
start_offset===
22
end_offset===
48
Python OUTPUT===
public static final double [ ] [ ] [ ] linearTransformationMatrix ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove these useless parentheses.
scn.ruleId===
1110
scn.suspCodeStr===
temp2 = ((list2.get(i) - list2.get(0)));
red_line===
(
start_offset===
17
end_offset===
18
Python OUTPUT===
 temp2 = ((list2et(i) - list2.get(0))); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"inputStream\".
scn.ruleId===
1488
scn.suspCodeStr===
InputStream inputStream = getClass().getResourceAsStream(fileName);
red_line===
getClass().getResourceAsStream(fileName)
start_offset===
30
end_offset===
70
Python OUTPUT===
InputStream inputStream = getClass().getResourceAsStream(fileName);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make z a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double[][] z;
red_line===
z
start_offset===
20
end_offset===
21
Python OUTPUT===
public static final double [ ] [ ] z ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
List<Double> var = history.variance(mean);
red_line===
var
start_offset===
17
end_offset===
20
Python OUTPUT===
List<Double> var = history.variance(mean);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
protected final Double epsilon = 1.0e-3;
red_line===
epsilon
start_offset===
25
end_offset===
32
Python OUTPUT===
protected static final Double epsilon = 1.0e-3 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
archive = new HypervolumeArchive<DoubleSolution>(100, new WFGHypervolume<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
36
end_offset===
52
Python OUTPUT===
<> < DoubleSolution > ( 100 , new WFGHypervolume < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"jump\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double w, jump;
red_line===
jump
start_offset===
12
end_offset===
16
Python OUTPUT===
double w, jump;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"numberOfViolatedConstraintsBySolution2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int numberOfViolatedConstraintsBySolution1, numberOfViolatedConstraintsBySolution2;
red_line===
numberOfViolatedConstraintsBySolution2
start_offset===
46
end_offset===
84
Python OUTPUT===
int numberOfViolatedConstraintsBySolution1, numberOfViolatedConstraintsBySolution2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.numberOfViolatedConstraints = new NumberOfViolatedConstraints<S>() ;
red_line===
<S>
start_offset===
68
end_offset===
71
Python OUTPUT===
<> new NumberOfViolatedConstraints < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.overallConstraintViolation = new OverallConstraintViolation<S>();
red_line===
<S>
start_offset===
66
end_offset===
69
Python OUTPUT===
<> new OverallConstraintViolation < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int N = A.size();
red_line===
N
start_offset===
9
end_offset===
10
Python OUTPUT===
int N = A.size();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
public int  MemberSize(){ return memberSize; }
red_line===
MemberSize
start_offset===
14
end_offset===
24
Python OUTPUT===
public int  MemberSize(){ return memberSize; }
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func3_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func3_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<S> ranking = new DominanceRanking<S>(dominanceComparator);
red_line===
<S>
start_offset===
45
end_offset===
48
Python OUTPUT===
<> ranking = new DominanceRanking < S > ( dominanceComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func3_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func3_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"r2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r1, r2, c1, c2;
red_line===
r2
start_offset===
15
end_offset===
17
Python OUTPUT===
double r1, r2, c1, c2;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func2_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func2_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Impossible empty subregion!!!");
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("Impossible empty subregion!!!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.neighborhood = new C9<S>((int)Math.sqrt(this.populationSize), (int)Math.sqrt(this.populationSize)) ;
red_line===
<S>
start_offset===
30
end_offset===
33
Python OUTPUT===
<> new C9 < S > ( ( int ) Math.sqrt ( this.populationSize ) , ( int ) Math.sqrt ( this.populationSize ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func1_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func1_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"indexOfSecondSolution\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int indexOfFirstSolution, indexOfSecondSolution, indexOfWeight;
red_line===
indexOfSecondSolution
start_offset===
34
end_offset===
55
Python OUTPUT===
int indexOfFirstSolution, indexOfSecondSolution, indexOfWeight;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selectionOperator = new BinaryTournamentSelection<S>(new RankingAndCrowdingDistanceComparator<S>());
red_line===
<S>
start_offset===
53
end_offset===
56
Python OUTPUT===
<> < S > ( new RankingAndCrowdingDistanceComparator < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"numberOfRanksForUnfeasibleSolutions\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int numberOfRanksForFeasibleSolutions, numberOfRanksForUnfeasibleSolutions, rank, indexOfBestSolution;
red_line===
numberOfRanksForUnfeasibleSolutions
start_offset===
47
end_offset===
82
Python OUTPUT===
int numberOfRanksForFeasibleSolutions, numberOfRanksForUnfeasibleSolutions, rank, indexOfBestSolution;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
nonDominatedArchive = new NonDominatedSolutionListArchive<S>();
red_line===
<S>
start_offset===
61
end_offset===
64
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int order_ = 0;
red_line===
order_
start_offset===
6
end_offset===
12
Python OUTPUT===
int order_ = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"rank_\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
individual.setAttribute("rank_", rank_);
red_line===
"rank_"
start_offset===
26
end_offset===
33
Python OUTPUT===
individual.setAttribute("rank_", rank_);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new RandomSearch<S>(problem, maxEvaluations) ;
red_line===
<S>
start_offset===
27
end_offset===
30
Python OUTPUT===
<> S > ( problem , maxEvaluations ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<S> parents = new ArrayList<S>(2);
red_line===
<S>
start_offset===
33
end_offset===
36
Python OUTPUT===
<> parents = new ArrayList < S > ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<S>(0);
red_line===
<S>
start_offset===
40
end_offset===
43
Python OUTPUT===
<> < S > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
protected final StrengthRawFitness<S> strenghtRawFitness = new StrengthRawFitness<S>();
red_line===
<S>
start_offset===
83
end_offset===
86
Python OUTPUT===
<> S > strenghtRawFitness = new StrengthRawFitness < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
latexTabularAlignment += "c";
red_line===
latexTabularAlignment
start_offset===
6
end_offset===
27
Python OUTPUT===
latexTabularAlignment += "c";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
latexTabularAlignment += "c";
red_line===
latexTabularAlignment
start_offset===
6
end_offset===
27
Python OUTPUT===
latexTabularAlignment += "c";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/Elliptic_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /Elliptic_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
mutation = new PermutationSwapMutation<Integer>(mutationProbability);
red_line===
<Integer>
start_offset===
42
end_offset===
51
Python OUTPUT===
<> < Integer > ( mutationProbability ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"overallConstraintViolationSolution2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double overallConstraintViolationSolution1, overallConstraintViolationSolution2;
red_line===
overallConstraintViolationSolution2
start_offset===
52
end_offset===
87
Python OUTPUT===
double overallConstraintViolationSolution1, overallConstraintViolationSolution2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"offspringPopulationSize\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
int offspringPopulationSize = populationSize;
red_line===
offspringPopulationSize
start_offset===
8
end_offset===
31
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_zM;
red_line===
m_zM
start_offset===
19
end_offset===
23
Python OUTPUT===
private double[] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<BinarySolution>(new RankingAndCrowdingDistanceComparator<BinarySolution>());
red_line===
<BinarySolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < BinarySolution > ( new RankingAndCrowdingDistanceComparator < BinarySolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
if (fronts.get(r2Data.rank) == null) fronts.put(r2Data.rank, new LinkedList<S>());
red_line===
<S>
start_offset===
81
end_offset===
84
Python OUTPUT===
<> get ( r2Data.rank ) == null ) fronts.put ( r2Data.rank , new LinkedList < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> values = new ArrayList<Double>(solution.getNumberOfObjectives());
red_line===
<Double>
start_offset===
39
end_offset===
47
Python OUTPUT===
<> values = new ArrayList < Double > ( solution.getNumberOfObjectives ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double temp_product = temp * weightVector.get(i);
red_line===
temp_product
start_offset===
10
end_offset===
22
Python OUTPUT===
double temp_product = temp * weightVector.get(i);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("FINISH") ;
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("FINISH") ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
private final Random rand = new Random();
red_line===
rivate fin
start_offset===
4
end_offset===
14
Python OUTPUT===
 private final Random rand = new Random(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
	e.printSt
start_offset===
4
end_offset===
14
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make position a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<Double> position ;
red_line===
position
start_offset===
22
end_offset===
30
Python OUTPUT===
public static final List < Double > position ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make position a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
e.printStackTrace();
red_line===
tackTrac
start_offset===
22
end_offset===
30
Python OUTPUT===
static final e . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make position a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
exception.printStackTrace();
red_line===
tStackTr
start_offset===
22
end_offset===
30
Python OUTPUT===
static final exception . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make position a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
exception.printStackTrace();
red_line===
tStackTr
start_offset===
22
end_offset===
30
Python OUTPUT===
static final exception . printStackTrace ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make position a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
private Random random = new Random() ;
red_line===
m = new 
start_offset===
22
end_offset===
30
Python OUTPUT===
private static final Random random = new Random ( ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make position a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
protected Random random = new Random();
red_line===
dom = ne
start_offset===
22
end_offset===
30
Python OUTPUT===
protected static final Random random = new Random ( ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make position a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
double aleat = Math.random();
red_line===
ath.rand
start_offset===
22
end_offset===
30
Python OUTPUT===
static final double aleat = Math . random ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"stagnation\" to prevent any misunderstanding/clash with field \"Stagnation\".
scn.ruleId===
1845
scn.suspCodeStr===
InputVariable operatoruse, stagnation;
red_line===
stagnation
start_offset===
29
end_offset===
39
Python OUTPUT===
InputVariable operatoruse, stagnation;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
leaderArchive = new CrowdingDistanceArchive<DoubleSolution>(this.archiveSize);
red_line===
<DoubleSolution>
start_offset===
47
end_offset===
63
Python OUTPUT===
<> < DoubleSolution > ( this.archiveSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistance = new CrowdingDistance<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
43
end_offset===
59
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistanceComparator = new CrowdingDistanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
63
end_offset===
79
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
epsilonArchive = new NonDominatedSolutionListArchive<DoubleSolution>(new EpsilonDominanceComparator<DoubleSolution>(eta));
red_line===
<DoubleSolution>
start_offset===
56
end_offset===
72
Python OUTPUT===
<> < DoubleSolution > ( new EpsilonDominanceComparator < DoubleSolution > ( eta ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
parentsSelection = new RandomSelection<BinarySolution>() ;
red_line===
<BinarySolution>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(100) ;
red_line===
<DoubleSolution>
start_offset===
72
end_offset===
88
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
newGenerationSelection = new RankingAndCrowdingSelection<BinarySolution>(100) ;
red_line===
<BinarySolution>
start_offset===
60
end_offset===
76
Python OUTPUT===
<> RankingAndCrowdingSelection < BinarySolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"max\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private double[][][] max;
red_line===
max
start_offset===
23
end_offset===
26
Python OUTPUT===
 private double[][][] m 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Variables values have been written to file VAR.tsv\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
JMetalLogger.logger.info("Variables values have been written to file VAR.tsv");
red_line===
"Variables values have been written to file VAR.tsv"
start_offset===
29
end_offset===
81
Python OUTPUT===
JMetalLogger.logger.info("Variables values have been written to file VAR.tsv");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
46
end_offset===
59
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new MultiThreadedSolutionListEvaluator<DoubleSolution>(0) ;
red_line===
<DoubleSolution>
start_offset===
54
end_offset===
70
Python OUTPUT===
<> < DoubleSolution > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(100) ;
red_line===
<DoubleSolution>
start_offset===
72
end_offset===
88
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<List<List<List<Double>>>> data = new ArrayList<List<List<List<Double>>>>(experiment.getIndicatorList().size()) ;
red_line===
<List<List<List<Double>>>>
start_offset===
55
end_offset===
81
Python OUTPUT===
<> ArrayList < List < List < List < Double >> >> ( experiment.getIndicatorList ( ).size ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
newGenerationSelection = new RankingAndCrowdingSelection<BinarySolution>(100) ;
red_line===
<BinarySolution>
start_offset===
60
end_offset===
76
Python OUTPUT===
<> RankingAndCrowdingSelection < BinarySolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"min\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private double[][][] min;
red_line===
min
start_offset===
23
end_offset===
26
Python OUTPUT===
 private double[][][] m 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
data.add(indicator, new ArrayList<List<List<Double>>>()) ;
red_line===
<List<List<Double>>>
start_offset===
39
end_offset===
59
Python OUTPUT===
<> List < Double >> > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"numberOfValues\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private double[][][] numberOfValues;
red_line===
numberOfValues
start_offset===
23
end_offset===
37
Python OUTPUT===
 private double[][][] n 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"delta1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double rnd, delta1, delta2, mutPow, deltaq;
red_line===
delta1
start_offset===
16
end_offset===
22
Python OUTPUT===
double rnd, delta1, delta2, mutPow, deltaq;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"upper\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
List<Double> lower = new ArrayList<>(getNumberOfVariables()), upper = new ArrayList<>(getNumberOfVariables());
red_line===
upper
start_offset===
66
end_offset===
71
Python OUTPUT===
List<Double> lower = new ArrayList<>(getNumberOfVariables()), upper = new ArrayList<>(getNumberOfVariables());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
data.get(indicator).add(problem, new ArrayList<List<Double>>());
red_line===
<List<Double>>
start_offset===
54
end_offset===
68
Python OUTPUT===
<> add ( problem , new ArrayList < List < Double >> ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Rotated Rastrigin's Function";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Rotated Rastrigin's Function " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_zM;
red_line===
m_zM
start_offset===
19
end_offset===
23
Python OUTPUT===
private double[] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_matrix\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_matrix;
red_line===
m_matrix
start_offset===
27
end_offset===
35
Python OUTPUT===
private final double[][] m_matrix;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"subproblemNum_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int subproblemNum_;
red_line===
subproblemNum_
start_offset===
16
end_offset===
30
Python OUTPUT===
protected int subproblemNum_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"childGrid_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int childGrid_;
red_line===
childGrid_
start_offset===
16
end_offset===
26
Python OUTPUT===
protected int childGrid_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(resultFileName + ". Status: " + file.exists());
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(resultFileName + ". Status: " + file.exists()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
44
end_offset===
57
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
int replacement1[] = new int[permutationLength];
red_line===
[]
start_offset===
22
end_offset===
24
Python OUTPUT===
int replacement1[] = new int[permutationLength];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Ranking<S> ranking = new DominanceRanking<S>();
red_line===
<S>
start_offset===
45
end_offset===
48
Python OUTPUT===
<> ranking = new DominanceRanking < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
brooders = new ArrayList<S>((int) (Fbr * population.size()));
red_line===
<S>
start_offset===
27
end_offset===
30
Python OUTPUT===
<> < S > ( ( int ) ( Fbr * population.size ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public Hypervolume() {}
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"frontNormalizer\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
FrontNormalizer frontNormalizer = new FrontNormalizer(minimumValues, maximumValues);
red_line===
frontNormalizer
start_offset===
22
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"a\".
scn.ruleId===
1854
scn.suspCodeStr===
double a = sin(i) * Math.cos(j);
red_line===
= sin(i) * Math.cos(j)
start_offset===
21
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
ArrayList<Integer> J2 = new ArrayList<Integer>();
red_line===
J2
start_offset===
23
end_offset===
25
Python OUTPUT===
ArrayList<Integer> J2 = new ArrayList<Integer>();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(1, 0.5*(yj - 2*x[0] + 2.0)*x[1] + 2.0*sum2 / (double)count2);
red_line===
double
start_offset===
72
end_offset===
78
Python OUTPUT===
 solution.setObjective(1, 0.5*(yj - 2*x[0] + 2.0)*x[1] + 2.0*sum2  /  (douunt2); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Double> aa = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> aa = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Double> aa = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> aa = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Double> cc = new ArrayList<Double>();
red_line===
<Double>
start_offset===
44
end_offset===
52
Python OUTPUT===
<> cc = new ArrayList < Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"h\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double g = 0, h = 0, a, b;
red_line===
h
start_offset===
22
end_offset===
23
Python OUTPUT===
double g = 0, h = 0, a, b;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Double> x = new ArrayList<Double>(getNumberOfVariables());
red_line===
<Double>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> x = new ArrayList < Double > ( getNumberOfVariables ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"float\".
scn.ruleId===
1905
scn.suspCodeStr===
tmp = (float) Math.cos((float) A * Math.pow(x[0], beta) * Math.PI);
red_line===
float
start_offset===
28
end_offset===
33
Python OUTPUT===
 tmp = (float) Math.cos (  A * Math.pow (x[0], beta) * Math.PI);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"float\".
scn.ruleId===
1905
scn.suspCodeStr===
tmp /= (2.0 * (float) A * Math.PI);
red_line===
float
start_offset===
19
end_offset===
24
Python OUTPUT===
 tmp  / = (2.0 * (flo * Math.PI); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int M = x.length;
red_line===
M
start_offset===
8
end_offset===
9
Python OUTPUT===
int M = x.length;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int M = x.length;
red_line===
M
start_offset===
8
end_offset===
9
Python OUTPUT===
int M = x.length;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final float epsilon = (float) 1e-7;
red_line===
epsilon
start_offset===
22
end_offset===
29
Python OUTPUT===
private static final float epsilon = ( float ) 1e-7 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_zM;
red_line===
m_zM
start_offset===
19
end_offset===
23
Python OUTPUT===
private double[] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_matrix\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_matrix;
red_line===
m_matrix
start_offset===
27
end_offset===
35
Python OUTPUT===
private final double[][] m_matrix;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Rotated Griewank's Function without Bounds";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Rotated Griewank's Function without Bounds " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/griewank_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /griewank_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func3_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func3_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/schwefel_102_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /schwefel_102_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Schwefel's Problem 1.2";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Schwefel's Problem 1.2 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_matrix\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_matrix;
red_line===
m_matrix
start_offset===
27
end_offset===
35
Python OUTPUT===
private final double[][] m_matrix;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/high_cond_elliptic_rot_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /high_cond_elliptic_rot_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Shifted Rotated High Conditioned Elliptic Function";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Shifted Rotated High Conditioned Elliptic Function " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Rotated Hybrid Composition Function 3";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Rotated Hybrid Composition Function 3 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"crossover\" which hides the field declared at line 29.
scn.ruleId===
1117
scn.suspCodeStr===
SBXCrossover crossover = (SBXCrossover) builder.getCrossoverOperator();
red_line===
crossover
start_offset===
17
end_offset===
26
Python OUTPUT===
SBXCrossover crossover = (SBXCrossover) builder.getCrossoverOperator();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this method name to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
100
scn.suspCodeStr===
public void AddMember(){this.memberSize++;}
red_line===
AddMember
start_offset===
14
end_offset===
23
Python OUTPUT===
public void AddMember(){this.memberSize++;}
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Cannot happen!!!");
red_line===
System.out
start_offset===
14
end_offset===
24
Python OUTPUT===
 System.out.println("Cannot happen!!!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"ranking\" which hides the field declared at line 19.
scn.ruleId===
1117
scn.suspCodeStr===
Ranking<S> ranking = new DominanceRanking<>();
red_line===
ranking
start_offset===
15
end_offset===
22
Python OUTPUT===
Ranking<S> ranking = new DominanceRanking<>();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"r2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double r1, r2, c1, c2;
red_line===
r2
start_offset===
15
end_offset===
17
Python OUTPUT===
double r1, r2, c1, c2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"newRank\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int curRank, newRank;
red_line===
newRank
start_offset===
23
end_offset===
30
Python OUTPUT===
int curRank, newRank;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor the code in order to not assign to this loop counter from within the loop body.
scn.ruleId===
127
scn.suspCodeStr===
i = (int) indiv.getAttribute(ranking.getAttributeIdentifier());
red_line===
i
start_offset===
8
end_offset===
9
Python OUTPUT===
i = (int) indiv.getAttribute(ranking.getAttributeIdentifier());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"currentEvaluation\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
measureManager.setPushMeasure("currentEvaluation", evaluations);
red_line===
"currentEvaluation"
start_offset===
34
end_offset===
53
Python OUTPUT===
measureManager.setPushMeasure("currentEvaluation", evaluations);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"F\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double CR, F;
red_line===
F
start_offset===
15
end_offset===
16
Python OUTPUT===
double CR, F;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OpProb\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] OpProb;
red_line===
OpProb
start_offset===
19
end_offset===
25
Python OUTPUT===
private double[] OpProb;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"two\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
DoubleSolution one, two;
red_line===
two
start_offset===
24
end_offset===
27
Python OUTPUT===
DoubleSolution one, two;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
data.get(indicator).get(problem).add(algorithm, new ArrayList<Double>());
red_line===
<Double>
start_offset===
71
end_offset===
79
Python OUTPUT===
<> indicator ).get ( problem ).add ( algorithm , new ArrayList < Double > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
private double deltaMax[];
red_line===
[]
start_offset===
25
end_offset===
27
Python OUTPUT===
private double deltaMax[];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
20
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>(violationComparator);
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( violationComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, sum3, yj, hj;
red_line===
sum2
start_offset===
17
end_offset===
21
Python OUTPUT===
double sum1, sum2, sum3, yj, hj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2, count3;
red_line===
count2
start_offset===
16
end_offset===
22
Python OUTPUT===
int count1, count2, count3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"numberOfRanksForUnfeasibleSolutions\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int numberOfRanksForFeasibleSolutions, numberOfRanksForUnfeasibleSolutions, rank, indexOfBestSolution;
red_line===
numberOfRanksForUnfeasibleSolutions
start_offset===
41
end_offset===
76
Python OUTPUT===
int numberOfRanksForFeasibleSolutions, numberOfRanksForUnfeasibleSolutions, rank, indexOfBestSolution;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"minimumValue\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double value, minimumValue;
red_line===
minimumValue
start_offset===
16
end_offset===
28
Python OUTPUT===
double value, minimumValue;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.rankedSubpopulations.add(new ArrayList<S>());
red_line===
<S>
start_offset===
46
end_offset===
49
Python OUTPUT===
<> add ( new ArrayList < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case -1:
red_line===
case -1:
start_offset===
8
end_offset===
16
Python OUTPUT===
case -1:
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
parentsSelection = new RandomSelection<BinarySolution>() ;
red_line===
<BinarySolution>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Objectives values have been written to file FUN.tsv\" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
JMetalLogger.logger.info("Objectives values have been written to file FUN.tsv");
red_line===
"Objectives values have been written to file FUN.tsv"
start_offset===
29
end_offset===
82
Python OUTPUT===
JMetalLogger.logger.info("Objectives values have been written to file FUN.tsv");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
public abstract double basicFunc(int func_no, double[] x) ;
red_line===
func_no
start_offset===
39
end_offset===
46
Python OUTPUT===
public abstract double basicFunc(int func_no, double[] x) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/griewank_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /griewank_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
LinkedList<double[]> frontCopy = new LinkedList<double[]>();
red_line===
<double[]>
start_offset===
51
end_offset===
61
Python OUTPUT===
<> frontCopy = new LinkedList < double [ ] > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
End this switch case with an unconditional break, return or throw statement.
scn.ruleId===
128
scn.suspCodeStr===
case -1:
red_line===
case -1:
start_offset===
8
end_offset===
16
Python OUTPUT===
case -1:
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
55
end_offset===
71
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
L5<IntegerSolution> neighborhood = new L5<IntegerSolution>(rows, columns) ;
red_line===
<IntegerSolution>
start_offset===
45
end_offset===
62
Python OUTPUT===
<> neighborhood = new L5 < IntegerSolution > ( rows , columns ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Total execution time: \" 10 times.
scn.ruleId===
1192
scn.suspCodeStr===
JMetalLogger.logger.info("Total execution time: " + computingTime + "ms");
red_line===
"Total execution time: "
start_offset===
29
end_offset===
53
Python OUTPUT===
JMetalLogger.logger.info("Total execution time: " + computingTime + "ms");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SelectionOperator<List<BinarySolution>, BinarySolution> selectionOperator = new BinaryTournamentSelection<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
117
end_offset===
133
Python OUTPUT===
<> BinarySolution > , BinarySolution > selectionOperator = new BinaryTournamentSelection < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Don\u0027t try to be smarter than the JVM, remove this call to run the garbage collector.
scn.ruleId===
1215
scn.suspCodeStr===
System.gc();
red_line===
gc
start_offset===
9
end_offset===
11
Python OUTPUT===
System.gc();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Don\u0027t try to be smarter than the JVM, remove this call to run the garbage collector.
scn.ruleId===
1215
scn.suspCodeStr===
System.gc();
red_line===
gc
start_offset===
9
end_offset===
11
Python OUTPUT===
System.gc();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(new OverallConstraintViolationComparator<S>(), epsilon) ;
red_line===
<S>
start_offset===
49
end_offset===
52
Python OUTPUT===
<> < S > ( ) , epsilon ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final HypervolumeContributionAttribute<S> hvContribution = new HypervolumeContributionAttribute<S>() ;
red_line===
<S>
start_offset===
105
end_offset===
108
Python OUTPUT===
<> S > hvContribution = new HypervolumeContributionAttribute < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<DoubleSolution> offspring = new ArrayList<DoubleSolution>(2);
red_line===
<DoubleSolution>
start_offset===
50
end_offset===
66
Python OUTPUT===
<> offspring = new ArrayList < DoubleSolution > ( 2 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(neighborSize, new EuclideanDistanceBetweenSolutionsInObjectiveSpace<S>());
red_line===
<S>
start_offset===
76
end_offset===
79
Python OUTPUT===
<> new EuclideanDistanceBetweenSolutionsInObjectiveSpace < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private static final Comparator<Solution<?>> DOMINANCE_COMPARATOR = new DominanceComparator<Solution<?>>();
red_line===
<Solution<?>>
start_offset===
93
end_offset===
106
Python OUTPUT===
<> ? >> DOMINANCE_COMPARATOR = new DominanceComparator < Solution < ? >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
private final static int FIRST_WORD_RANGE = 0;
red_line===
static
start_offset===
15
end_offset===
21
Python OUTPUT===
private static final int FIRST_WORD_RANGE = 0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ranking0\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
private int[] ranking, ranking0;
red_line===
ranking0
start_offset===
24
end_offset===
32
Python OUTPUT===
private int[] ranking, ranking0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.swingWrapper = new SwingWrapper<XYChart>(new ArrayList<XYChart>(this.charts.values()));
red_line===
<XYChart>
start_offset===
40
end_offset===
49
Python OUTPUT===
<> new SwingWrapper < XYChart > ( new ArrayList < XYChart > ( this.charts.values ( ) ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"d2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double d1, d2, nl;
red_line===
d2
start_offset===
15
end_offset===
17
Python OUTPUT===
double d1, d2, nl;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"epsJ\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double eps, epsJ = 0.0, epsK = 0.0, epsTemp;
red_line===
epsJ
start_offset===
16
end_offset===
20
Python OUTPUT===
double eps, epsJ = 0.0, epsK = 0.0, epsTemp;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Make sure this expression can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
return (dExtrems + mean) / (dExtrems + (numberOfPoints*dmean));
red_line===
(dExtrems + (numberOfPoints*dmean))
start_offset===
33
end_offset===
68
Python OUTPUT===
final return ( dExtrems + mean ) ( dExtrems + ( numberOfPoints * dmean ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"resourcesDirectory\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private static String resourcesDirectory;
red_line===
resourcesDirectory
start_offset===
24
end_offset===
42
Python OUTPUT===
 private static String r 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sub1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double g = 0, sub1, sub2;
red_line===
sub1
start_offset===
18
end_offset===
22
Python OUTPUT===
double g = 0, sub1, sub2;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this addition operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
c4[i] = Math.pow(2, i + 1);
red_line===
+
start_offset===
28
end_offset===
29
Python OUTPUT===
 c4[i] = Math.pow(2,i + 1);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"ub1\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int lb1 = 0, ub1 = 0, lb2 = 0, ub2 = 0;
red_line===
ub1
start_offset===
17
end_offset===
20
Python OUTPUT===
int lb1 = 0, ub1 = 0, lb2 = 0, ub2 = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_CB = solution.getVariable(5);
red_line===
x_CB
start_offset===
11
end_offset===
15
Python OUTPUT===
double x_CB = solution.getVariable(5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double port_days = 2.0 * ((cargo_DWT / handling_rate) + 0.5);
red_line===
port_days
start_offset===
11
end_offset===
20
Python OUTPUT===
double port_days = 2.0 * ((cargo_DWT / handling_rate) + 0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double RTPA = 350.0 / (sea_days + port_days);
red_line===
RTPA
start_offset===
11
end_offset===
15
Python OUTPUT===
double RTPA = 350.0 / (sea_days + port_days);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double BMT = ((0.085 * x_CB - 0.002) * x_B * x_B) / (x_T * x_CB);
red_line===
BMT
start_offset===
11
end_offset===
14
Python OUTPUT===
double BMT = ((0.085 * x_CB - 0.002) * x_B * x_B) / (x_T * x_CB);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4, x5, x6, x7;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4, x5, x6, x7;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double miscellaneous_DWT = 2.0 * Math.pow(DWT, 0.5);
red_line===
miscellaneous_DWT
start_offset===
11
end_offset===
28
Python OUTPUT===
double miscellaneous_DWT = 2.0 * Math.pow(DWT, 0.5);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double daily_consumption = ((0.19 * power * 24.0) / 1000.0) + 0.2;
red_line===
daily_consumption
start_offset===
11
end_offset===
28
Python OUTPUT===
double daily_consumption = ((0.19 * power * 24.0) / 1000.0) + 0.2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][] m_o;
red_line===
m_o
start_offset===
27
end_offset===
30
Python OUTPUT===
private final double[][] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func3_HM_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func3_HM_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Rotated Hybrid Composition Function 4 without bounds";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Rotated Hybrid Composition Function 4 without bounds " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_fmax\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_fmax;
red_line===
m_fmax
start_offset===
25
end_offset===
31
Python OUTPUT===
private final double[] m_fmax;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"wmin\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double wmax, wmin;
red_line===
wmin
start_offset===
17
end_offset===
21
Python OUTPUT===
double wmax, wmin;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
builder = new NSGAIIBuilder<DoubleSolution>(problem, crossover, mutation, populationSize);
red_line===
<DoubleSolution>
start_offset===
31
end_offset===
47
Python OUTPUT===
<> < DoubleSolution > ( problem , crossover , mutation , populationSize ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"crossover\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private CrossoverOperator<DoubleSolution> crossover;
red_line===
crossover
start_offset===
44
end_offset===
53
Python OUTPUT===
 private CrossoverOperator<DoubleSolution> c 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
fitnessComparator = new StrengthFitnessComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"crossover\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private CrossoverOperator<DoubleSolution> crossover;
red_line===
crossover
start_offset===
44
end_offset===
53
Python OUTPUT===
 private CrossoverOperator<DoubleSolution> c 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"mutation\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private MutationOperator<DoubleSolution> mutation;
red_line===
mutation
start_offset===
43
end_offset===
51
Python OUTPUT===
 private MutationOperator<DoubleSolution> m 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
setMaxPopulationSize(populationSize);
red_line===
;
start_offset===
42
end_offset===
43
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
LocationAttribute<S> location = new LocationAttribute<S>(aux);
red_line===
<S>
start_offset===
57
end_offset===
60
Python OUTPUT===
<> location = new LocationAttribute < S > ( aux ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"dd\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double cc, dd;
red_line===
dd
start_offset===
15
end_offset===
17
Python OUTPUT===
double cc, dd;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
setProblem(problem);
red_line===
;
start_offset===
25
end_offset===
26
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
string += new String(bytes, 0, readBytes);
red_line===
string
start_offset===
10
end_offset===
16
Python OUTPUT===
string += new String(bytes, 0, readBytes);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
42
end_offset===
55
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Archive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(100) ;
red_line===
<DoubleSolution>
start_offset===
65
end_offset===
81
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
BoundedArchive<DoubleSolution> archive = new CrowdingDistanceArchive<DoubleSolution>(100) ;
red_line===
<DoubleSolution>
start_offset===
72
end_offset===
88
Python OUTPUT===
<> archive = new CrowdingDistanceArchive < DoubleSolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"javax.swing.WindowConstants\" for \"EXIT_ON_CLOSE\".
scn.ruleId===
3252
scn.suspCodeStr===
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
red_line===
EXIT_ON_CLOSE
start_offset===
42
end_offset===
55
Python OUTPUT===
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SimplePushMeasure<Integer> pusher = new SimplePushMeasure<Integer>();
red_line===
<Integer>
start_offset===
59
end_offset===
68
Python OUTPUT===
<> pusher = new SimplePushMeasure < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SimplePushMeasure<Integer> pusher = new SimplePushMeasure<Integer>();
red_line===
<Integer>
start_offset===
59
end_offset===
68
Python OUTPUT===
<> pusher = new SimplePushMeasure < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
SimplePushMeasure<Object> push = new SimplePushMeasure<Object>();
red_line===
<Object>
start_offset===
56
end_offset===
64
Python OUTPUT===
<> push = new SimplePushMeasure < Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
ReflectionTestUtils.setField(problem, "upperLimit", Arrays.asList(new Integer[]{1}));
red_line===
new Integer[]{1}
start_offset===
70
end_offset===
86
Python OUTPUT===
 ReflectionTestUtils.setField(problem, "upperLimit", Arrays.asList(new 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Hypervolume\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
chart.addIndicatorChart("Hypervolume");
red_line===
"Hypervolume"
start_offset===
28
end_offset===
41
Python OUTPUT===
chart.addIndicatorChart("Hypervolume");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getChart("Hypervolume").setTitle("Iteration: " + 0);
red_line===
"Iteration: "
start_offset===
50
end_offset===
63
Python OUTPUT===
this.chart.getChart("Hypervolume").setTitle("Iteration: " + 0);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"getLowerBound\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
Double lowerBound = solution.getLowerBound(index);
red_line===
getLowerBound
start_offset===
33
end_offset===
46
Python OUTPUT===
 Double lowerBound = solution.getdex); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"getUpperBound\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
Double upperBound = solution.getUpperBound(index);
red_line===
getUpperBound
start_offset===
33
end_offset===
46
Python OUTPUT===
 Double upperBound = solution.getdex); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
localBest = new GenericSolutionAttribute<DoubleSolution, DoubleSolution>();
red_line===
<DoubleSolution, DoubleSolution>
start_offset===
44
end_offset===
76
Python OUTPUT===
<> , DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, x3, x4, x5, x6;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, x3, x4, x5, x6;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"result\".
scn.ruleId===
1854
scn.suspCodeStr===
double result = 0.0;
red_line===
= 0.0
start_offset===
18
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Rotated Hybrid Composition Function 4";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Rotated Hybrid Composition Function 4 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"populationSize\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(algorithm, "populationSize", populationSize);
red_line===
"populationSize"
start_offset===
44
end_offset===
60
Python OUTPUT===
ReflectionTestUtils.setField(algorithm, "populationSize", populationSize);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rankingAndCrowdingSelection = new RankingAndCrowdingSelection<S>(getMaxPopulationSize(), dominanceComparator) ;
red_line===
<S>
start_offset===
65
end_offset===
68
Python OUTPUT===
<> < S > ( getMaxPopulationSize ( ) , dominanceComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<BinarySolution>() ;
red_line===
<BinarySolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
dominanceComparator = new DominanceComparator<DoubleSolution>();
red_line===
<DoubleSolution>
start_offset===
49
end_offset===
65
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
private double deltaMin[];
red_line===
[]
start_offset===
25
end_offset===
27
Python OUTPUT===
private double deltaMin[];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
GenericSolutionAttribute<PointSolution, String> solutionAttribute = new GenericSolutionAttribute<PointSolution, String>()  ;
red_line===
<PointSolution, String>
start_offset===
106
end_offset===
129
Python OUTPUT===
<> = new GenericSolutionAttribute < PointSolution , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
42
end_offset===
55
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<PermutationSolution<Integer>>(new RankingAndCrowdingDistanceComparator<PermutationSolution<Integer>>());
red_line===
<PermutationSolution<Integer>>
start_offset===
45
end_offset===
75
Python OUTPUT===
<> Integer >> ( new RankingAndCrowdingDistanceComparator < PermutationSolution < Integer >> ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
int replacement2[] = new int[permutationLength];
red_line===
[]
start_offset===
22
end_offset===
24
Python OUTPUT===
int replacement2[] = new int[permutationLength];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double x_T = solution.getVariable(3);
red_line===
x_T
start_offset===
11
end_offset===
14
Python OUTPUT===
double x_T = solution.getVariable(3);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(new RankingAndSSDComparator<S>(), numberOfTournaments) ;
red_line===
<S>
start_offset===
36
end_offset===
39
Python OUTPUT===
<> < S > ( ) , numberOfTournaments ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
iDominate.add(new LinkedList<Integer>());
red_line===
<Integer>
start_offset===
34
end_offset===
43
Python OUTPUT===
<> new LinkedList < Integer > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double cargo_DWT = DWT - fuel_carried - miscellaneous_DWT;
red_line===
cargo_DWT
start_offset===
11
end_offset===
20
Python OUTPUT===
double cargo_DWT = DWT - fuel_carried - miscellaneous_DWT;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"yOffset\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double xOffset = 1.2, yOffset = 1.2, a = 1.5, b = 5.0, r = 0.1;
red_line===
yOffset
start_offset===
26
end_offset===
33
Python OUTPUT===
double xOffset = 1.2, yOffset = 1.2, a = 1.5, b = 5.0, r = 0.1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
attributes = new HashMap<Object, Object>();
red_line===
<Object, Object>
start_offset===
28
end_offset===
44
Python OUTPUT===
<> , Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
LinkedList<double[]> frontCopy = new LinkedList<double[]>();
red_line===
<double[]>
start_offset===
51
end_offset===
61
Python OUTPUT===
<> frontCopy = new LinkedList < double [ ] > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUMBER_OF_BITS = 256 ;
red_line===
NUMBER_OF_BITS
start_offset===
8
end_offset===
22
Python OUTPUT===
int NUMBER_OF_BITS = 256 ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Integer> J1 = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
41
end_offset===
50
Python OUTPUT===
<> J1 = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sub2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sub1 = 0, sub2 = 0, sub3 = 0, sub4 = 0;
red_line===
sub2
start_offset===
21
end_offset===
25
Python OUTPUT===
double sub1 = 0, sub2 = 0, sub3 = 0, sub4 = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ArrayList<Integer> J4 = new ArrayList<Integer>();
red_line===
<Integer>
start_offset===
41
end_offset===
50
Python OUTPUT===
<> J4 = new ArrayList < Integer > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
solutionList.sort(new HypervolumeContributionComparator<S>());
red_line===
<S>
start_offset===
61
end_offset===
64
Python OUTPUT===
<> new HypervolumeContributionComparator < S > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"count2\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
int count1, count2;
red_line===
count2
start_offset===
15
end_offset===
21
Python OUTPUT===
int count1, count2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"sum2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double sum1, sum2, yj;
red_line===
sum2
start_offset===
15
end_offset===
19
Python OUTPUT===
double sum1, sum2, yj;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"double\".
scn.ruleId===
1905
scn.suspCodeStr===
solution.setObjective(2, Math.sin(0.5 * Math.PI * x[0]) + 2.0 * sum3 / (double) count3);
red_line===
double
start_offset===
76
end_offset===
82
Python OUTPUT===
 solution.setObjective(2, Math.sin(0.5 * Math.PI * x[0]) + 2.0 * sum3  /  (douount3); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final int limitInfI = 0;
red_line===
limitInfI
start_offset===
20
end_offset===
29
Python OUTPUT===
private static final int limitInfI = 0 ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Correct one of the identical sub-expressions on both sides of operator \"-\"
scn.ruleId===
1764
scn.suspCodeStr===
System.arraycopy(z, head, result, head - head, tail + 1 - head);
red_line===
head
start_offset===
45
end_offset===
49
Python OUTPUT===
- arraycopy ( z , head , result , head - head , tail + 1 - head ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MxzMax_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] MxzMax_;
red_line===
MxzMax_
start_offset===
23
end_offset===
30
Python OUTPUT===
protected double[][] MxzMax_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"numberOfWeigthsElements_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int numberOfWeigthsElements_;
red_line===
numberOfWeigthsElements_
start_offset===
16
end_offset===
40
Python OUTPUT===
protected int numberOfWeigthsElements_;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 4;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 2;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"StrainNxxMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] StrainNxxMin_;
red_line===
StrainNxxMin_
start_offset===
23
end_offset===
36
Python OUTPUT===
protected double[][] StrainNxxMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] Omin = new double[geometryCheck_[i].length];
red_line===
Omin
start_offset===
15
end_offset===
19
Python OUTPUT===
double[] Omin = new double[geometryCheck_[i].length];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  Number of Bars: " + numberOfElements_);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" Number of Bars: " + numberOfElements_); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"gX_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int gX_ = 3;
red_line===
gX_
start_offset===
6
end_offset===
9
Python OUTPUT===
int gX_ = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Lij = Element_[e][L_];
red_line===
Lij
start_offset===
11
end_offset===
14
Python OUTPUT===
double Lij = Element_[e][L_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_SUFFIX = ".txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_SUFFIX = " .txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_o\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_o;
red_line===
m_o
start_offset===
25
end_offset===
28
Python OUTPUT===
private final double[] m_o;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_z;
red_line===
m_z
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Kjj\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Kjj = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Kjj
start_offset===
13
end_offset===
16
Python OUTPUT===
double[][] Kjj = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPoint\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPoint;
red_line===
m_testPoint
start_offset===
25
end_offset===
36
Python OUTPUT===
private final double[] m_testPoint;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_M\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[][][] m_M;
red_line===
m_M
start_offset===
29
end_offset===
32
Python OUTPUT===
private final double[][][] m_M;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"%12.3f\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ps.printf("%12.3f", Kii[o][p]);
red_line===
"%12.3f"
start_offset===
20
end_offset===
28
Python OUTPUT===
ps.printf("%12.3f", Kii[o][p]);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Rotated Hybrid Composition Function 1";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Rotated Hybrid Composition Function 1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
Double[] upperLimit_ = new Double[getNumberOfVariables()];
red_line===
upperLimit_
start_offset===
13
end_offset===
24
Python OUTPUT===
Double[] upperLimit_ = new Double[getNumberOfVariables()];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/rastrigin_func_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /rastrigin_func_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Ni = AxialForcei_[e];
red_line===
Ni
start_offset===
11
end_offset===
13
Python OUTPUT===
double Ni = AxialForcei_[e];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
neighborhood = new C9<S>((int)Math.sqrt(populationSize), (int)Math.sqrt(populationSize)) ;
red_line===
<S>
start_offset===
25
end_offset===
28
Python OUTPUT===
<> < S > ( ( int ) Math.sqrt ( populationSize ) , ( int ) Math.sqrt ( populationSize ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double[] Emin = new double[geometryCheck_[i].length];
red_line===
Emin
start_offset===
15
end_offset===
19
Python OUTPUT===
double[] Emin = new double[geometryCheck_[i].length];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OverloadInElement_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] OverloadInElement_;
red_line===
OverloadInElement_
start_offset===
23
end_offset===
41
Python OUTPUT===
protected double[][] OverloadInElement_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ElitistEvolutionStrategy<S>(problem, mu, lambda, maxEvaluations, mutation);
red_line===
<S>
start_offset===
41
end_offset===
44
Python OUTPUT===
<> S > ( problem , mu , lambda , maxEvaluations , mutation ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this.numberOfViolatedConstraints = new NumberOfViolatedConstraints<S>() ;
red_line===
<S>
start_offset===
74
end_offset===
77
Python OUTPUT===
<> new NumberOfViolatedConstraints < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"numberOfRanks\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private int numberOfRanks = 0;
red_line===
numberOfRanks
start_offset===
16
end_offset===
29
Python OUTPUT===
 private int num0; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new DominanceComparator<Solution<?>>(violationComparator);
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( violationComparator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Entity 1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(set.add(new SimpleDescribedEntity("Entity 1")));
red_line===
"Entity 1"
start_offset===
47
end_offset===
57
Python OUTPUT===
assertTrue(set.add(new SimpleDescribedEntity("Entity 1")));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<DoubleSolution>(0);
red_line===
<DoubleSolution>
start_offset===
40
end_offset===
56
Python OUTPUT===
<> < DoubleSolution > ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Ft = Math.pow(10.0d, aux);
red_line===
Ft
start_offset===
11
end_offset===
13
Python OUTPUT===
double Ft = Math.pow(10.0d, aux);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Z = 0;
red_line===
Z
start_offset===
11
end_offset===
12
Python OUTPUT===
double Z = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"s\".
scn.ruleId===
1854
scn.suspCodeStr===
double[][] s = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_][numberOfLibertyDegree_]
start_offset===
19
end_offset===
79
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MatrixStiffness_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[] MatrixStiffness_;
red_line===
MatrixStiffness_
start_offset===
21
end_offset===
37
Python OUTPUT===
protected double[] MatrixStiffness_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"NxxMin_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[][] NxxMin_;
red_line===
NxxMin_
start_offset===
23
end_offset===
30
Python OUTPUT===
protected double[][] NxxMin_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double E = Groups_[idx][E_];
red_line===
E
start_offset===
11
end_offset===
12
Python OUTPUT===
double E = Groups_[idx][E_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
newGenerationSelection = new RankingAndCrowdingSelection<BinarySolution>(100);
red_line===
<BinarySolution>
start_offset===
64
end_offset===
80
Python OUTPUT===
<> RankingAndCrowdingSelection < BinarySolution > ( 100 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_zM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_zM;
red_line===
m_zM
start_offset===
21
end_offset===
25
Python OUTPUT===
private double[][] m_zM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func2_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func2_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this empty statement.
scn.ruleId===
1116
scn.suspCodeStr===
idealPoint.update(population);
red_line===
;
start_offset===
35
end_offset===
36
Python OUTPUT===

isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
parentsSelection = new RandomSelection<BinarySolution>();
red_line===
<BinarySolution>
start_offset===
46
end_offset===
62
Python OUTPUT===
<> < BinarySolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String path = "/" + dataDirectory + "/" + dataFileName ;
red_line===
"/"
start_offset===
44
end_offset===
47
Python OUTPUT===
 String path = " / " + dataDirectory + " / " + dFileName ; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public int NUM_FUNC = 10;
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final int NUM_FUNC = 10 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rankingAndCrowdingSelection = new RankingAndPreferenceSelection<S>(getMaxPopulationSize(), interestPoint, epsilon) ;
red_line===
<S>
start_offset===
67
end_offset===
70
Python OUTPUT===
<> < S > ( getMaxPopulationSize ( ) , interestPoint , epsilon ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<S> spawners = new ArrayList<S>(quantity);
red_line===
<S>
start_offset===
34
end_offset===
37
Python OUTPUT===
<> spawners = new ArrayList < S > ( quantity ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<S> larvae = new ArrayList<S>(sz);
red_line===
<S>
start_offset===
32
end_offset===
35
Python OUTPUT===
<> larvae = new ArrayList < S > ( sz ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<List<MutablePair<Double, Double>>> rank = new ArrayList<List<MutablePair<Double, Double>>>(numberOfProblems);
red_line===
<List<MutablePair<Double, Double>>>
start_offset===
64
end_offset===
99
Python OUTPUT===
<> new ArrayList < List < MutablePair < Double , Double >> > ( numberOfProblems ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the synchronized class \"Vector\" by an unsynchronized one such as \"ArrayList\" or \"LinkedList\".
scn.ruleId===
1149
scn.suspCodeStr===
Vector<Vector<Double>> data = readData(indicator);
red_line===
Vector<Vector<Double>>
start_offset===
6
end_offset===
28
Python OUTPUT===
ArrayList < ArrayList < Double >> data = readData ( indicator ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the parentheses around the \"a\" parameter (sonar.java.source not set. Assuming 8 or greater.)
scn.ruleId===
1611
scn.suspCodeStr===
auditor.addListener((a) -> defaultUses[0]++);
red_line===
(
start_offset===
22
end_offset===
23
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"randomGenerator\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
ReflectionTestUtils.setField(mutation, "randomGenerator", randomGenerator);
red_line===
"randomGenerator"
start_offset===
43
end_offset===
60
Python OUTPUT===
ReflectionTestUtils.setField(mutation, "randomGenerator", randomGenerator);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"t\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double arg, t, t2, t3, xnum, xden, qinvp, x, pc;
red_line===
t
start_offset===
16
end_offset===
17
Python OUTPUT===
double arg, t, t2, t3, xnum, xden, qinvp, x, pc;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"x2\" and all following declarations on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double x1, x2, w, y1;
red_line===
x2
start_offset===
15
end_offset===
17
Python OUTPUT===
double x1, x2, w, y1;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"txt\".
scn.ruleId===
1854
scn.suspCodeStr===
txt = input.nextLine();
red_line===
= input.nextLine()
start_offset===
12
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double Y = 0;
red_line===
Y
start_offset===
11
end_offset===
12
Python OUTPUT===
double Y = 0;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
String contains no format specifiers.
scn.ruleId===
3457
scn.suspCodeStr===
ps.printf("--------------------------------------------");
red_line===
ps.printf("--------------------------------------------")
start_offset===
6
end_offset===
63
Python OUTPUT===
ps.printf("--------------------------------------------");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"AxialForcej_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected double[] AxialForcej_;
red_line===
AxialForcej_
start_offset===
21
end_offset===
33
Python OUTPUT===
protected double[] AxialForcej_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA__TRIANGULAR_J\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA__TRIANGULAR_J = 4;
red_line===
CARGA__TRIANGULAR_J
start_offset===
6
end_offset===
25
Python OUTPUT===
int CARGA__TRIANGULAR_J = 4;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Reacciones: El archivo no pudo grabarse!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Reacciones: El archivo no pudo grabarse!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"strainAdmissibleCut_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int strainAdmissibleCut_;
red_line===
strainAdmissibleCut_
start_offset===
16
end_offset===
36
Python OUTPUT===
protected int strainAdmissibleCut_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"CARGA_TRIANGULAR_I\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int CARGA_TRIANGULAR_I = 3;
red_line===
CARGA_TRIANGULAR_I
start_offset===
6
end_offset===
24
Python OUTPUT===
int CARGA_TRIANGULAR_I = 3;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make overallConstraintViolationDegree a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public OverallConstraintViolation<DoubleSolution> overallConstraintViolationDegree;
red_line===
overallConstraintViolationDegree
start_offset===
52
end_offset===
84
Python OUTPUT===
public static final OverallConstraintViolation < DoubleSolution > overallConstraintViolationDegree ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"eij\".
scn.ruleId===
1854
scn.suspCodeStr===
double[] eij = new double[numberOfLibertyDegree_];
red_line===
= new double[numberOfLibertyDegree_]
start_offset===
19
end_offset===
55
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_w\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[] m_w;
red_line===
m_w
start_offset===
19
end_offset===
22
Python OUTPUT===
private double[] m_w;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String FUNCTION_NAME = "Hybrid Composition Function 1";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String FUNCTION_NAME = " Hybrid Composition Function 1 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_z\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private double[][] m_z;
red_line===
m_z
start_offset===
21
end_offset===
24
Python OUTPUT===
private double[][] m_z;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Total computing time: " + algorithm.getTotalComputingTime()) ;
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Total computing time: " + algorithm.getTotalComputingTime()) ; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
rValue = new HashMap<Integer, Double>();
red_line===
<Integer, Double>
start_offset===
24
end_offset===
41
Python OUTPUT===
<> Double > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"attribute\" which hides the field declared at line 14.
scn.ruleId===
1117
scn.suspCodeStr===
R2RankingAttribute<S> attribute = new R2RankingAttribute<>();
red_line===
attribute
start_offset===
32
end_offset===
41
Python OUTPUT===
R2RankingAttribute<S> attribute = new R2RankingAttribute<>();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selectionOperator = new BinaryTournamentSelection<S>();
red_line===
<S>
start_offset===
53
end_offset===
56
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<S>();
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"t_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int t_;
red_line===
t_
start_offset===
16
end_offset===
18
Python OUTPUT===
protected int t_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"pdf\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double expntl, pdf;
red_line===
pdf
start_offset===
19
end_offset===
22
Python OUTPUT===
double expntl, pdf;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
mutation = new PermutationSwapMutation<Integer>(mutationProbability) ;
red_line===
<Integer>
start_offset===
42
end_offset===
51
Python OUTPUT===
<> < Integer > ( mutationProbability ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
comparator = new ObjectiveComparator<Solution<?>>(0) ;
red_line===
<Solution<?>>
start_offset===
40
end_offset===
53
Python OUTPUT===
<> ? >> ( 0 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"evaluations\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Integer evaluations ;
red_line===
evaluations
start_offset===
18
end_offset===
29
Python OUTPUT===
 private Integer e; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Ranking<S> ranking = new DominanceRanking<S>();
red_line===
<S>
start_offset===
51
end_offset===
54
Python OUTPUT===
<> > ranking = new DominanceRanking < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
int ranking[] = sort(population);
red_line===
[]
start_offset===
15
end_offset===
17
Python OUTPUT===
int ranking[] = sort(population);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistanceComparator = new SpatialSpreadDeviationComparator<S>() ;
red_line===
<S>
start_offset===
69
end_offset===
72
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
crowdingDistance = new SpatialSpreadDeviation<S>() ;
red_line===
<S>
start_offset===
49
end_offset===
52
Python OUTPUT===
<> < S > ( ) ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
Groups_[gr][VAR_POSITION] = numberOfVariables_ - 2;
red_line===
-
start_offset===
57
end_offset===
58
Python OUTPUT===
 Groups_[gr][VAR_POSITION] = numberOfVariables_ - 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int numberOfObjectives_ = solution.getNumberOfObjectives();
red_line===
numberOfObjectives_
start_offset===
8
end_offset===
27
Python OUTPUT===
int numberOfObjectives_ = solution.getNumberOfObjectives();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double R = Math.sqrt(tmpVar);
red_line===
R
start_offset===
11
end_offset===
12
Python OUTPUT===
double R = Math.sqrt(tmpVar);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double sea_days = (round_trip_miles / 24.0) * x_Vk;
red_line===
sea_days
start_offset===
11
end_offset===
19
Python OUTPUT===
double sea_days = (round_trip_miles / 24.0) * x_Vk;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double M = P * (L + (x2 / 2));
red_line===
M
start_offset===
11
end_offset===
12
Python OUTPUT===
double M = P * (L + (x2 / 2));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_eZ_LOWER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_eZ_LOWER_LIMIT = 42;
red_line===
VAR_eZ_LOWER_LIMIT
start_offset===
6
end_offset===
24
Python OUTPUT===
int VAR_eZ_LOWER_LIMIT = 42;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VAR_eY_LOWER_LIMIT\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
int VAR_eY_LOWER_LIMIT = 40;
red_line===
VAR_eY_LOWER_LIMIT
start_offset===
6
end_offset===
24
Python OUTPUT===
int VAR_eY_LOWER_LIMIT = 40;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change the visibility of this constructor to \"protected\".
scn.ruleId===
5993
scn.suspCodeStr===
public Hypervolume() {}
red_line===
public
start_offset===
2
end_offset===
8
Python OUTPUT===
protected ( ) { }
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Grupos de barras: El archivo no pudo grabarse!");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Grupos de barras: El archivo no pudo grabarse!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"Rji\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
double[][] Rji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
red_line===
Rji
start_offset===
13
end_offset===
16
Python OUTPUT===
double[][] Rji = new double[numberOfLibertyDegree_][numberOfLibertyDegree_];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("  file: " + file);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(" file: " + file); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"y\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double z, y;
red_line===
y
start_offset===
14
end_offset===
15
Python OUTPUT===
double z, y;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_DATA = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func4_data.txt";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_DATA = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func4_data.txt " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
static final public String DEFAULT_FILE_MX_PREFIX = Benchmark.CEC2005SUPPORTDATADIRECTORY + "/hybrid_func4_M_D";
red_line===
public
start_offset===
15
end_offset===
21
Python OUTPUT===
public static final String DEFAULT_FILE_MX_PREFIX = Benchmark . CEC2005SUPPORTDATADIRECTORY + " /hybrid_func4_M_D " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println((referenceFrontHV - obtainedFrontHV) / referenceFrontHV);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println((referenceFrontHV - obtainedFrontHV) / referenceFrontHV); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"m_testPointM\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final double[] m_testPointM;
red_line===
m_testPointM
start_offset===
25
end_offset===
37
Python OUTPUT===
private final double[] m_testPointM;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
CrowdingDistance<S> crowdingDistance = new CrowdingDistance<S>();
red_line===
<S>
start_offset===
63
end_offset===
66
Python OUTPUT===
<> crowdingDistance = new CrowdingDistance < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make fixedParameterList a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public List<Parameter<?>> fixedParameterList = new ArrayList<>();
red_line===
fixedParameterList
start_offset===
28
end_offset===
46
Python OUTPUT===
public static final List < Parameter < ? >> fixedParameterList = new ArrayList < > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"order_\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
individual.setAttribute("order_", order_);
red_line===
"order_"
start_offset===
26
end_offset===
34
Python OUTPUT===
individual.setAttribute("order_", order_);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
List<S> extreme_points = 		findExtremePoints(source);
red_line===
extreme_points
start_offset===
10
end_offset===
24
Python OUTPUT===
List<S> extreme_points = 		findExtremePoints(source);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Declare \"denominator\" on a separate line.
scn.ruleId===
1659
scn.suspCodeStr===
double numerator = 0, denominator = 0;
red_line===
denominator
start_offset===
27
end_offset===
38
Python OUTPUT===
double numerator = 0, denominator = 0;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Make sure \"denominator\" can\u0027t be zero before doing this division.
scn.ruleId===
3518
scn.suspCodeStr===
double k = numerator/denominator;
red_line===
denominator
start_offset===
26
end_offset===
37
Python OUTPUT===
final double k = numeratordenominator ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
S min_indv = null;
red_line===
min_indv
start_offset===
4
end_offset===
12
Python OUTPUT===
S min_indv = null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double max_ratio = Double.NEGATIVE_INFINITY;
red_line===
max_ratio
start_offset===
9
end_offset===
18
Python OUTPUT===
double max_ratio = Double.NEGATIVE_INFINITY;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
double min_ASF = Double.MAX_VALUE;
red_line===
min_ASF
start_offset===
10
end_offset===
17
Python OUTPUT===
double min_ASF = Double.MAX_VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"childGridNum_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int childGridNum_;
red_line===
childGridNum_
start_offset===
16
end_offset===
29
Python OUTPUT===
protected int childGridNum_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"k_\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
protected int k_;
red_line===
k_
start_offset===
16
end_offset===
18
Python OUTPUT===
protected int k_;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
evaluator = new SequentialSolutionListEvaluator<DoubleSolution>() ;
red_line===
<DoubleSolution>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> < DoubleSolution > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private SelectionOperator<List<S>, S> defaultSelectionOperator = new BinaryTournamentSelection<S>() ;
red_line===
<S>
start_offset===
96
end_offset===
99
Python OUTPUT===
<> < S > , S > defaultSelectionOperator = new BinaryTournamentSelection < S > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Creating " + rDirectoryName + " directory");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Creating " + rDirectoryName + " directory"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Iteration: \" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
red_line===
"Iteration: "
start_offset===
42
end_offset===
55
Python OUTPUT===
this.chart.getFrontChart().setTitle("Iteration: " + this.iteration);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
selection = new BinaryTournamentSelection<DoubleSolution>(new RankingAndCrowdingDistanceComparator<DoubleSolution>());
red_line===
<DoubleSolution>
start_offset===
45
end_offset===
61
Python OUTPUT===
<> < DoubleSolution > ( new RankingAndCrowdingDistanceComparator < DoubleSolution > ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
this(new OverallConstraintViolationComparator<S>());
red_line===
<S>
start_offset===
49
end_offset===
52
Python OUTPUT===
<> < S > ( ) ) ;
isFixed===
true
==================
