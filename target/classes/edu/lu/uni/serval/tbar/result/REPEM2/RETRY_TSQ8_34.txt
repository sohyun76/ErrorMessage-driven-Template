RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"logger\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private final Logger logger = LoggerFactory.getLogger(getClass());
red_line===
logger
start_offset===
22
end_offset===
28
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final ConcurrentLinkedQueue<ApplicationEvent> deferredEvents = new ConcurrentLinkedQueue<ApplicationEvent>();
red_line===
<ApplicationEvent>
start_offset===
97
end_offset===
115
Python OUTPUT===
<> ApplicationEvent > deferredEvents = new ConcurrentLinkedQueue < ApplicationEvent > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"globalNacosProperties\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Properties globalNacosProperties;
red_line===
globalNacosProperties
start_offset===
20
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
valueList = new ArrayList<V>();
red_line===
<V>
start_offset===
28
end_offset===
31
Python OUTPUT===
<> < V > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"bean\".
scn.ruleId===
1854
scn.suspCodeStr===
final Object bean = nacosValueTarget.bean;
red_line===
= nacosValueTarget.bean
start_offset===
20
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SINGLETON\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static volatile CacheableEventPublishingNacosServiceFactory SINGLETON = new CacheableEventPublishingNacosServiceFactory();
red_line===
SINGLETON
start_offset===
69
end_offset===
78
Python OUTPUT===
private static volatile CacheableEventPublishingNacosServiceFactory SINGLETON = new CacheableEventPublishingNacosServiceFactory();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"lastName\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String lastName = prefixName.substring(lastIndex);
red_line===
lastName
start_offset===
11
end_offset===
19
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ESCAPES\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final String[] ESCAPES = { "trnf", "\t\r\n\f" };
red_line===
ESCAPES
start_offset===
26
end_offset===
33
Python OUTPUT===
private final String[] ESCAPES = { "trnf", "\t\r\n\f" };
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> result = new LinkedHashMap<String, Object>();
red_line===
<String, Object>
start_offset===
50
end_offset===
66
Python OUTPUT===
<> = new LinkedHashMap < String , Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"DEFAULT_CONFIG_PARSE_MAP\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Map<String, ConfigParse> DEFAULT_CONFIG_PARSE_MAP = new HashMap(8);
red_line===
DEFAULT_CONFIG_PARSE_MAP
start_offset===
41
end_offset===
65
Python OUTPUT===
private static Map<String, ConfigParse> DEFAULT_CONFIG_PARSE_MAP = new HashMap(8);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new LinkedHashMap<String, Object>();
red_line===
<String, Object>
start_offset===
27
end_offset===
43
Python OUTPUT===
<> > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private static final Tuple empty = new Tuple();
red_line===
Tuple
start_offset===
22
end_offset===
27
Python OUTPUT===
private static final Tuple empty = new Tuple();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final List<Object> records = new LinkedList<Object>();
red_line===
<Object>
start_offset===
45
end_offset===
53
Python OUTPUT===
<> > records = new LinkedList < Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Map<String, Object>> annotationAttributesList = new LinkedList<Map<String, Object>>();
red_line===
<Map<String, Object>>
start_offset===
69
end_offset===
90
Python OUTPUT===
<> new LinkedList < Map < String , Object >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
NacosPropertySourcePostProcessor.beanFactory = beanFactory;
red_line===
beanFactory
start_offset===
35
end_offset===
46
Python OUTPUT===
final NacosPropertySourcePostProcessor . beanFactory = beanFactory ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"length\".
scn.ruleId===
1854
scn.suspCodeStr===
int length = elementAttributes.getLength();
red_line===
= elementAttributes.getLength()
start_offset===
13
end_offset===
44
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"elementAttributes\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
NamedNodeMap elementAttributes = element.getAttributes();
red_line===
elementAttributes
start_offset===
15
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"key\".
scn.ruleId===
1854
scn.suspCodeStr===
String key = identify(properties);
red_line===
= identify(properties)
start_offset===
13
end_offset===
35
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, List<Listener>> listenersCache = new LinkedHashMap<String, List<Listener>>();
red_line===
<String, List<Listener>>
start_offset===
71
end_offset===
95
Python OUTPUT===
<> = new LinkedHashMap < String , List < Listener >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
listeners = new LinkedList<Listener>();
red_line===
<Listener>
start_offset===
29
end_offset===
39
Python OUTPUT===
<> < Listener > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"onMessage: \" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
System.out.println("onMessage: " + config);
red_line===
"onMessage: "
start_offset===
21
end_offset===
34
Python OUTPUT===
System.out.println("onMessage: " + config);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"propertySource\".
scn.ruleId===
1854
scn.suspCodeStr===
PropertySource propertySource = environment.getPropertySources().get("before");
red_line===
= environment.getPropertySources().get("before")
start_offset===
32
end_offset===
80
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(yamlMap);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(yamlMap); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.printf("[%s] %s \n", Thread.currentThread().getName(), config);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.printf("[%s] %s \n", Thread.currentThread().getName(), config); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> map = new HashMap<String, Object>();
red_line===
<String, Object>
start_offset===
39
end_offset===
55
Python OUTPUT===
<> = new HashMap < String , Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(properties);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(properties); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(p);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(p); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new LinkedHashMap<String, Object>();
red_line===
<String, Object>
start_offset===
27
end_offset===
43
Python OUTPUT===
<> > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"p\".
scn.ruleId===
1854
scn.suspCodeStr===
Map<String, Object> p = parse.parse(properties);
red_line===
= parse.parse(properties)
start_offset===
24
end_offset===
49
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"p\".
scn.ruleId===
1854
scn.suspCodeStr===
Map<String, Object> p = parse.parse(yaml);
red_line===
= parse.parse(yaml)
start_offset===
24
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<String> keySet = new HashSet<String>(longPollingMap.keySet());
red_line===
<String>
start_offset===
34
end_offset===
42
Python OUTPUT===
<> keySet = new HashSet < String > ( longPollingMap.keySet ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> changeGroupIdList = new ArrayList<String>();
red_line===
<String>
start_offset===
48
end_offset===
56
Python OUTPUT===
<> changeGroupIdList = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"environment\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Environment environment;
red_line===
environment
start_offset===
21
end_offset===
32
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"applicationEventPublisher\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private ApplicationEventPublisher applicationEventPublisher;
red_line===
applicationEventPublisher
start_offset===
35
end_offset===
60
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"executor\" which hides the field declared at line 51.
scn.ruleId===
1117
scn.suspCodeStr===
Executor executor = delegate.getExecutor();
red_line===
executor
start_offset===
11
end_offset===
19
Python OUTPUT===
Executor executor = delegate.getExecutor();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This accessibility bypass should be removed.
scn.ruleId===
3011
scn.suspCodeStr===
field.set(bean, convertIfNecessary(field, propertyValue));
red_line===
field.set(bean, convertIfNecessary(field, propertyValue))
start_offset===
3
end_offset===
60
Python OUTPUT===
field.set(bean, convertIfNecessary(field, propertyValue));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, List<NacosValueTarget>> placeholderNacosValueTargetMap = new HashMap<String, List<NacosValueTarget>>();
red_line===
<String, List<NacosValueTarget>>
start_offset===
89
end_offset===
121
Python OUTPUT===
<> = new HashMap < String , List < NacosValueTarget >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"properties\" which hides the field declared at line 57.
scn.ruleId===
1117
scn.suspCodeStr===
Map<String, Object> properties = toProperties(dataId, groupId, config, type);
red_line===
properties
start_offset===
22
end_offset===
32
Python OUTPUT===
Map<String, Object> properties = toProperties(dataId, groupId, config, type);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"applicationContext\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private final ConfigurableApplicationContext applicationContext;
red_line===
applicationContext
start_offset===
46
end_offset===
64
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"globalNacosProperties\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private Properties globalNacosProperties;
red_line===
globalNacosProperties
start_offset===
20
end_offset===
41
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"nacosServiceFactory\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private NacosServiceFactory nacosServiceFactory;
red_line===
nacosServiceFactory
start_offset===
29
end_offset===
48
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final LinkedList<DeferServiceHolder> deferServiceCache = new LinkedList<DeferServiceHolder>();
red_line===
<DeferServiceHolder>
start_offset===
80
end_offset===
100
Python OUTPUT===
<> DeferServiceHolder > deferServiceCache = new LinkedList < DeferServiceHolder > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
List list = (List) data;
red_line===
List
start_offset===
3
end_offset===
7
Python OUTPUT===
List list = (List) data;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> properties = new LinkedHashMap<String, Object>(8);
red_line===
<String, Object>
start_offset===
52
end_offset===
68
Python OUTPUT===
<> = new LinkedHashMap < String , Object > ( 8 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> map = new LinkedHashMap<String, Object>(8);
red_line===
<String, Object>
start_offset===
46
end_offset===
62
Python OUTPUT===
<> = new LinkedHashMap < String , Object > ( 8 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> innerMap = new LinkedHashMap<String, Object>(1);
red_line===
<String, Object>
start_offset===
51
end_offset===
67
Python OUTPUT===
<> = new LinkedHashMap < String , Object > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Object> list = new LinkedList<Object>();
red_line===
<Object>
start_offset===
38
end_offset===
46
Python OUTPUT===
<> list = new LinkedList < Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new LinkedHashMap<String, Object>();
red_line===
<String, Object>
start_offset===
27
end_offset===
43
Python OUTPUT===
<> > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this expression which always evaluates to \"true\"
scn.ruleId===
2589
scn.suspCodeStr===
result = result && this.line == other.line;
red_line===
result
start_offset===
12
end_offset===
18
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final AtomicReference<Map<String, Object>> result = new AtomicReference<Map<String, Object>>();
red_line===
<Map<String, Object>>
start_offset===
73
end_offset===
94
Python OUTPUT===
<> = new AtomicReference < Map < String , Object >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map<String, Object> result = new LinkedHashMap();
red_line===
LinkedHashMap
start_offset===
35
end_offset===
48
Python OUTPUT===
Map<String, Object> result = new LinkedHashMap();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> result = new LinkedHashMap<String, Object>();
red_line===
<String, Object>
start_offset===
48
end_offset===
64
Python OUTPUT===
<> = new LinkedHashMap < String , Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final AtomicReference<Map<String, Object>> result = new AtomicReference<Map<String, Object>>();
red_line===
<Map<String, Object>>
start_offset===
73
end_offset===
94
Python OUTPUT===
<> = new AtomicReference < Map < String , Object >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new LinkedHashMap<String, Object>();
red_line===
<String, Object>
start_offset===
27
end_offset===
43
Python OUTPUT===
<> > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This accessibility update should be removed.
scn.ruleId===
3011
scn.suspCodeStr===
field.setAccessible(true);
red_line===
field.setAccessible(true)
start_offset===
6
end_offset===
31
Python OUTPUT===
field.setAccessible(true);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This accessibility bypass should be removed.
scn.ruleId===
3011
scn.suspCodeStr===
field.set(bean, null);
red_line===
field.set(bean, null)
start_offset===
7
end_offset===
28
Python OUTPUT===
field.set(bean, null);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Tuple<A, B> tuple = new Tuple<A, B>();
red_line===
<A, B>
start_offset===
31
end_offset===
37
Python OUTPUT===
<> = new Tuple < A , B > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> properties = new LinkedHashMap<String, Object>();
red_line===
<String, Object>
start_offset===
52
end_offset===
68
Python OUTPUT===
<> = new LinkedHashMap < String , Object > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027DEFAULT_CONFIG_TYPE_VALUE\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
return toProperties(text, "properties");
red_line===
"properties"
start_offset===
28
end_offset===
40
Python OUTPUT===
return toProperties(text, "properties");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"environment\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private final ConfigurableEnvironment environment;
red_line===
environment
start_offset===
39
end_offset===
50
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<Map<String, Object>> annotationAttributesList = new LinkedList<Map<String, Object>>();
red_line===
<Map<String, Object>>
start_offset===
69
end_offset===
90
Python OUTPUT===
<> new LinkedList < Map < String , Object >> ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private final Set<String> processedBeanNames = new LinkedHashSet<String>();
red_line===
<String>
start_offset===
65
end_offset===
73
Python OUTPUT===
<> String > processedBeanNames = new LinkedHashSet < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, Object> runtimeAttributes = new HashMap<String, Object>(4);
red_line===
<String, Object>
start_offset===
53
end_offset===
69
Python OUTPUT===
<> = new HashMap < String , Object > ( 4 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String DATA_ID = "testDataId";
red_line===
static
start_offset===
14
end_offset===
20
Python OUTPUT===
public static final String DATA_ID = " testDataId " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String GROUP_ID = "testGroupId";
red_line===
static
start_offset===
14
end_offset===
20
Python OUTPUT===
public static final String GROUP_ID = " testGroupId " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"content\" to prevent any misunderstanding/clash with field \"CONTENT\".
scn.ruleId===
1845
scn.suspCodeStr===
private String content;
red_line===
content
start_offset===
16
end_offset===
23
Python OUTPUT===
private String content;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Reorder the modifiers to comply with the Java Language Specification.
scn.ruleId===
1124
scn.suspCodeStr===
public final static String CONTENT = "Hello,World 2018";
red_line===
static
start_offset===
14
end_offset===
20
Python OUTPUT===
public static final String CONTENT = " Hello,World 2018 " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"configService\" which hides the field declared at line 59.
scn.ruleId===
1117
scn.suspCodeStr===
ConfigService configService = configServiceCache.get(key);
red_line===
configService
start_offset===
16
end_offset===
29
Python OUTPUT===
ConfigService configService = configServiceCache.get(key);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"timeout\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private long timeout;
red_line===
timeout
start_offset===
14
end_offset===
21
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, ConfigService> configServiceCache = new HashMap<String, ConfigService>();
red_line===
<String, ConfigService>
start_offset===
68
end_offset===
91
Python OUTPUT===
<> configServiceCache = new HashMap < String , ConfigService > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, String> contentCache = new LinkedHashMap<String, String>();
red_line===
<String, String>
start_offset===
61
end_offset===
77
Python OUTPUT===
<> > contentCache = new LinkedHashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List nacosFieldListValue;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
private List nacosFieldListValue;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List nacosFieldListValueAutoRefreshed;
red_line===
List
start_offset===
10
end_offset===
14
Python OUTPUT===
private List nacosFieldListValueAutoRefreshed;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
receiveOne = true;
red_line===
receiveOne
start_offset===
2
end_offset===
12
Python OUTPUT===
final receiveOne = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
content = config;
red_line===
content
start_offset===
2
end_offset===
9
Python OUTPUT===
final content = config ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("onMessage: " + config);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("onMessage: " + config); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
receiveTwo = true;
red_line===
receiveTwo
start_offset===
2
end_offset===
12
Python OUTPUT===
final receiveTwo = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("onMessage: " + config);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println("onMessage: " + config); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make the enclosing method \"static\" or remove this set.
scn.ruleId===
2696
scn.suspCodeStr===
receiveThree = true;
red_line===
receiveThree
start_offset===
2
end_offset===
14
Python OUTPUT===
final receiveThree = true ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027DATA_ID\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
System.setProperty("data-id", "app.properties");
red_line===
"app.properties"
start_offset===
32
end_offset===
48
Python OUTPUT===
System.setProperty("data-id", "app.properties");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String except = "XmlApp{students=[Student{name='lct-1', num='1006010022'}, Student{name='lct-3', num='1006010044'}, Student{name='lct-4', num='1006010055'}]}";
red_line===
except
start_offset===
22
end_offset===
28
Python OUTPUT===
private static final String except = " XmlApp{students=[Student{name='lct-1', num='1006010022'}, Student{name='lct-3', num='1006010044'}, Student{name='lct-4', num='1006010055'}]} " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"127.0.0.1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Assert.assertEquals("127.0.0.1", nacosProperties.serverAddr());
red_line===
"127.0.0.1"
start_offset===
22
end_offset===
33
Python OUTPUT===
Assert.assertEquals("127.0.0.1", nacosProperties.serverAddr());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"nacosProperties\".
scn.ruleId===
1488
scn.suspCodeStr===
NacosProperties nacosProperties = enableNacos.globalProperties();
red_line===
enableNacos.globalProperties()
start_offset===
36
end_offset===
66
Python OUTPUT===
NacosProperties nacosProperties = enableNacos.globalProperties();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(yamlMap);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(yamlMap); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"value\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Assert.assertEquals("value", config.getMap().get("key-1"));
red_line===
"value"
start_offset===
22
end_offset===
29
Python OUTPUT===
Assert.assertEquals("value", config.getMap().get("key-1"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
final AtomicReference<String> contentHolder = new AtomicReference<String>();
red_line===
<String>
start_offset===
67
end_offset===
75
Python OUTPUT===
<> > contentHolder = new AtomicReference < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(ConfigParse.class.isAssignableFrom(CustomerParse.class));
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(ConfigParse.class.isAssignableFrom(CustomerParse.class)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(p);
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(p); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(parse.parse("people:\n" + "  a: 1\n" + "  b: 1"));
red_line===
System.out
start_offset===
2
end_offset===
12
Python OUTPUT===
 System.out.println(parse.parse("people:\n" + " a: 1\n" + " b: 1")); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map properties = new HashMap();
red_line===
Map
start_offset===
2
end_offset===
5
Python OUTPUT===
Map properties = new HashMap();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my.age\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
properties.put("my.age", 18);
red_line===
"my.age"
start_offset===
17
end_offset===
25
Python OUTPUT===
properties.put("my.age", 18);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"my.name\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
properties.put("my.name", "${my.name}");
red_line===
"my.name"
start_offset===
17
end_offset===
26
Python OUTPUT===
properties.put("my.name", "${my.name}");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> config = new HashMap<String, String>(1);
red_line===
<String, String>
start_offset===
42
end_offset===
58
Python OUTPUT===
<> config = new HashMap < String , String > ( 1 ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private List list;
red_line===
List
start_offset===
9
end_offset===
13
Python OUTPUT===
private List list;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException("Why?");
red_line===
RuntimeException
start_offset===
13
end_offset===
29
Python OUTPUT===
throw new RuntimeException("Why?");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Future future;
red_line===
Future
start_offset===
9
end_offset===
15
Python OUTPUT===
private Future future;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, String> contentCache = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
55
end_offset===
71
Python OUTPUT===
<> > contentCache = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private Map<String, LongPolling> longPollingMap = new HashMap<String, LongPolling>();
red_line===
<String, LongPolling>
start_offset===
62
end_offset===
83
Python OUTPUT===
<> longPollingMap = new HashMap < String , LongPolling > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Set<String> keySet = new HashSet<String>(longPollingMap.keySet());
red_line===
<String>
start_offset===
38
end_offset===
46
Python OUTPUT===
<> keySet = new HashSet < String > ( longPollingMap.keySet ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> changeDataIdList = new ArrayList<String>();
red_line===
<String>
start_offset===
47
end_offset===
55
Python OUTPUT===
<> changeDataIdList = new ArrayList < String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
List<String> contentKeyList = new ArrayList<String>();
red_line===
<String>
start_offset===
45
end_offset===
53
Python OUTPUT===
<> contentKeyList = new ArrayList < String > ( ) ;
isFixed===
true
==================
