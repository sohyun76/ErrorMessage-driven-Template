RuleType===
CODE_SMELL
scn.errorMessage===
Return an empty array instead of null.
scn.ruleId===
1168
scn.suspCodeStr===
return null;
red_line===
null
start_offset===
19
end_offset===
23
Python OUTPUT===
return null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final List<DataItem> VALUE;
red_line===
VALUE
start_offset===
33
end_offset===
38
Python OUTPUT===
private final List<DataItem> VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ENCODED_VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final byte[] ENCODED_VALUE = new byte[] { (byte) 0xc1, 0x1a, 0x51, 0x4b, 0x67, (byte) 0xb0 };
red_line===
ENCODED_VALUE
start_offset===
25
end_offset===
38
Python OUTPUT===
private final byte[] ENCODED_VALUE = new byte[] { (byte) 0xc1, 0x1a, 0x51, 0x4b, 0x67, (byte) 0xb0 };
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Remove this call to \"equals\"; comparisons against null always return false; consider using \u0027\u003d\u003d null\u0027 to check for nullity.
scn.ruleId===
2159
scn.suspCodeStr===
assertFalse(item1.equals(null));
red_line===
equals
start_offset===
26
end_offset===
32
Python OUTPUT===
 assertFalse(item1.equals(; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ENCODED_VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final byte[] ENCODED_VALUE = new byte[] { (byte) 0xd8, 0x18, 0x45, 0x64, 0x49, 0x45, 0x54, 0x46 };
red_line===
ENCODED_VALUE
start_offset===
25
end_offset===
38
Python OUTPUT===
private final byte[] ENCODED_VALUE = new byte[] { (byte) 0xd8, 0x18, 0x45, 0x64, 0x49, 0x45, 0x54, 0x46 };
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final List<DataItem> VALUE;
red_line===
VALUE
start_offset===
33
end_offset===
38
Python OUTPUT===
private final List<DataItem> VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final List<DataItem> VALUE;
red_line===
VALUE
start_offset===
33
end_offset===
38
Python OUTPUT===
private final List<DataItem> VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"string\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
shouldEncodeAndDecode("string", new UnicodeString("hello world"));
red_line===
"string"
start_offset===
30
end_offset===
38
Python OUTPUT===
shouldEncodeAndDecode("string", new UnicodeString("hello world"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
byte bytes[] = { 0, 1, 2, 3 };
red_line===
[]
start_offset===
18
end_offset===
20
Python OUTPUT===
byte bytes[] = { 0, 1, 2, 3 };
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"message\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
CborException cborException = new CborException("message");
red_line===
"message"
start_offset===
56
end_offset===
65
Python OUTPUT===
CborException cborException = new CborException("message");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
return (float) ((s != 0 ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10)));
red_line===
-
start_offset===
58
end_offset===
59
Python OUTPUT===
 return (float) ( (s != 0 ? -1 :1) * Math.pow (2,e - 15) * (1 +f  /  Math.pow (2, 10)));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Unexpected end of stream\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new IOException("Unexpected end of stream");
red_line===
"Unexpected end of stream"
start_offset===
38
end_offset===
64
Python OUTPUT===
throw new IOException("Unexpected end of stream");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final List<DataItem> VALUE;
red_line===
VALUE
start_offset===
33
end_offset===
38
Python OUTPUT===
private final List<DataItem> VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final List<DataItem> VALUE;
red_line===
VALUE
start_offset===
33
end_offset===
38
Python OUTPUT===
private final List<DataItem> VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final List<DataItem> VALUE;
red_line===
VALUE
start_offset===
33
end_offset===
38
Python OUTPUT===
private final List<DataItem> VALUE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"ENCODED_VALUE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private final byte[] ENCODED_VALUE = new byte[] { (byte) 0xd7, 0x44, 0x01, 0x02, 0x03, 0x04 };
red_line===
ENCODED_VALUE
start_offset===
25
end_offset===
38
Python OUTPUT===
private final byte[] ENCODED_VALUE = new byte[] { (byte) 0xd7, 0x44, 0x01, 0x02, 0x03, 0x04 };
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"string\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
UnicodeString unicodeString = new UnicodeString("string");
red_line===
"string"
start_offset===
56
end_offset===
64
Python OUTPUT===
UnicodeString unicodeString = new UnicodeString("string");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this subtraction operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
maliciousEncoder.encode(Long.valueOf(Integer.MAX_VALUE - 1));
red_line===
-
start_offset===
63
end_offset===
64
Python OUTPUT===
 maliciousEncoder.encode(Long.valueOf(Integer.MAX_VALUE - 1));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
DataItem keys[] = new DataItem[3];
red_line===
[]
start_offset===
21
end_offset===
23
Python OUTPUT===
DataItem keys[] = new DataItem[3];
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
byte encodedBytes[] = encodedStream.toByteArray();
red_line===
[]
start_offset===
25
end_offset===
27
Python OUTPUT===
byte encodedBytes[] = encodedStream.toByteArray();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename field \"map\"
scn.ruleId===
1700
scn.suspCodeStr===
private final LinkedHashMap<DataItem, DataItem> map;
red_line===
map
start_offset===
52
end_offset===
55
Python OUTPUT===
private final LinkedHashMap<DataItem, DataItem> map;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Remove this useless shift
scn.ruleId===
2183
scn.suspCodeStr===
write((byte) ((7 << 5) | 25), (byte) ((bits >> 8) & 0xFF), (byte) ((bits >> 0) & 0xFF));
red_line===
>>
start_offset===
81
end_offset===
83
Python OUTPUT===
 write((byte) ((7 << 5) | 25), (byte) ((bits >> 8) & 0xFF), (byte) ((bits >> 0) &xFF)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Extract this nested ternary operation into an independent statement.
scn.ruleId===
3358
scn.suspCodeStr===
return f != 0 ? Float.NaN : (s != 0 ? -1 : 1) * Float.POSITIVE_INFINITY;
red_line===
s != 0 ? -1 : 1
start_offset===
41
end_offset===
56
Python OUTPUT===
return f != 0 ? Float.NaN : (s != 0 ? -1 : 1) * Float.POSITIVE_INFINITY;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Wrong data item type\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new CborException("Wrong data item type");
red_line===
"Wrong data item type"
start_offset===
40
end_offset===
62
Python OUTPUT===
throw new CborException("Wrong data item type");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ArrayBuilder<ArrayBuilder<T>>(this, nestedArray);
red_line===
<ArrayBuilder<T>>
start_offset===
31
end_offset===
48
Python OUTPUT===
<> >> ( this , nestedArray ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new MapBuilder<ArrayBuilder<T>>(this, nestedMap);
red_line===
<ArrayBuilder<T>>
start_offset===
29
end_offset===
46
Python OUTPUT===
<> >> ( this , nestedMap ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new MapBuilder<ArrayBuilder<T>>(this, nestedMap);
red_line===
<ArrayBuilder<T>>
start_offset===
29
end_offset===
46
Python OUTPUT===
<> >> ( this , nestedMap ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
return new ArrayBuilder<ArrayBuilder<T>>(this, nestedArray);
red_line===
<ArrayBuilder<T>>
start_offset===
31
end_offset===
48
Python OUTPUT===
<> >> ( this , nestedArray ) ;
isFixed===
true
==================
