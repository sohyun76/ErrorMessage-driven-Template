RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOGGER\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Logger LOGGER = LoggerFactory.getLogger(ThriftLoggerFactory.class);
red_line===
LOGGER
start_offset===
24
end_offset===
30
Python OUTPUT===
private static Logger LOGGER = LoggerFactory.getLogger(ThriftLoggerFactory.class);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"HOST_NAME\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
protected static String HOST_NAME = "n/a";
red_line===
HOST_NAME
start_offset===
26
end_offset===
35
Python OUTPUT===
protected static String HOST_NAME = "n/a";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make thriftClazz a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Class<?> thriftClazz;
red_line===
thriftClazz
start_offset===
18
end_offset===
29
Python OUTPUT===
public static final Class < ? > thriftClazz ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make auditSamplingRate a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public double auditSamplingRate = 1.0;
red_line===
auditSamplingRate
start_offset===
16
end_offset===
33
Python OUTPUT===
public static final double auditSamplingRate = 1.0 ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
Map m = (Map) thriftClazz.getDeclaredField("metaDataMap").get(null);
red_line===
Map
start_offset===
6
end_offset===
9
Python OUTPUT===
Map m = (Map) thriftClazz.getDeclaredField("metaDataMap").get(null);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Provide the parametrized type for this generic.
scn.ruleId===
3740
scn.suspCodeStr===
private Random random = new Random();
red_line===
ate
start_offset===
6
end_offset===
9
Python OUTPUT===
private Random random = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"codec\".
scn.ruleId===
1854
scn.suspCodeStr===
ThriftCodec codec = getInstance();
red_line===
= getInstance()
start_offset===
22
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"obj\".
scn.ruleId===
1488
scn.suspCodeStr===
T obj = thriftClass.newInstance();
red_line===
thriftClass.newInstance()
start_offset===
14
end_offset===
39
Python OUTPUT===
T obj = thriftClass.newInstance();
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
file.delete();
red_line===
delete
start_offset===
11
end_offset===
17
Python OUTPUT===
file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
file.delete();
red_line===
delete
start_offset===
11
end_offset===
17
Python OUTPUT===
file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
e.printStackTrace();
red_line===
rintSt
start_offset===
11
end_offset===
17
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
e.printStackTrace();
red_line===
ntStac
start_offset===
11
end_offset===
17
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
e.printStackTrace();
red_line===
ntStac
start_offset===
11
end_offset===
17
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Save and re-use this \"Random\".
scn.ruleId===
2119
scn.suspCodeStr===
Random random = new Random();
red_line===
Random
start_offset===
24
end_offset===
30
Python OUTPUT===
Random random = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add the missing @deprecated Javadoc tag.
scn.ruleId===
1123
scn.suspCodeStr===
public static final String BROKER_SERVERSET = "broker.serverset";
red_line===
BROKER_SERVERSET
start_offset===
29
end_offset===
45
Python OUTPUT===
public static final String BROKER_SERVERSET = "broker.serverset";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
String threadName = clusterSig.replaceAll("/", "-");
red_line===
replaceAll
start_offset===
41
end_offset===
51
Python OUTPUT===
String threadName = clusterSig.replaceAll ( " / " , " - " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static heartbeatGenerator\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static HeartbeatGenerator heartbeatGenerator;
red_line===
heartbeatGenerator
start_offset===
35
end_offset===
53
Python OUTPUT===
public static final HeartbeatGenerator heartbeatGenerator ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"monitorClass\".
scn.ruleId===
1854
scn.suspCodeStr===
Class<?> monitorClass = Class.forName(monitorClassName);
red_line===
= Class.forName(monitorClassName)
start_offset===
26
end_offset===
59
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make SINGER_VERSION a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String SINGER_VERSION;
red_line===
SINGER_VERSION
start_offset===
23
end_offset===
37
Python OUTPUT===
public static final String SINGER_VERSION ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
18
end_offset===
34
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
File podParent = new File(podLogDirectory + "/" + podUid + "/");
red_line===
"/"
start_offset===
67
end_offset===
70
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
Iterator<Map.Entry<SingerLog, String>> iterator = singerLogsWithoutDir.entrySet().iterator();
red_line===
Entry
start_offset===
21
end_offset===
26
Python OUTPUT===
Iterator<Map.Entry<SingerLog, String>> iterator = singerLogsWithoutDir.entrySet().iterator();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace charset name argument with StandardCharsets.UTF_8
scn.ruleId===
4719
scn.suspCodeStr===
return new String(buf, "UTF-8");
red_line===
"UTF-8"
start_offset===
29
end_offset===
36
Python OUTPUT===
 return new String(buf, "UTF-8"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"method not supported\" 14 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new TException("method not supported");
red_line===
"method not supported"
start_offset===
25
end_offset===
47
Python OUTPUT===
throw new TException("method not supported");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
file.delete();
red_line===
delete
start_offset===
13
end_offset===
19
Python OUTPUT===
file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Reader closed.\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new LogFileReaderException("Reader closed.");
red_line===
"Reader closed."
start_offset===
39
end_offset===
55
Python OUTPUT===
throw new LogFileReaderException("Reader closed.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Reader closed.\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new LogStreamReaderException("Reader closed.");
red_line===
"Reader closed."
start_offset===
41
end_offset===
57
Python OUTPUT===
throw new LogStreamReaderException("Reader closed.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Either remove or fill this block of code.
scn.ruleId===
108
scn.suspCodeStr===
Preconditions.checkNotNull(singerPropertiesFile);
red_line===
n
start_offset===
11
end_offset===
12
Python OUTPUT===
Preconditions.checkNotNull(singerPropertiesFile);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static DEFAULT_SERVERSET_DIR\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static String DEFAULT_SERVERSET_DIR = "/var/serverset";
red_line===
DEFAULT_SERVERSET_DIR
start_offset===
23
end_offset===
44
Python OUTPUT===
public static final String DEFAULT_SERVERSET_DIR = " /var/serverset " ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"FileInputStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
SHADOW_SERVERSET_MAPPING.load(new FileInputStream(new File(singerConfig.getShadowModeServersetMappingFile())));
red_line===
new FileInputStream(new File(singerConfig.getShadowModeServersetMappingFile()))
start_offset===
40
end_offset===
119
Python OUTPUT===
SHADOW_SERVERSET_MAPPING.load(new FileInputStream(new File(singerConfig.getShadowModeServersetMappingFile())));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"host\u003d\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
OpenTsdbMetricConverter.incr(SingerMetrics.LEADER_INFO_EXCEPTION, 1, "host=" + KafkaWriter.HOSTNAME);
red_line===
"host="
start_offset===
75
end_offset===
82
Python OUTPUT===
OpenTsdbMetricConverter.incr(SingerMetrics.LEADER_INFO_EXCEPTION, 1, "host=" + KafkaWriter.HOSTNAME);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unnecessary cast to \"byte[]\".
scn.ruleId===
1905
scn.suspCodeStr===
String strKey = new String((byte[]) key);
red_line===
byte[]
start_offset===
32
end_offset===
38
Python OUTPUT===
 String strKey = new String((bytey); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
String dump(LogMessage logMessage, boolean noTimestamp, String thriftSchema) throws Exception;
red_line===
Exception
start_offset===
88
end_offset===
97
Python OUTPUT===
String dump(LogMessage logMessage, boolean noTimestamp, String thriftSchema) throws Exception;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"PrintStream\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
outputPrintStream = new PrintStream(output);
red_line===
new PrintStream(output)
start_offset===
26
end_offset===
49
Python OUTPUT===
outputPrintStream = new PrintStream(output);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
continue;
red_line===
continue;
start_offset===
10
end_offset===
19
Python OUTPUT===
 continue;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("kind = " + kind + ": " + event.context());
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("kind = " + kind + ": " + event.context()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Events from normal files : " + numNormalFileEvents);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Events from normal files : " + numNormalFileEvents); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"kind\".
scn.ruleId===
1854
scn.suspCodeStr===
WatchEvent.Kind<?> kind = event.kind();
red_line===
= event.kind()
start_offset===
32
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"createNewFile\".
scn.ruleId===
899
scn.suspCodeStr===
file.createNewFile();
red_line===
file.createNewFile();
start_offset===
12
end_offset===
33
Python OUTPUT===
file.createNewFile();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"createNewFile\".
scn.ruleId===
899
scn.suspCodeStr===
File file = new File("/tmp/cmd.txt");
red_line===
File file = new File(
start_offset===
12
end_offset===
33
Python OUTPUT===
File file = new File("/tmp/cmd.txt");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Supplied path is not a directory:" + configDirectory);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Supplied path is not a directory:" + configDirectory); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
  e.printS
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(SingerSettings.getOrCreateFileSystemMonitor("").toString());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(SingerSettings.getOrCreateFileSystemMonitor("").toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
rintStackT
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"line\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
String line;
red_line===
line
start_offset===
11
end_offset===
15
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Use the original value instead.
scn.ruleId===
2676
scn.suspCodeStr===
long initialDelay = Math.abs(random.nextLong()) % processingIntervalInMillis;
red_line===
random.nextLong()
start_offset===
37
end_offset===
54
Python OUTPUT===
long initialDelay = Math.abs(random.nextLong()) % processingIntervalInMillis;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"BufferedReader\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
BufferedReader reader = new BufferedReader(new InputStreamReader(configObj.getObjectContent()));
red_line===
new BufferedReader(new InputStreamReader(configObj.getObjectContent()))
start_offset===
28
end_offset===
99
Python OUTPUT===
BufferedReader reader = new BufferedReader(new InputStreamReader(configObj.getObjectContent()));
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Fully initialize \"instance\" before assigning it.
scn.ruleId===
3064
scn.suspCodeStr===
instance = new Decider();
red_line===
instance = new Decider()
start_offset===
10
end_offset===
34
Python OUTPUT===
instance = new Decider();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment; \"isStopped\" already holds the assigned value along all execution paths.
scn.ruleId===
4165
scn.suspCodeStr===
this.isStopped = true;
red_line===
this.isStopped = true
start_offset===
4
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment; \"isStopped\" already holds the assigned value along all execution paths.
scn.ruleId===
4165
scn.suspCodeStr===
partition = ThreadLocalRandom.current().nextInt(partitionCount);
red_line===
partition = ThreadLoc
start_offset===
4
end_offset===
25
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
26
end_offset===
42
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(value, new String(lm.getMessage()));
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 assertEquals(value, new Str.getMessage())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("ThriftReader:" + ts / 1000 + "us");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("ThriftReader:" + ts / 1000 + "us"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"ts\".
scn.ruleId===
1854
scn.suspCodeStr===
ts = System.nanoTime() - ts;
red_line===
= System.nanoTime() - ts
start_offset===
7
end_offset===
31
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(value, new String(lm.getMessage()));
red_line===
String
start_offset===
30
end_offset===
36
Python OUTPUT===
 assertEquals(value, new StrinetMessage())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"abcdefdfsfadsfrwqerfwerwe\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String value = "abcdefdfsfadsfrwqerfwerwe";
red_line===
"abcdefdfsfadsfrwqerfwerwe"
start_offset===
19
end_offset===
46
Python OUTPUT===
String value = "abcdefdfsfadsfrwqerfwerwe";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
value += value;
red_line===
value
start_offset===
6
end_offset===
11
Python OUTPUT===
value += value;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int COUNT = 1000;
red_line===
COUNT
start_offset===
8
end_offset===
13
Python OUTPUT===
int COUNT = 1000;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Waiting for file system events to be noticed by FSM");
red_line===
System.err
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.err.println("Waiting for file system events to be noticed by FSM"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"thrift2.log\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String path = FilenameUtils.concat(getTempPath(), "thrift2.log");
red_line===
"thrift2.log"
start_offset===
54
end_offset===
67
Python OUTPUT===
String path = FilenameUtils.concat(getTempPath(), "thrift2.log");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
logFile.delete();
red_line===
delete
start_offset===
14
end_offset===
20
Python OUTPUT===
logFile.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
File logFile = File.createTempFile("temp-thrift-log", ".tmp");
red_line===
le = F
start_offset===
14
end_offset===
20
Python OUTPUT===
File logFile = File.createTempFile("temp-thrift-log", ".tmp");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"logMessage\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
LogMessage logMessage = thriftReader.read();
red_line===
logMessage
start_offset===
19
end_offset===
29
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"logMessage\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
File logFile = new File("/tmp/thrift.log");
red_line===
new File("
start_offset===
19
end_offset===
29
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"logMessage\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
LogMessage logMessage = thriftReader.read();
red_line===
logMessage
start_offset===
19
end_offset===
29
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"dataWritten\".
scn.ruleId===
1854
scn.suspCodeStr===
List<String> dataWritten = generateSampleMessagesToFile(path);
red_line===
= generateSampleMessagesToFile(path)
start_offset===
29
end_offset===
65
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"log\".
scn.ruleId===
1854
scn.suspCodeStr===
LogMessageAndPosition log = reader.readLogMessageAndPosition();
red_line===
= reader.readLogMessageAndPosition()
start_offset===
32
end_offset===
68
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerTestBaseDir = "/tmp/singer_e2e_test";
red_line===
singerTestBaseDir
start_offset===
30
end_offset===
47
Python OUTPUT===
private static final String singerTestBaseDir = "/tmp/singer_e2e_test";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test failed! :(");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Test failed! :("); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(". waiting seconds : " + i);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(". waiting seconds : " + i); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String msg = new String(record.value());
red_line===
String
start_offset===
27
end_offset===
33
Python OUTPUT===
 String msg = new (record.value());
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
File outputDir = new File(singerDataDir);
red_line===
le(sin
start_offset===
27
end_offset===
33
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(msg);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(msg); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
intStackTr
start_offset===
10
end_offset===
20
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"thread\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Thread  thread = null;
red_line===
thread
start_offset===
18
end_offset===
24
Python OUTPUT===
 private Thread th null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"thread\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
e.printStackTrace();
red_line===
Trace(
start_offset===
18
end_offset===
24
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
red_line===
singerConfigConfDir
start_offset===
30
end_offset===
49
Python OUTPUT===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"p90Index\".
scn.ruleId===
1854
scn.suspCodeStr===
int p90Index = latencyCounts.size() * 9 /10;
red_line===
= latencyCounts.size() * 9 /10
start_offset===
17
end_offset===
47
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"p99Index\".
scn.ruleId===
1854
scn.suspCodeStr===
int p99Index = latencyCounts.size() * 99 / 100;
red_line===
= latencyCounts.size() * 99 / 100
start_offset===
17
end_offset===
50
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"hostName\".
scn.ruleId===
1854
scn.suspCodeStr===
String hostName = SingerUtils.getHostname();
red_line===
= SingerUtils.getHostname()
start_offset===
20
end_offset===
47
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"p50Index\".
scn.ruleId===
1854
scn.suspCodeStr===
int p50Index = latencyCounts.size() / 2;
red_line===
= latencyCounts.size() / 2
start_offset===
17
end_offset===
43
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing Singer logging with auditing: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing Singer logging with auditing: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"thrift.log\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String logFilePath = FilenameUtils.concat(getTempPath(), "thrift.log");
red_line===
"thrift.log"
start_offset===
61
end_offset===
73
Python OUTPUT===
String logFilePath = FilenameUtils.concat(getTempPath(), "thrift.log");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
8
end_offset===
16
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"statsPusherClass\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
map.put("statsPusherClass", "com.pinterest.singer.monitor.DefaultLogMonitor");
red_line===
"statsPusherClass"
start_offset===
12
end_offset===
30
Python OUTPUT===
map.put("statsPusherClass", "com.pinterest.singer.monitor.DefaultLogMonitor");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(singerCmd);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(singerCmd); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
sortedFiles.get(0).delete();
red_line===
delete
start_offset===
25
end_offset===
31
Python OUTPUT===
sortedFiles.get(0).delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(toMonitor.getLogFilePaths().size());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(toMonitor.getLogFilePaths().size()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"created2\".
scn.ruleId===
1854
scn.suspCodeStr===
File[] created2 = createTestLogStreamFiles(testDir2, "2ndTest.tmp", NUM_FILES_2);
red_line===
= createTestLogStreamFiles(testDir2, "2ndTest.tmp", NUM_FILES_2)
start_offset===
20
end_offset===
84
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"delete\".
scn.ruleId===
899
scn.suspCodeStr===
created[i].delete();
red_line===
created[i].delete();
start_offset===
6
end_offset===
26
Python OUTPUT===
created[i].delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
created[i].delete();
red_line===
delete
start_offset===
17
end_offset===
23
Python OUTPUT===
created[i].delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test.tmp\" 8 times.
scn.ruleId===
1192
scn.suspCodeStr===
File[] created = createTestLogStreamFiles(testDir, "test.tmp", NUM_FILES);
red_line===
"test.tmp"
start_offset===
55
end_offset===
65
Python OUTPUT===
File[] created = createTestLogStreamFiles(testDir, "test.tmp", NUM_FILES);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"created\".
scn.ruleId===
1854
scn.suspCodeStr===
File[] created = createTestLogStreamFiles(testDir, "test.tmp", NUM_FILES);
red_line===
= createTestLogStreamFiles(testDir, "test.tmp", NUM_FILES)
start_offset===
19
end_offset===
77
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES = 10;
red_line===
NUM_FILES
start_offset===
8
end_offset===
17
Python OUTPUT===
int NUM_FILES = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
Map<String, String> override = new HashMap<String, String>();
red_line===
<String, String>
start_offset===
46
end_offset===
62
Python OUTPUT===
<> override = new HashMap < String , String > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/var/log\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertEquals("/var/log", path);
red_line===
"/var/log"
start_offset===
17
end_offset===
27
Python OUTPUT===
assertEquals("/var/log", path);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"singer.threadPoolSize\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
put("singer.threadPoolSize", "8");
red_line===
"singer.threadPoolSize"
start_offset===
14
end_offset===
37
Python OUTPUT===
put("singer.threadPoolSize", "8");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"kubeConfig\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private KubeConfig kubeConfig;
red_line===
kubeConfig
start_offset===
23
end_offset===
33
Python OUTPUT===
 private KubeConfig kub
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"createNewFile\".
scn.ruleId===
899
scn.suspCodeStr===
new File(podLogPath + "/a1223-1111-2222-3333/var/log/access.log").createNewFile();
red_line===
new File(podLogPath + "/a1223-1111-2222-3333/var/log/access.log").createNewFile();
start_offset===
8
end_offset===
90
Python OUTPUT===
new File(podLogPath + "/a1223-1111-2222-3333/var/log/access.log").createNewFile();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
file.delete();
red_line===
delete
start_offset===
25
end_offset===
31
Python OUTPUT===
file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/pods\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
server.removeContext("/pods");
red_line===
"/pods"
start_offset===
33
end_offset===
40
Python OUTPUT===
server.removeContext("/pods");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/pods\" 5 times.
scn.ruleId===
1192
scn.suspCodeStr===
SingerStatus status = new SingerStatus(new Random().nextLong());
red_line===
 Singer
start_offset===
33
end_offset===
40
Python OUTPUT===
SingerStatus status = new SingerStatus(new Random().nextLong());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
ProducerRecord<byte[], byte[]> record = new ProducerRecord<byte[], byte[]>("topicx", partitionId, logMessage.getKey(), logMessage.getMessage());
red_line===
<byte[], byte[]>
start_offset===
66
end_offset===
82
Python OUTPUT===
<> record = new ProducerRecord < byte [ ] , byte [ ] > ( " topicx " , partitionId , logMessage.getKey ( ) , logMessage.getMessage ( ) ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"topicx\" 79 times.
scn.ruleId===
1192
scn.suspCodeStr===
KafkaWriter writer = new KafkaWriter(config, partitioner, "topicx", false, Executors.newCachedThreadPool());
red_line===
"topicx"
start_offset===
62
end_offset===
70
Python OUTPUT===
KafkaWriter writer = new KafkaWriter(config, partitioner, "topicx", false, Executors.newCachedThreadPool());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
ProducerRecord<byte[], byte[]> record = writerOutput.get(j);
red_line===
record
start_offset===
39
end_offset===
45
Python OUTPUT===
ProducerRecord<byte[], byte[]> record = writerOutput.get(j);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test.tmp\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
LogStream logStream = new LogStream(singerLog, "test.tmp");
red_line===
"test.tmp"
start_offset===
51
end_offset===
61
Python OUTPUT===
LogStream logStream = new LogStream(singerLog, "test.tmp");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/a/b/c\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
SingerLog singerLog = new SingerLog(createSingerLogConfig("test2", "/a/b/c"));
red_line===
"/a/b/c"
start_offset===
71
end_offset===
79
Python OUTPUT===
SingerLog singerLog = new SingerLog(createSingerLogConfig("test2", "/a/b/c"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
assertEquals(Arrays.asList(new Integer[] { 0, 1, 3, 2 }), filteredPartitions);
red_line===
new Integer[] { 0, 1, 3, 2 }
start_offset===
31
end_offset===
59
Python OUTPUT===
 assertEquals(Arrays.asList(newfilteredPartitions); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"Integer\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
Integer intKey = new Integer(1);
red_line===
Integer
start_offset===
25
end_offset===
32
Python OUTPUT===
 Integer intKey = new (1);
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Waiting for file system events to be noticed by FileSystemMonitor");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Waiting for file system events to be noticed by FileSystemMonitor"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
e.printSta
start_offset===
6
end_offset===
16
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"thrift.log\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String logStreamHeadFileName = "thrift.log";
red_line===
"thrift.log"
start_offset===
35
end_offset===
47
Python OUTPUT===
String logStreamHeadFileName = "thrift.log";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static FILE_EVENT_WAIT_TIME_MS\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static long FILE_EVENT_WAIT_TIME_MS = isMac() ? 3000 : 200;
red_line===
FILE_EVENT_WAIT_TIME_MS
start_offset===
21
end_offset===
44
Python OUTPUT===
public static final long FILE_EVENT_WAIT_TIME_MS = isMac ( ) ? 3000 : 200 ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"delete\".
scn.ruleId===
899
scn.suspCodeStr===
f.delete();
red_line===
f.delete();
start_offset===
6
end_offset===
17
Python OUTPUT===
f.delete();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"BufferedWriter\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
BufferedWriter out = new BufferedWriter(new FileWriter(properties));
red_line===
new BufferedWriter(new FileWriter(properties))
start_offset===
25
end_offset===
71
Python OUTPUT===
BufferedWriter out = new BufferedWriter(new FileWriter(properties));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"value\".
scn.ruleId===
1854
scn.suspCodeStr===
String value = entry.getValue();
red_line===
= entry.getValue()
start_offset===
19
end_offset===
37
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"key\".
scn.ruleId===
1854
scn.suspCodeStr===
String key = entry.getKey();
red_line===
= entry.getKey()
start_offset===
17
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"key\".
scn.ruleId===
1854
scn.suspCodeStr===
int index = ThreadLocalRandom.current().nextInt(partitionInfoList.size());
red_line===
 = ThreadLocalRa
start_offset===
17
end_offset===
33
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(THREAD_SLEEP_IN_SECONDS * 1000);
red_line===
*
start_offset===
45
end_offset===
46
Python OUTPUT===
 Thread.sleep(THREAD_SLEEP_IN_SECONDS * 1000);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this final field static too.
scn.ruleId===
1170
scn.suspCodeStr===
private final String KAFKA_SENDER_NAME = "AuditEventKafkaSender";
red_line===
KAFKA_SENDER_NAME
start_offset===
23
end_offset===
40
Python OUTPUT===
private static final String KAFKA_SENDER_NAME = " AuditEventKafkaSender " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static SERVERSET_DIR\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static String SERVERSET_DIR = "/var/serverset";
red_line===
SERVERSET_DIR
start_offset===
23
end_offset===
36
Python OUTPUT===
public static final String SERVERSET_DIR = " /var/serverset " ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this \"Map.get()\" and condition with a call to \"Map.computeIfAbsent()\".
scn.ruleId===
3824
scn.suspCodeStr===
ConfigFileInfo configFileInfo = watchedFileMap.get(filePath);
red_line===
watchedFileMap.get(filePath)
start_offset===
36
end_offset===
64
Python OUTPUT===
ConfigFileInfo configFileInfo = watchedFileMap.get ( filePath ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"restartTimeLimit\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
private int restartTimeLimit = RESTART_WAIT_MAX_DELAY;
red_line===
restartTimeLimit
start_offset===
14
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"restartTimeLimit\" private field.
scn.ruleId===
1068
scn.suspCodeStr===
Thread.sleep(ThreadLocalRandom.current().nextInt(restartTimeLimit));
red_line===
ad.sleep(ThreadL
start_offset===
14
end_offset===
30
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"producer\".
scn.ruleId===
1488
scn.suspCodeStr===
KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(properties);
red_line===
new KafkaProducer<>(properties)
start_offset===
45
end_offset===
76
Python OUTPUT===
KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(properties);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();
red_line===
<LogMessage>
start_offset===
70
end_offset===
82
Python OUTPUT===
<> appender = new RollingFileAppender < LogMessage > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Logger LOG = LoggerFactory.getLogger(AuditableLogbackThriftLoggerFactory.class);
red_line===
LOG
start_offset===
24
end_offset===
27
Python OUTPUT===
private static Logger LOG = LoggerFactory.getLogger(AuditableLogbackThriftLoggerFactory.class);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"THRIFT_LOGGER_FACTORY_INSTANCE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static ThriftLoggerFactoryInterface THRIFT_LOGGER_FACTORY_INSTANCE;
red_line===
THRIFT_LOGGER_FACTORY_INSTANCE
start_offset===
46
end_offset===
76
Python OUTPUT===
private static ThriftLoggerFactoryInterface THRIFT_LOGGER_FACTORY_INSTANCE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make enableLoggingAudit a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean enableLoggingAudit = false;
red_line===
enableLoggingAudit
start_offset===
17
end_offset===
35
Python OUTPUT===
public static final boolean enableLoggingAudit = false ;
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Replace the call to \"Thread.sleep(...)\" with a call to \"wait(...)\".
scn.ruleId===
2276
scn.suspCodeStr===
Thread.sleep(sleepInSecBeforeCloseLoggers * 1000);
red_line===
sleep
start_offset===
15
end_offset===
20
Python OUTPUT===
Thread.sleep ( sleepInSecBeforeCloseLoggers * 1000 ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Logger LOG = LoggerFactory.getLogger(AuditableLogbackThriftLogger.class);
red_line===
LOG
start_offset===
24
end_offset===
27
Python OUTPUT===
private static Logger LOG = LoggerFactory.getLogger(AuditableLogbackThriftLogger.class);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private static List<TBase> thriftMessages = new ArrayList<TBase>();
red_line===
<TBase>
start_offset===
59
end_offset===
66
Python OUTPUT===
<> TBase > thriftMessages = new ArrayList < TBase > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace the type specification in this constructor call with the diamond operator (\"\u003c\u003e\"). (sonar.java.source not set. Assuming 7 or greater.)
scn.ruleId===
2293
scn.suspCodeStr===
private static List<byte[]> rawMessages = new ArrayList<byte[]>();
red_line===
<byte[]>
start_offset===
57
end_offset===
65
Python OUTPUT===
<> ] > rawMessages = new ArrayList < byte [ ] > ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
16
end_offset===
32
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private static volatile ThriftCodec instance;
red_line===
volatile ThriftCodec
start_offset===
17
end_offset===
37
Python OUTPUT===
private static volatile ThriftCodec instance;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Change this instance-reference to a static reference.
scn.ruleId===
2209
scn.suspCodeStr===
codec.deserializeCompact(obj, value);
red_line===
codec
start_offset===
6
end_offset===
11
Python OUTPUT===
 codec.deserializeCompact(obj, value); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this use of \"newInstance\"; it is deprecated.
scn.ruleId===
1874
scn.suspCodeStr===
T obj = thriftClass.newInstance();
red_line===
newInstance
start_offset===
26
end_offset===
37
Python OUTPUT===
 T obj = thriftClass.newIn
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"bytes\".
scn.ruleId===
1488
scn.suspCodeStr===
byte[] bytes = encoder.get().serialize(obj);
red_line===
encoder.get().serialize(obj)
start_offset===
19
end_offset===
47
Python OUTPUT===
byte[] bytes = encoder.get().serialize(obj);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"bytes\".
scn.ruleId===
1488
scn.suspCodeStr===
byte[] bytes = prefixedEncoder.get().serialize(obj);
red_line===
prefixedEncoder.get().serialize(obj)
start_offset===
19
end_offset===
55
Python OUTPUT===
byte[] bytes = prefixedEncoder.get().serialize(obj);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
file.delete();
red_line===
delete
start_offset===
11
end_offset===
17
Python OUTPUT===
file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
file.delete();
red_line===
delete
start_offset===
11
end_offset===
17
Python OUTPUT===
file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
e.printStackTrace();
red_line===
ntStac
start_offset===
11
end_offset===
17
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this unused \"der\" local variable.
scn.ruleId===
1481
scn.suspCodeStr===
TDeserializer der = new TDeserializer();
red_line===
der
start_offset===
20
end_offset===
23
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
String prefixPath = "/tmp/log";
red_line===
"/tmp/log"
start_offset===
24
end_offset===
34
Python OUTPUT===
String prefixPath = "/tmp/log";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"topic1\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
ThriftLogger l1 = ThriftLoggerFactory.getLogger(newConfig("topic1", ThriftMessage.class));
red_line===
"topic1"
start_offset===
62
end_offset===
70
Python OUTPUT===
ThriftLogger l1 = ThriftLoggerFactory.getLogger(newConfig("topic1", ThriftMessage.class));
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Replace the call to \"Thread.sleep(...)\" with a call to \"wait(...)\".
scn.ruleId===
2276
scn.suspCodeStr===
Thread.sleep(SingerSettings.getSingerConfig().getLogFileRotationTimeInMillis());
red_line===
sleep
start_offset===
19
end_offset===
24
Python OUTPUT===
Thread.sleep ( SingerSettings.getSingerConfig ( ).getLogFileRotationTimeInMillis ( ) ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this redundant jump.
scn.ruleId===
3626
scn.suspCodeStr===
return;
red_line===
return;
start_offset===
10
end_offset===
17
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"getInstance\".
scn.ruleId===
1488
scn.suspCodeStr===
Method getInstance = monitorClass.getMethod("getInstance", int.class, SingerConfig.class);
red_line===
monitorClass.getMethod("getInstance", int.class, SingerConfig.class)
start_offset===
25
end_offset===
93
Python OUTPUT===
Method getInstance = monitorClass.getMethod("getInstance", int.class, SingerConfig.class);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this \"public static directoryWatcher\" field final
scn.ruleId===
1444
scn.suspCodeStr===
public static SingerDirectoryWatcher directoryWatcher;
red_line===
directoryWatcher
start_offset===
39
end_offset===
55
Python OUTPUT===
public static final SingerDirectoryWatcher directoryWatcher ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"numLogStreams\" which hides the field declared at line 88.
scn.ruleId===
1117
scn.suspCodeStr===
Double numLogStreams = getGaugeValue(gauges, SingerMetrics.NUM_LOGSTREAMS);
red_line===
numLogStreams
start_offset===
11
end_offset===
24
Python OUTPUT===
Double numLogStreams = getGaugeValue(gauges, SingerMetrics.NUM_LOGSTREAMS);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"numStuckLogStreams\" which hides the field declared at line 89.
scn.ruleId===
1117
scn.suspCodeStr===
Double numStuckLogStreams = getGaugeValue(gauges, SingerMetrics.NUM_STUCK_LOGSTREAMS);
red_line===
numStuckLogStreams
start_offset===
11
end_offset===
29
Python OUTPUT===
Double numStuckLogStreams = getGaugeValue(gauges, SingerMetrics.NUM_STUCK_LOGSTREAMS);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use already-defined constant \u0027VERSION_KEY\u0027 instead of duplicating its value here.
scn.ruleId===
1192
scn.suspCodeStr===
versionString = properties.getProperty("version");
red_line===
"version"
start_offset===
45
end_offset===
54
Python OUTPUT===
versionString = properties.getProperty("version");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"json\".
scn.ruleId===
1488
scn.suspCodeStr===
String json = gson.toJson(kvs);
red_line===
gson.toJson(kvs)
start_offset===
18
end_offset===
34
Python OUTPUT===
String json = gson.toJson(kvs);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"logFiles\".
scn.ruleId===
1488
scn.suspCodeStr===
List<File> logFiles = ordering.sortedCopy(Arrays.asList(files));
red_line===
ordering.sortedCopy(Arrays.asList(files))
start_offset===
26
end_offset===
67
Python OUTPUT===
List<File> logFiles = ordering.sortedCopy(Arrays.asList(files));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
String fromKey = new File(podLogDirectory + "/" + podUid).toPath().normalize().toString();
red_line===
"/"
start_offset===
58
end_offset===
61
Python OUTPUT===
 String fromKey = new File(podLogDirectory + " / " + podUid)Path().normalize().toString(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Caught unexpected exception\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
LOG.error("Caught unexpected exception", e);
red_line===
"Caught unexpected exception"
start_offset===
20
end_offset===
49
Python OUTPUT===
LOG.error("Caught unexpected exception", e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"event\".
scn.ruleId===
1488
scn.suspCodeStr===
FileSystemEvent event = fileSystemEvents.take();
red_line===
fileSystemEvents.take()
start_offset===
28
end_offset===
51
Python OUTPUT===
FileSystemEvent event = fileSystemEvents.take();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
Map.Entry<SingerLog, String> entry = iterator.next();
red_line===
Entry
start_offset===
14
end_offset===
19
Python OUTPUT===
Map.Entry<SingerLog, String> entry = iterator.next();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use try-with-resources or close this \"RandomAccessFile\" in a \"finally\" clause.
scn.ruleId===
2095
scn.suspCodeStr===
RandomAccessFile raf = new RandomAccessFile(file, "r");
red_line===
new RandomAccessFile(file, "r")
start_offset===
27
end_offset===
58
Python OUTPUT===
RandomAccessFile raf = new RandomAccessFile(file, "r");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Reader closed.\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new LogFileReaderException("Reader closed.");
red_line===
"Reader closed."
start_offset===
39
end_offset===
55
Python OUTPUT===
throw new LogFileReaderException("Reader closed.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"singer.reader.exception.unexpected\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Stats.incr("singer.reader.exception.unexpected");
red_line===
"singer.reader.exception.unexpected"
start_offset===
17
end_offset===
53
Python OUTPUT===
Stats.incr("singer.reader.exception.unexpected");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Reader closed.\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new LogFileReaderException("Reader closed.");
red_line===
"Reader closed."
start_offset===
39
end_offset===
55
Python OUTPUT===
throw new LogFileReaderException("Reader closed.");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"singer.reader.exception.unexpected\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
Stats.incr("singer.reader.exception.unexpected");
red_line===
"singer.reader.exception.unexpected"
start_offset===
17
end_offset===
53
Python OUTPUT===
Stats.incr("singer.reader.exception.unexpected");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"string\".
scn.ruleId===
1488
scn.suspCodeStr===
String string = new String(buffer.array(), 0, buffer.limit(), Charsets.UTF_8);
red_line===
new String(buffer.array(), 0, buffer.limit(), Charsets.UTF_8)
start_offset===
20
end_offset===
81
Python OUTPUT===
String string = new String(buffer.array(), 0, buffer.limit(), Charsets.UTF_8);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make HOSTNAME a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public static String HOSTNAME = getHostname();
red_line===
HOSTNAME
start_offset===
23
end_offset===
31
Python OUTPUT===
public static final String HOSTNAME = getHostname ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static String OS = System.getProperty("os.name").toLowerCase();
red_line===
OS
start_offset===
24
end_offset===
26
Python OUTPUT===
private static String OS = System.getProperty("os.name").toLowerCase();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Can not close fileReader.\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new LogStreamReaderException("Can not close fileReader.", ex);
red_line===
"Can not close fileReader."
start_offset===
43
end_offset===
70
Python OUTPUT===
throw new LogStreamReaderException("Can not close fileReader.", ex);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final long MaximumProcessingTimeSliceInMilliseconds = 864000000L;
red_line===
MaximumProcessingTimeSliceInMilliseconds
start_offset===
28
end_offset===
68
Python OUTPUT===
private static final long MaximumProcessingTimeSliceInMilliseconds = 864000000L;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"SHADOW_MODE_ENABLED\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
public static boolean SHADOW_MODE_ENABLED;
red_line===
SHADOW_MODE_ENABLED
start_offset===
24
end_offset===
43
Python OUTPUT===
public static boolean SHADOW_MODE_ENABLED;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make this member \"protected\".
scn.ruleId===
2386
scn.suspCodeStr===
public static final Properties SHADOW_SERVERSET_MAPPING = new Properties();
red_line===
SHADOW_SERVERSET_MAPPING
start_offset===
33
end_offset===
57
Python OUTPUT===
protected static final Properties SHADOW_SERVERSET_MAPPING = new Properties ( ) ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
String local_dir = null;
red_line===
local_dir
start_offset===
11
end_offset===
20
Python OUTPUT===
String local_dir = null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
String logfile_regex;
red_line===
logfile_regex
start_offset===
11
end_offset===
24
Python OUTPUT===
String logfile_regex;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this call to \"replaceAll()\" by a call to the \"replace()\" method.
scn.ruleId===
5361
scn.suspCodeStr===
return pulsarTopic.replaceAll("persistent://", "");
red_line===
replaceAll
start_offset===
23
end_offset===
33
Python OUTPUT===
return pulsarTopic.replaceAll ( " persistent:// " , " " ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make success a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public boolean success;
red_line===
success
start_offset===
17
end_offset===
24
Python OUTPUT===
public static final boolean success ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Make exception a static final constant or non-public and provide accessors if needed.
scn.ruleId===
1104
scn.suspCodeStr===
public Exception exception;
red_line===
exception
start_offset===
19
end_offset===
28
Python OUTPUT===
public static final Exception exception ;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this assignment of \"rack\".
scn.ruleId===
3010
scn.suspCodeStr===
LocalityAwarePartitioner.rack = rack;
red_line===
rack
start_offset===
29
end_offset===
33
Python OUTPUT===
 LocalityAwarePartitioner.rack =;
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Logger LOG = LoggerFactory.getLogger(MurmurByteArrayPartitioner.class);
red_line===
LOG
start_offset===
24
end_offset===
27
Python OUTPUT===
private static Logger LOG = LoggerFactory.getLogger(MurmurByteArrayPartitioner.class);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"topic\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private String topic;
red_line===
topic
start_offset===
17
end_offset===
22
Python OUTPUT===
 private String t 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"broker\u003d\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
OpenTsdbMetricConverter.incrGranular(SingerMetrics.BROKER_WRITE_SUCCESS, 1, "broker=" + leaderNode);
red_line===
"broker="
start_offset===
84
end_offset===
93
Python OUTPUT===
OpenTsdbMetricConverter.incrGranular(SingerMetrics.BROKER_WRITE_SUCCESS, 1, "broker=" + leaderNode);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Call \"remove()\" on \"SERIALIZER\".
scn.ruleId===
5164
scn.suspCodeStr===
private static final ThreadLocal<TSerializer> SERIALIZER = ThreadLocal.withInitial(TSerializer::new);
red_line===
SERIALIZER
start_offset===
48
end_offset===
58
Python OUTPUT===
private static final ThreadLocal<TSerializer> SERIALIZER = ThreadLocal.withInitial(TSerializer::new);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Call \"remove()\" on \"localCRC\".
scn.ruleId===
5164
scn.suspCodeStr===
private static ThreadLocal<CRC32> localCRC = ThreadLocal.withInitial(CRC32::new);
red_line===
localCRC
start_offset===
36
end_offset===
44
Python OUTPUT===
private static ThreadLocal<CRC32> localCRC = ThreadLocal.withInitial(CRC32::new);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
String contains no format specifiers.
scn.ruleId===
3457
scn.suspCodeStr===
LOG.debug(String.format("The partition number for key {} is {}", key, partitionNum));
red_line===
String.format("The partition number for key {} is {}", key, partitionNum)
start_offset===
14
end_offset===
87
Python OUTPUT===
LOG.debug(String.format("The partition number for key {} is {}", key, partitionNum));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
PrintStream outputPrintStream = System.out;
red_line===
System.out
start_offset===
36
end_offset===
46
Python OUTPUT===
 PrintStream outputPrintStream = System.out; 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
stringBuilder.append(new String(logMessage.getMessage()));
red_line===
String
start_offset===
33
end_offset===
39
Python OUTPUT===
 stringBuilder.append(new String(sage.getMessage())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
log.message = new String(logMessage.getMessage());
red_line===
String
start_offset===
26
end_offset===
32
Python OUTPUT===
 log.message = new String(sage.getMessage()); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
e.printStackTrace();
red_line===
ace();
start_offset===
26
end_offset===
32
Python OUTPUT===

isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Events in one batch      : " + (numHiddenFileEvents + numNormalFileEvents));
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Events in one batch : " + (numHiddenFileEvents + numNormalFileEvents)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Events from hidden files : " + numHiddenFileEvents);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Events from hidden files : " + numHiddenFileEvents); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Dumping all logstreams:" + LogStreamManager.getLogStreams());
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("Dumping all logstreams:" + LogStreamManager.getLogStreams()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Unknown cmd:" + cmd);
red_line===
System.err
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.err.println("Unknown cmd:" + cmd); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Must specify the configuration directory");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Must specify the configuration directory"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(key, new String(lm.getKey()));
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 assertEquals(key, new StrinetKey())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Invalid configuration file name:" + logFile);
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Invalid configuration file name:" + logFile); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Bad configuration file:" + file.getName());
red_line===
System.err
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.err.println("Bad configuration file:" + file.getName()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Topic:" + topic + " doesn't exist for file:" + splits[1]);
red_line===
System.err
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.err.println("Topic:" + topic + " doesn't exist for file:" + splits[1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Usage: LogFileMonitor singer_config_dir");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Usage: LogFileMonitor singer_config_dir"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("LogStreams Info: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("LogStreams Info: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(stream + " : ");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(stream + " : "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(s + ",");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println(s + ","); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("\n");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("\n"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(SingerSettings.getOrCreateFileSystemMonitor("").toString());
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(SingerSettings.getOrCreateFileSystemMonitor("").toString()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(puid);
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println(puid); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Failed to fetch Pod IDs. Reason:"+e.getMessage());
red_line===
System.err
start_offset===
3
end_offset===
13
Python OUTPUT===
 System.err.println("Failed to fetch Pod IDs. Reason:"+e.getMessage()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
protected static final String hostName = SingerUtils.getHostname();
red_line===
hostName
start_offset===
32
end_offset===
40
Python OUTPUT===
protected static final String hostName = SingerUtils.getHostname();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use the original value instead.
scn.ruleId===
2676
scn.suspCodeStr===
long initialDelay = Math.abs(random.nextLong()) % this.processingIntervalInMillis;
red_line===
random.nextLong()
start_offset===
37
end_offset===
54
Python OUTPUT===
long initialDelay = Math.abs(random.nextLong()) % this.processingIntervalInMillis;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
config.append(String.format("%s\n", line));
red_line===
String.format("%s\n", line)
start_offset===
22
end_offset===
49
Python OUTPUT===
config.append(String.format("%s\n", line));
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private static volatile Decider instance = null;
red_line===
volatile Decider
start_offset===
17
end_offset===
33
Python OUTPUT===
private static volatile Decider instance = null;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private volatile Map<String, Integer> mDeciderMap = null;
red_line===
volatile Map<String, Integer>
start_offset===
10
end_offset===
39
Python OUTPUT===
private volatile Map<String, Integer> mDeciderMap = null;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Refactor your code to get this URI from a customizable parameter.
scn.ruleId===
1075
scn.suspCodeStr===
private static final String DECIDER_FILE_PATH = "/var/config/config.manageddata.admin.decider";
red_line===
"/var/config/config.manageddata.admin.decider"
start_offset===
50
end_offset===
96
Python OUTPUT===
private static final String DECIDER_FILE_PATH = "/var/config/config.manageddata.admin.decider";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(value, new String(lm.getMessage()));
red_line===
String
start_offset===
30
end_offset===
36
Python OUTPUT===
 assertEquals(value, new StrinetMessage())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new RuntimeException(e);
red_line===
RuntimeException
start_offset===
22
end_offset===
38
Python OUTPUT===
throw new RuntimeException(e);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(key, new String(lm.getKey()));
red_line===
String
start_offset===
26
end_offset===
32
Python OUTPUT===
 assertEquals(key, new Str.getKey())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(key, new String(SingerUtils.readFromByteBuffer(lm.BufferForKey())));
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 assertEquals(key, new StrinerUtils.readFromByteBuffer(lm.BufferForKey()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(value, new String(SingerUtils.readFromByteBuffer(lm.BufferForMessage())));
red_line===
String
start_offset===
30
end_offset===
36
Python OUTPUT===
 assertEquals(value, new StrinerUtils.readFromByteBuffer(lm.BufferForMessage()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("MappedThriftReader:" + ts / 1000 + "us");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("MappedThriftReader:" + ts / 1000 + "us"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(key, new String(lm.getKey()));
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 assertEquals(key, new StrinetKey())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(key, new String(SingerUtils.readFromByteBuffer(lm.BufferForKey())));
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 assertEquals(key, new StrinerUtils.readFromByteBuffer(lm.BufferForKey()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(value, new String(SingerUtils.readFromByteBuffer(lm.BufferForMessage())));
red_line===
String
start_offset===
30
end_offset===
36
Python OUTPUT===
 assertEquals(value, new StrinerUtils.readFromByteBuffer(lm.BufferForMessage()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(key, new String(SingerUtils.readFromByteBuffer(lm.BufferForKey())));
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 assertEquals(key, new StrinerUtils.readFromByteBuffer(lm.BufferForKey()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(value, new String(SingerUtils.readFromByteBuffer(lm.BufferForMessage())));
red_line===
String
start_offset===
30
end_offset===
36
Python OUTPUT===
 assertEquals(value, new StrinerUtils.readFromByteBuffer(lm.BufferForMessage()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(key, new String(SingerUtils.readFromByteBuffer(lm.BufferForKey())));
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 assertEquals(key, new StrinerUtils.readFromByteBuffer(lm.BufferForKey()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(value, new String(SingerUtils.readFromByteBuffer(lm.BufferForMessage())));
red_line===
String
start_offset===
30
end_offset===
36
Python OUTPUT===
 assertEquals(value, new StrinerUtils.readFromByteBuffer(lm.BufferForMessage()))); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"hellow world\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
String key = "hellow world";
red_line===
"hellow world"
start_offset===
17
end_offset===
31
Python OUTPUT===
String key = "hellow world";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int COUNT = 1000;
red_line===
COUNT
start_offset===
8
end_offset===
13
Python OUTPUT===
int COUNT = 1000;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int COUNT = 1000;
red_line===
COUNT
start_offset===
8
end_offset===
13
Python OUTPUT===
int COUNT = 1000;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
value += value;
red_line===
value
start_offset===
6
end_offset===
11
Python OUTPUT===
value += value;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use a StringBuilder instead.
scn.ruleId===
1643
scn.suspCodeStr===
value += value;
red_line===
value
start_offset===
6
end_offset===
11
Python OUTPUT===
value += value;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MAX_MESSAGE_SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
private int MAX_MESSAGE_SIZE = 512;
red_line===
MAX_MESSAGE_SIZE
start_offset===
14
end_offset===
30
Python OUTPUT===
private int MAX_MESSAGE_SIZE = 512;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"MAX_MESSAGE_SIZE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
116
scn.suspCodeStr===
File logFile = File.createTempFile("temp-thrift-log", ".tmp");
red_line===
le = File.create
start_offset===
14
end_offset===
30
Python OUTPUT===
File logFile = File.createTempFile("temp-thrift-log", ".tmp");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
5
end_offset===
15
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("offset: " + offset + " logMessage: " + logMessage);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("offset: " + offset + " logMessage: " + logMessage); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
logFile.delete();
red_line===
delete
start_offset===
14
end_offset===
20
Python OUTPUT===
logFile.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("offset: " + offset + " logMessage: " + logMessage);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("offset: " + offset + " logMessage: " + logMessage); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
assertEquals(dataWritten.get(i).trim(), new String(log.getLogMessage().getMessage()));
red_line===
String
start_offset===
50
end_offset===
56
Python OUTPUT===
 assertEquals(dataWritten.get(i).trim(), new StringetLogMessage().getMessage())); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
String observed = new String(log.getLogMessage().getMessage());
red_line===
String
start_offset===
28
end_offset===
34
Python OUTPUT===
 String observed = new (log.getLogMessage().getMessage());
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test2.log\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String path = FilenameUtils.concat(getTempPath(), "test2.log");
red_line===
"test2.log"
start_offset===
54
end_offset===
65
Python OUTPUT===
String path = FilenameUtils.concat(getTempPath(), "test2.log");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
red_line===
singerBinaryDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerDataDir = singerTestBaseDir + "/data";
red_line===
singerDataDir
start_offset===
30
end_offset===
43
Python OUTPUT===
private static final String singerDataDir = singerTestBaseDir + "/data";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigDir = singerTestBaseDir + "/config";
red_line===
singerConfigDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerConfigDir = singerTestBaseDir + "/config";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
red_line===
singerConfigConfDir
start_offset===
30
end_offset===
49
Python OUTPUT===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String testTopic = "singer_test_event";
red_line===
testTopic
start_offset===
30
end_offset===
39
Python OUTPUT===
private static final String testTopic = "singer_test_event";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String auditTopic = "singer_test_event_audit";
red_line===
auditTopic
start_offset===
30
end_offset===
40
Python OUTPUT===
private static final String auditTopic = "singer_test_event_audit";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing Singer logging with auditing: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing Singer logging with auditing: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Initialize the test environment");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Initialize the test environment"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(". waiting seconds : " + i);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(". waiting seconds : " + i); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test succeeded! :)");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Test succeeded! :)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"thread\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Thread thread = null;
red_line===
thread
start_offset===
17
end_offset===
23
Python OUTPUT===
 private Thread t= null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"thread\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private Thread thread = null;
red_line===
thread
start_offset===
17
end_offset===
23
Python OUTPUT===
 private Thread t= null; 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Fetching auditing messages from " + hostName + " : ");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Fetching auditing messages from " + hostName + " : "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("num messages = " + auditCount + "  " + auditMessage);
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println("num messages = " + auditCount + " " + auditMessage); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerTestBaseDir = "/tmp/singer_e2e_test";
red_line===
singerTestBaseDir
start_offset===
30
end_offset===
47
Python OUTPUT===
private static final String singerTestBaseDir = "/tmp/singer_e2e_test";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
red_line===
singerBinaryDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerDataDir = singerTestBaseDir + "/data";
red_line===
singerDataDir
start_offset===
30
end_offset===
43
Python OUTPUT===
private static final String singerDataDir = singerTestBaseDir + "/data";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigDir = singerTestBaseDir + "/config";
red_line===
singerConfigDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerConfigDir = singerTestBaseDir + "/config";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
red_line===
singerConfigConfDir
start_offset===
30
end_offset===
49
Python OUTPUT===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String heartbeatTopic = "singer_heartbeat";
red_line===
heartbeatTopic
start_offset===
30
end_offset===
44
Python OUTPUT===
private static final String heartbeatTopic = "singer_heartbeat";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Fetching heartbeat messages from " + hostName + " : ");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Fetching heartbeat messages from " + hostName + " : "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(msg);
red_line===
System.out
start_offset===
12
end_offset===
22
Python OUTPUT===
 System.out.println(msg); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Thread.sleep(20 * 1000);
red_line===
*
start_offset===
22
end_offset===
23
Python OUTPUT===
 Thread.sleep(20 * 1000);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("[Singer]" + line);
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("[Singer]" + line); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerTestBaseDir = "/tmp/singer_latency_test";
red_line===
singerTestBaseDir
start_offset===
30
end_offset===
47
Python OUTPUT===
private static final String singerTestBaseDir = "/tmp/singer_latency_test";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
red_line===
singerBinaryDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerDataDir = singerTestBaseDir + "/data";
red_line===
singerDataDir
start_offset===
30
end_offset===
43
Python OUTPUT===
private static final String singerDataDir = singerTestBaseDir + "/data";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigDir = singerTestBaseDir + "/config";
red_line===
singerConfigDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerConfigDir = singerTestBaseDir + "/config";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String testTopic = "singer_latency";
red_line===
testTopic
start_offset===
30
end_offset===
39
Python OUTPUT===
private static final String testTopic = "singer_latency";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String auditTopic = "singer_test_event_audit";
red_line===
auditTopic
start_offset===
30
end_offset===
40
Python OUTPUT===
private static final String auditTopic = "singer_test_event_audit";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Testing Singer logging latency: ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Testing Singer logging latency: "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Initialize the test environment");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Initialize the test environment"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Fetching messages from " + hostName + " : ");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Fetching messages from " + hostName + " : "); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(" delay in millis: " + (now - eventTimestamp));
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println(" delay in millis: " + (now - eventTimestamp)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Found an exception!!!");
red_line===
System.out
start_offset===
10
end_offset===
20
Python OUTPUT===
 System.out.println("Found an exception!!!"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Reading one kafka message : " + numReceivedMessages);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Reading one kafka message : " + numReceivedMessages); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("min : " + latencyCounts.get(0));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("min : " + latencyCounts.get(0)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("P50 : " + latencyCounts.get(p50Index));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("P50 : " + latencyCounts.get(p50Index)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("P90 : " + latencyCounts.get(p90Index));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("P90 : " + latencyCounts.get(p90Index)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("P99 : " + latencyCounts.get(p99Index));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("P99 : " + latencyCounts.get(p99Index)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("max : " + latencyCounts.get(latencyCounts.size() - 1));
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("max : " + latencyCounts.get(latencyCounts.size() - 1)); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerTestBaseDir = "/tmp/singer_e2e_test";
red_line===
singerTestBaseDir
start_offset===
30
end_offset===
47
Python OUTPUT===
private static final String singerTestBaseDir = "/tmp/singer_e2e_test";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
red_line===
singerBinaryDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerBinaryDir = singerTestBaseDir + "/singer";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerDataDir = singerTestBaseDir + "/data";
red_line===
singerDataDir
start_offset===
30
end_offset===
43
Python OUTPUT===
private static final String singerDataDir = singerTestBaseDir + "/data";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigDir = singerTestBaseDir + "/config";
red_line===
singerConfigDir
start_offset===
30
end_offset===
45
Python OUTPUT===
private static final String singerConfigDir = singerTestBaseDir + "/config";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
red_line===
singerConfigConfDir
start_offset===
30
end_offset===
49
Python OUTPUT===
private static final String singerConfigConfDir = singerConfigDir + "/conf.d";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String testTopic = "singer_test_event";
red_line===
testTopic
start_offset===
30
end_offset===
39
Python OUTPUT===
private static final String testTopic = "singer_test_event";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String auditTopic = "singer_test_event_audit";
red_line===
auditTopic
start_offset===
30
end_offset===
40
Python OUTPUT===
private static final String auditTopic = "singer_test_event_audit";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Initialize the test environment");
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("Initialize the test environment"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println(". waiting seconds : " + i);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println(". waiting seconds : " + i); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test succeeded! :)");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Test succeeded! :)"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Test failed! :(");
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Test failed! :("); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"pod-11\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
LogStream logStream = new LogStream(new SingerLog(new SingerLogConfig(), "pod-11"), "test");
red_line===
"pod-11"
start_offset===
77
end_offset===
85
Python OUTPUT===
LogStream logStream = new LogStream(new SingerLog(new SingerLogConfig(), "pod-11"), "test");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
8
end_offset===
16
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Add logic to this catch clause or eliminate it and rethrow the exception automatically.
scn.ruleId===
2737
scn.suspCodeStr===
throw e;
red_line===
throw e;
start_offset===
6
end_offset===
14
Python OUTPUT===
throw e;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"bootstrap.servers\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
map.put("bootstrap.servers", "test123");
red_line===
"bootstrap.servers"
start_offset===
12
end_offset===
31
Python OUTPUT===
map.put("bootstrap.servers", "test123");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Must fail since the supplied class is not a valid class\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
fail("Must fail since the supplied class is not a valid class");
red_line===
"Must fail since the supplied class is not a valid class"
start_offset===
11
end_offset===
68
Python OUTPUT===
fail("Must fail since the supplied class is not a valid class");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"writer\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
writer.close();
red_line===
writer.close
start_offset===
8
end_offset===
20
Python OUTPUT===
writer.close();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"writer\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
e.printStackTrace();
red_line===
printStackTr
start_offset===
8
end_offset===
20
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this constant name to match the regular expression \u0027^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u0027.
scn.ruleId===
115
scn.suspCodeStr===
private static final String filePrefix = "test.tmp";
red_line===
filePrefix
start_offset===
30
end_offset===
40
Python OUTPUT===
private static final String filePrefix = "test.tmp";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("testDir: " + testDir.getPath());
red_line===
System.out
start_offset===
4
end_offset===
14
Python OUTPUT===
 System.out.println("testDir: " + testDir.getPath()); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
sortedFiles.stream().forEachOrdered(file -> System.out.println(file.getPath()));
red_line===
System.out
start_offset===
50
end_offset===
60
Python OUTPUT===
 sortedFiles.stream().forEachOrdered(file -> System.out.println(file.getPath())); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Immediately return this expression instead of assigning it to the temporary variable \"logStream\".
scn.ruleId===
1488
scn.suspCodeStr===
LogStream logStream = LogStreamManager.createNewLogStream(singerLog, filePrefix);
red_line===
LogStreamManager.createNewLogStream(singerLog, filePrefix)
start_offset===
26
end_offset===
84
Python OUTPUT===
LogStream logStream = LogStreamManager.createNewLogStream(singerLog, filePrefix);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"renameTo\".
scn.ruleId===
899
scn.suspCodeStr===
toRename.renameTo(new File(testDir, newName));
red_line===
toRename.renameTo(new File(testDir, newName));
start_offset===
4
end_offset===
50
Python OUTPUT===
toRename.renameTo(new File(testDir, newName));
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"delete\".
scn.ruleId===
899
scn.suspCodeStr===
created2[i].delete();
red_line===
created2[i].delete();
start_offset===
6
end_offset===
27
Python OUTPUT===
created2[i].delete();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"delete\".
scn.ruleId===
899
scn.suspCodeStr===
created[0].delete();
red_line===
created[0].delete();
start_offset===
4
end_offset===
24
Python OUTPUT===
created[0].delete();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"renameTo\".
scn.ruleId===
899
scn.suspCodeStr===
created[i].renameTo(renamed[i]);
red_line===
created[i].renameTo(renamed[i]);
start_offset===
6
end_offset===
38
Python OUTPUT===
created[i].renameTo(renamed[i]);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"createNewFile\".
scn.ruleId===
899
scn.suspCodeStr===
renamed[NUM_FILES].createNewFile();
red_line===
renamed[NUM_FILES].createNewFile();
start_offset===
4
end_offset===
39
Python OUTPUT===
renamed[NUM_FILES].createNewFile();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test.tmp\" 9 times.
scn.ruleId===
1192
scn.suspCodeStr===
config.setLogStreamRegex("test.tmp");
red_line===
"test.tmp"
start_offset===
29
end_offset===
39
Python OUTPUT===
config.setLogStreamRegex("test.tmp");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES = 10;
red_line===
NUM_FILES
start_offset===
8
end_offset===
17
Python OUTPUT===
int NUM_FILES = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES_2 = 10;
red_line===
NUM_FILES_2
start_offset===
8
end_offset===
19
Python OUTPUT===
int NUM_FILES_2 = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES = 10;
red_line===
NUM_FILES
start_offset===
8
end_offset===
17
Python OUTPUT===
int NUM_FILES = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES = 10;
red_line===
NUM_FILES
start_offset===
8
end_offset===
17
Python OUTPUT===
int NUM_FILES = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int FIRST_HALF = NUM_FILES / 2;
red_line===
FIRST_HALF
start_offset===
8
end_offset===
18
Python OUTPUT===
int FIRST_HALF = NUM_FILES / 2;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES = 10;
red_line===
NUM_FILES
start_offset===
8
end_offset===
17
Python OUTPUT===
int NUM_FILES = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES_2 = 20;
red_line===
NUM_FILES_2
start_offset===
8
end_offset===
19
Python OUTPUT===
int NUM_FILES_2 = 20;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this local variable to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
117
scn.suspCodeStr===
int NUM_FILES = 10;
red_line===
NUM_FILES
start_offset===
8
end_offset===
17
Python OUTPUT===
int NUM_FILES = 10;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove the \"singerConfig\" field and declare it as a local variable in the relevant methods.
scn.ruleId===
1450
scn.suspCodeStr===
private static SingerConfig singerConfig;
red_line===
singerConfig
start_offset===
30
end_offset===
42
Python OUTPUT===
 private static SingerConfig s 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"singer.ostrichPort\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
put("singer.ostrichPort", "9896");
red_line===
"singer.ostrichPort"
start_offset===
14
end_offset===
34
Python OUTPUT===
put("singer.ostrichPort", "9896");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"singer.logConfigDir\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
put("singer.logConfigDir", logConfigDir.getPath());
red_line===
"singer.logConfigDir"
start_offset===
14
end_offset===
35
Python OUTPUT===
put("singer.logConfigDir", logConfigDir.getPath());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Creating pod parent directory:" + podLogPath);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Creating pod parent directory:" + podLogPath); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"createNewFile\".
scn.ruleId===
899
scn.suspCodeStr===
file.createNewFile();
red_line===
file.createNewFile();
start_offset===
8
end_offset===
29
Python OUTPUT===
file.createNewFile();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"createNewFile\".
scn.ruleId===
899
scn.suspCodeStr===
new File(podLogPath + "/c2121-1111-2222-3333/var/log/access2.log").createNewFile();
red_line===
new File(podLogPath + "/c2121-1111-2222-3333/var/log/access2.log").createNewFile();
start_offset===
8
end_offset===
91
Python OUTPUT===
new File(podLogPath + "/c2121-1111-2222-3333/var/log/access2.log").createNewFile();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
return file.delete();
red_line===
delete
start_offset===
28
end_offset===
34
Python OUTPUT===
return file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Move the array designators [] to the type.
scn.ruleId===
1197
scn.suspCodeStr===
String files[] = file.list();
red_line===
[]
start_offset===
28
end_offset===
30
Python OUTPUT===
String files[] = file.list();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use \"java.nio.file.Files#delete\" here for better messages on error conditions.
scn.ruleId===
4042
scn.suspCodeStr===
return file.delete();
red_line===
delete
start_offset===
24
end_offset===
30
Python OUTPUT===
return file.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"a1223-1111-2222-3333\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue(SingerSettings.getFsMonitorMap().containsKey("a1223-1111-2222-3333"));
red_line===
"a1223-1111-2222-3333"
start_offset===
64
end_offset===
86
Python OUTPUT===
assertTrue(SingerSettings.getFsMonitorMap().containsKey("a1223-1111-2222-3333"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/var/log\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
logConfig1.setLogDir("/var/log");
red_line===
"/var/log"
start_offset===
29
end_offset===
39
Python OUTPUT===
logConfig1.setLogDir("/var/log");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"poll\".
scn.ruleId===
1854
scn.suspCodeStr===
poll = new KubeService(kubeConfig);
red_line===
= new KubeService(kubeConfig)
start_offset===
17
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this useless assignment to local variable \"poll\".
scn.ruleId===
1854
scn.suspCodeStr===
long uptime = new Random().nextLong();
red_line===
me = new Random().nextLong();
start_offset===
17
end_offset===
46
Python OUTPUT===
 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"default\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
podToNamespaceMap.put("enimanager-ppl56", "default");
red_line===
"default"
start_offset===
50
end_offset===
59
Python OUTPUT===
podToNamespaceMap.put("enimanager-ppl56", "default");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace \"Collections.EMPTY_MAP\" by \"Collections.emptyMap()\".
scn.ruleId===
1596
scn.suspCodeStr===
assertEquals("no kafka writes", Collections.EMPTY_MAP, status.getKafkaWrites());
red_line===
Collections.EMPTY_MAP
start_offset===
40
end_offset===
61
Python OUTPUT===
assertEquals ( " no kafka writes " , Collections.EMPTY_MAP , status.getKafkaWrites ( ) ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace \"Collections.EMPTY_MAP\" by \"Collections.emptyMap()\".
scn.ruleId===
1596
scn.suspCodeStr===
assertEquals("no latency", Collections.EMPTY_MAP, status.getLatency());
red_line===
Collections.EMPTY_MAP
start_offset===
35
end_offset===
56
Python OUTPUT===
assertEquals ( " no latency " , Collections.EMPTY_MAP , status.getLatency ( ) ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace \"Collections.EMPTY_MAP\" by \"Collections.emptyMap()\".
scn.ruleId===
1596
scn.suspCodeStr===
assertEquals("no skippedBytes", Collections.EMPTY_MAP, status.getSkippedBytes());
red_line===
Collections.EMPTY_MAP
start_offset===
40
end_offset===
61
Python OUTPUT===
assertEquals ( " no skippedBytes " , Collections.EMPTY_MAP , status.getSkippedBytes ( ) ) ;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"us-east-1a\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
environmentVariables.set("LOCALITY", "us-east-1a");
red_line===
"us-east-1a"
start_offset===
41
end_offset===
53
Python OUTPUT===
environmentVariables.set("LOCALITY", "us-east-1a");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test.5\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
logStream.put(new LogFile(1L), "test.5");
red_line===
"test.5"
start_offset===
35
end_offset===
43
Python OUTPUT===
logStream.put(new LogFile(1L), "test.5");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
ProducerRecord<byte[], byte[]> record = writerOutput.get(j);
red_line===
record
start_offset===
39
end_offset===
45
Python OUTPUT===
ProducerRecord<byte[], byte[]> record = writerOutput.get(j);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"test.tmp\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
LogStream logStream = new LogStream(singerLog, "test.tmp");
red_line===
"test.tmp"
start_offset===
51
end_offset===
61
Python OUTPUT===
LogStream logStream = new LogStream(singerLog, "test.tmp");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"/a/b/c\" 6 times.
scn.ruleId===
1192
scn.suspCodeStr===
SingerLog singerLog = new SingerLog(createSingerLogConfig("test", "/a/b/c"));
red_line===
"/a/b/c"
start_offset===
70
end_offset===
78
Python OUTPUT===
SingerLog singerLog = new SingerLog(createSingerLogConfig("test", "/a/b/c"));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
This accessibility update should be removed.
scn.ruleId===
3011
scn.suspCodeStr===
totalMemory.setAccessible(true);
red_line===
totalMemory.setAccessible(true)
start_offset===
4
end_offset===
35
Python OUTPUT===
totalMemory.setAccessible(true);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this array creation and simply pass the elements.
scn.ruleId===
3878
scn.suspCodeStr===
assertEquals(Arrays.asList(new Integer[] { 1, 2 }), filteredPartitions);
red_line===
new Integer[] { 1, 2 }
start_offset===
31
end_offset===
53
Python OUTPUT===
 assertEquals(Arrays.asList(newfilteredPartitions); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Bad partition:\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
assertTrue("Bad partition:" + partition, outputPartitionIds.contains(partition));
red_line===
"Bad partition:"
start_offset===
17
end_offset===
33
Python OUTPUT===
assertTrue("Bad partition:" + partition, outputPartitionIds.contains(partition));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
e.printStackTrace();
red_line===
printStack
start_offset===
8
end_offset===
18
Python OUTPUT===
 e.printStackTrace(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"Write error\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
throw new LogStreamWriterException("Write error");
red_line===
"Write error"
start_offset===
43
end_offset===
56
Python OUTPUT===
throw new LogStreamWriterException("Write error");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"thrift.log\" 3 times.
scn.ruleId===
1192
scn.suspCodeStr===
String logStreamHeadFileName = "thrift.log";
red_line===
"thrift.log"
start_offset===
35
end_offset===
47
Python OUTPUT===
String logStreamHeadFileName = "thrift.log";
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.err.println("Waiting for file system events to be noticed by FileSystemMonitor");
red_line===
System.err
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.err.println("Waiting for file system events to be noticed by FileSystemMonitor"); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.print(".");
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.print("."); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
random = new Random();
red_line===
om = new R
start_offset===
8
end_offset===
18
Python OUTPUT===
 random = new Random(); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"OS\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static String OS = System.getProperty("os.name").toLowerCase();
red_line===
OS
start_offset===
24
end_offset===
26
Python OUTPUT===
private static String OS = System.getProperty("os.name").toLowerCase();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
created[i] = new File(testDir + "/" + fileNamePrefix + "." + (numFiles - i - 1));
red_line===
"/"
start_offset===
38
end_offset===
41
Python OUTPUT===
 created[i] = new File(testDir + " / " +leNamePrefix + "." + (numFiles - i - 1)); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Failed to create new file : " + created[i]);
red_line===
System.out
start_offset===
8
end_offset===
18
Python OUTPUT===
 System.out.println("Failed to create new file : " + created[i]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
byte[] bytes = new String("This is a test string").getBytes();
red_line===
String
start_offset===
25
end_offset===
31
Python OUTPUT===
 byte[] bytes = new Strins is a test string").getBytes(); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
created[numFiles - 1] = new File(testDir + "/" + fileNamePrefix);
red_line===
"/"
start_offset===
47
end_offset===
50
Python OUTPUT===
 created[numFiles - 1] = new File(testDir + " / "fileNamePrefix); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this use of System.out or System.err by a logger.
scn.ruleId===
106
scn.suspCodeStr===
System.out.println("Failed to create new file : " + created[numFiles - 1]);
red_line===
System.out
start_offset===
6
end_offset===
16
Python OUTPUT===
 System.out.println("Failed to create new file : " + created[numFiles - 1]); 
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this \"String\" constructor
scn.ruleId===
2129
scn.suspCodeStr===
byte[] bytes = new String("This is a test string").getBytes();
red_line===
String
start_offset===
23
end_offset===
29
Python OUTPUT===
 byte[] bytes = new Strhis is a test string").getBytes(); 
isFixed===
true
==================
RuleType===
BUG
scn.errorMessage===
Do something with the \"boolean\" value returned by \"delete\".
scn.ruleId===
899
scn.suspCodeStr===
f.delete();
red_line===
f.delete();
start_offset===
6
end_offset===
17
Python OUTPUT===
f.delete();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
out.write(String.format("%s = %s\n", key, keyValues.get(key)));
red_line===
String.format("%s = %s\n", key, keyValues.get(key))
start_offset===
16
end_offset===
67
Python OUTPUT===
out.write(String.format("%s = %s\n", key, keyValues.get(key)));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
%n should be used in place of \\n to produce the platform-specific line separator.
scn.ruleId===
3457
scn.suspCodeStr===
sb.append(String.format("%s=%s\n", key, value));
red_line===
String.format("%s=%s\n", key, value)
start_offset===
16
end_offset===
52
Python OUTPUT===
sb.append(String.format("%s=%s\n", key, value));
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this variable to not match a restricted identifier.
scn.ruleId===
6213
scn.suspCodeStr===
ProducerRecord<byte[], byte[]> record;
red_line===
record
start_offset===
35
end_offset===
41
Python OUTPUT===
ProducerRecord<byte[], byte[]> record;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"LOG\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
private static Logger LOG = LoggerFactory.getLogger(LoggingAuditClient.class);
red_line===
LOG
start_offset===
24
end_offset===
27
Python OUTPUT===
private static Logger LOG = LoggerFactory.getLogger(LoggingAuditClient.class);
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Use a thread-safe type; adding \"volatile\" is not enough to make this field thread-safe.
scn.ruleId===
3077
scn.suspCodeStr===
private static volatile ConfigFileWatcher DEFAULT_INSTANCE = null;
red_line===
volatile ConfigFileWatcher
start_offset===
17
end_offset===
43
Python OUTPUT===
private static volatile ConfigFileWatcher DEFAULT_INSTANCE = null;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this division operation to a \"double\".
scn.ruleId===
2184
scn.suspCodeStr===
double percentageChange = delta * 100 / oldBrokerSet.size();
red_line===
/
start_offset===
44
end_offset===
45
Python OUTPUT===
 double percentageChange = delta * 100  /  oldBrokerSet.size();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename \"address\" which hides the field declared at line 54.
scn.ruleId===
1117
scn.suspCodeStr===
InetAddress address = InetAddress.getByName(host);
red_line===
address
start_offset===
16
end_offset===
23
Python OUTPUT===
InetAddress address = InetAddress.getByName(host);
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Rename this field \"INSTANCE\" to match the regular expression \u0027^[a-z][a-zA-Z0-9]*$\u0027.
scn.ruleId===
3008
scn.suspCodeStr===
protected static LogMonitor INSTANCE;
red_line===
INSTANCE
start_offset===
30
end_offset===
38
Python OUTPUT===
protected static LogMonitor INSTANCE;
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define a constant instead of duplicating this literal \"singer.monitor.unexpected_exception\" 4 times.
scn.ruleId===
1192
scn.suspCodeStr===
Stats.incr("singer.monitor.unexpected_exception");
red_line===
"singer.monitor.unexpected_exception"
start_offset===
19
end_offset===
56
Python OUTPUT===
Stats.incr("singer.monitor.unexpected_exception");
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
private static final long MINIMUM_STUCK_STREAM_AGE_SECS = 60 * 10;
red_line===
*
start_offset===
63
end_offset===
64
Python OUTPUT===
 private static final long MINIMUM_STUCK_STREAM_AGE_SECS = 60 * 10;
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Cast one of the operands of this multiplication operation to a \"long\".
scn.ruleId===
2184
scn.suspCodeStr===
Random rand = new Random(SingerUtils.getHostname().hashCode());
red_line===
(
start_offset===
63
end_offset===
64
Python OUTPUT===
 Random rand = new Random(SingerUtils.getHostname().hashCode());
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Use static access with \"!Unknown!\" for \"Entry\".
scn.ruleId===
3252
scn.suspCodeStr===
Map.Entry<LogStream, LogStreamProcessor> entry = it.next();
red_line===
Entry
start_offset===
10
end_offset===
15
Python OUTPUT===
Map.Entry<LogStream, LogStreamProcessor> entry = it.next();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
throw new Exception("Both system properties singer.config.dir and config are undefined");
red_line===
Exception
start_offset===
16
end_offset===
25
Python OUTPUT===
throw new Exception("Both system properties singer.config.dir and config are undefined");
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
this.random = new Random();
red_line===
= new Ran
start_offset===
16
end_offset===
25
Python OUTPUT===
this.random = new Random();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
this.random = new Random();
red_line===
= new Ran
start_offset===
16
end_offset===
25
Python OUTPUT===
this.random = new Random();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
e.printStackTrace();
red_line===
tackTrace
start_offset===
16
end_offset===
25
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
e.printStackTrace();
red_line===
ckTrace()
start_offset===
16
end_offset===
25
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
e.printStackTrace();
red_line===
ckTrace()
start_offset===
16
end_offset===
25
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
e.printStackTrace();
red_line===
ckTrace()
start_offset===
16
end_offset===
25
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
Define and throw a dedicated exception instead of using a generic one.
scn.ruleId===
112
scn.suspCodeStr===
e.printStackTrace();
red_line===
ckTrace()
start_offset===
16
end_offset===
25
Python OUTPUT===
e.printStackTrace();
isFixed===
false
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Remove this hard-coded path-delimiter.
scn.ruleId===
1075
scn.suspCodeStr===
File singerConf = new File(configConfDir + "/" + configConfFileName);
red_line===
"/"
start_offset===
49
end_offset===
52
Python OUTPUT===
 File singerConf = new File(configConfDir + " / " +nfigConfFileName); 
isFixed===
true
==================
RuleType===
CODE_SMELL
scn.errorMessage===
Replace this assert with a proper check.
scn.ruleId===
4274
scn.suspCodeStr===
assert (failOnException);
red_line===
assert (failOnException);
start_offset===
6
end_offset===
31
Python OUTPUT===
 assert (failOnException); 
isFixed===
false
==================
RuleType===
BUG
scn.errorMessage===
A \"NullPointerException\" could be thrown; \"writer\" is nullable here.
scn.ruleId===
2259
scn.suspCodeStr===
writer.close();
red_line===
writer.close
start_offset===
8
end_offset===
20
Python OUTPUT===
writer.close();
isFixed===
false
==================
